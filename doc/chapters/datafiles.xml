<?PSGML NOFILL programlisting example informalequation?>

  <chapter id="datafiles"><title>Data files</title>

  <sect1 id="native-format"><title>Native format</title>

    <para><application>gretl</application> has its own format for data
      files.  Most users will probably not want to read or write such
      files outside of <application>gretl</application> itself, but
      occasionally this may be useful and full details on the file
      formats are given in <xref linkend="app-datafile"/>.</para>

  </sect1>

  <sect1 id="other-formats"><title>Other data file formats</title>

    <para>
      <application>gretl</application> will read various other data
      formats.
    </para>

    <itemizedlist>

      <listitem><para>Plain text (ASCII) files.  These can be brought
	  in using <application>gretl</application>'s <quote>File,
	    Open Data, Import ASCII&hellip;</quote> menu item, or the
	  <command>import</command> script command.  For details on
	  what <application>gretl</application> expects of such files,
	  see
	  <xref linkend="scratch"/>.</para>
      </listitem>
      <listitem><para>Comma-Separated Values (CSV) files.  These can
	  be imported using <application>gretl</application>'s
	  <quote>File, Open Data, Import CSV&hellip;</quote> menu
	  item, or the <command>import</command> script command. See
	  also <xref linkend="scratch"/>.</para>
      </listitem>
      <listitem><para>Worksheets in the format of either MS
	  <application>Excel</application> or
	  <application>Gnumeric</application>. These are also brought
	  in using <application>gretl</application>'s <quote>File,
	    Open Data, Import</quote> menu.  The requirements for such
	  files are given in 
	  <xref linkend="scratch"/>.</para>
      </listitem>
      <listitem><para>BOX1 format data.  Large amounts of micro data
	  are available (for free) in this format via the <ulink
	    url="http://www.census.gov/ftp/pub/DES/www/welcome.html">Data 
	    Extraction Service</ulink> of the US Bureau of the Census.
	  BOX1 data may be imported using the <quote>File, Open Data,
	    Import BOX&hellip;</quote> menu item or the
	  <command>import -o</command> script command.</para>
      </listitem>

    </itemizedlist>

    <para>When you import data from the ASCII, CSV or BOX formats,
      <application>gretl</application> opens a
      <quote>diagnostic</quote> window, reporting on its progress in
      reading the data.  If you encounter a problem with ill-formatted
      data, the messages in this window should give you a handle on
      fixing the problem.</para>

    <para>For the convenience of anyone wanting to carry out more
      complex data analysis, <application>gretl</application> has a
      facility for writing out data in the native formats of GNU R and
      GNU Octave (see <xref linkend="app-advanced"/>).  In the GUI
      client this option is found under the <quote>File</quote> menu;
      in the command-line client use the <command>store</command>
      command with the flag <command>-r</command> (R) or
      <command>-m</command> (Octave).</para>

  </sect1>

  <sect1 id="dbase"><title>Binary databases</title>
  
    <para>For working with large amounts of data I have supplied
      <application>gretl</application> with a database-handling
      routine.  A <emphasis>database</emphasis>, as opposed to a
      <emphasis>data file</emphasis>, is not read directly into the
      program's workspace.  A database can contain series of mixed
      frequencies and sample ranges.  You open the database and select
      series to import into the working data set.  You can then save
      those series in a native format data file if you wish. Databases
      can be accessed via <application>gretl</application>'s menu item
      <quote>File, Browse databases</quote>.</para>

    <para>For details on the format of
      <application>gretl</application> databases, see <xref
	linkend="app-datafile"/>.</para>
  
    <sect2 id="online-data"><title>Online access to databases</title>

      <para>As of version 0.40, <application>gretl</application> is
	able to access databases via the internet.  Several databases
	are available from Wake Forest University.  Your computer must
	be connected to the internet for this option to work.  Please
	see the item on <quote>Online databases</quote> under
	<application>gretl</application>'s Help menu.</para>

    </sect2>

    <sect2 id="RATS"><title>RATS 4 databases</title>

      <para>Thanks to Thomas Doan of <citetitle>Estima</citetitle>,
	who provided me with the specification of the database format
	used by RATS 4 (Regression Analysis of Time Series),
	<application>gretl</application> can also handle such
	databases.  Well, actually, a subset of same: I have only
	worked on time-series databases containing monthly and
	quarterly series.  My university has the RATS G7 database
	containing data for the seven largest OECD economies and
	<application>gretl</application> will read that OK.</para>

      <tip><para>Visit the <application>gretl</application> <ulink
	    url="http://ricardo.ecn.wfu.edu/gretl/gretl_data.html">data 
	    page</ulink> for details and updates on available
	  data.</para></tip>

    </sect2>
  </sect1>

  <sect1 id="scratch"><title>Creating a data file from scratch</title>

    <para>There are five ways to do this: (1) Find, or create using a
      text editor, a plain text data file and open it with
      <application>gretl</application>'s <quote>Import ASCII</quote>
      option. (2) Use your favorite spreadsheet to establish the data
      file, save it in Comma Separated Values format if necessary
      (this should not be necessary if the spreadsheet program is MS
      Excel or Gnumeric), then use one of
      <application>gretl</application>'s <quote>Import</quote> options
      (CSV, Excel or Gnumeric, as the case may be). (3) Use
      <application>gretl</application>'s built-in spreadsheet. (4)
      Select data series from a suitable database. (5) Use your
      favorite text editor or other software tools to a create data
      file in <application>gretl</application> format
      independently.</para>

    <para>Here are a few comments and details on these methods.</para>

    <sect2><title>Common points on imported data</title>
      
      <para>Options (1) and (2) involve using
	<application>gretl</application>'s <quote>import</quote>
	mechanism.  For <application>gretl</application> to read such
	data successfully, certain general conditions must be
	satisfied:</para>

      <itemizedlist>
	<listitem>
	  <para>The first row must contain valid variable names.  A
	    valid variable name is of 8 characters maximum; starts
	    with a letter; and contains nothing but letters, numbers
	    and the underscore character, <literal>_</literal>.
	    (Longer variable names will be truncated to 8 characters.)
	    Qualifications to the above:  First, in the case of an
	    ASCII or CSV import, if the file contains no row with
	    variable names the program will automatically add names,
	    <varname>v1</varname>, <varname>v2</varname> and so on.
	    Second, by <quote>the first row</quote> is meant the first
	    <emphasis>relevant</emphasis> row.  In the case of ASCII
	    and CSV imports, blank rows and rows beginning with a hash
	    mark, <literal>#</literal>, are ignored.  In the case of
	    Excel and Gnumeric imports, you are presented with a
	    dialog box where you can select an offset into the
	    spreadsheet, so that <application>gretl</application> will
	    ignore a specified number of rows and/or columns.
	  </para>
	</listitem>
	<listitem>
	  <para>Data values: these should constitute a rectangular
	    block, with one variable per column (and one observation
	    per row).  The number of variables (data columns) must
	    match the number of variable names given. See also
	    <xref linkend="missing-data"/>.  
	  </para>
	</listitem>
	<listitem>
	  <para>Dates (or observation labels): Optionally, the
	    <emphasis>first</emphasis> column may contain strings such
	    as dates, or labels for cross-sectional observations.
	    Such strings have a maximum of 8 characters (as with
	    variable names, longer strings will be truncated).  A
	    column of this sort should be headed with the string
	    <literal>obs</literal> or <literal>date</literal>, or the
	    first row entry may be left blank.</para>
	  <para>For dates to be recognized as such, the date strings
	    must adhere to one or other of a set of specific formats,
	    as follows.  For <emphasis>annual</emphasis> data: 4-digit
	    years.  For <emphasis>quarterly</emphasis> data: a 4-digit
	    year, followed by a separator (either a period, a colon,
	    or the letter <literal>Q</literal>), followed by a 1-digit
	    quarter.  Examples: <literal>1997.1</literal>,
	    <literal>2002:3</literal>, <literal>1947Q1</literal>.  For
	    <emphasis>monthly</emphasis> data: a 4-digit year,
	    followed by a period or a colon, followed by a two-digit
	    month.  Examples: <literal>1997.01</literal>,
	    <literal>2002:10</literal>.
	  </para>
	</listitem>

      </itemizedlist>

      <para>CSV files can use comma, space or tab as the column
	separator.  When you use the <quote>Import CSV</quote> menu
	item you are prompted to specify the separator.  In the case
	of <quote>Import ASCII</quote> the program attempts to
	auto-detect the separator that was used.</para>

      <para>If you use a spreadsheet to prepare your data you are able
	to carry out various transformations of the <quote>raw</quote>
	data with ease (adding things up, taking percentages or
	whatever): note, however, that you can also do this sort of
	thing easily &mdash; perhaps more easily &mdash; within
	<application>gretl</application>, by using the tools under the
	<quote>Data, Add variables</quote> menu and/or
	<quote>Variable, define new variable</quote>.</para>

    </sect2>


    <sect2><title>Appending imported data</title>

      <para>You may wish to establish a
	<application>gretl</application> data set piece by piece, by
	incremental importation of data from other sources.  This is
	supported via the <quote>File, Append data</quote> menu items.
	<application>gretl</application> will check the new data for
	conformability with the existing data set and, if everything
	seems OK, will merge the data.  You can add new variables in
	this way, provided the data frequency matches that of the
	existing data set.  Or you can append new observations for
	data series that are already present; in this case the
	variable names must match up correctly.  Note that by default
	(that is, if you choose <quote>Open data</quote> rather than
	<quote>Append data</quote>), opening a new data file closes
	the current one.</para>

    </sect2>

    <sect2><title>Using the built-in spreadsheet</title>

      <para>Under <application>gretl</application>'s <quote>File,
	  Create data set</quote> menu you can choose the sort of data
	set you want to establish (e.g. quarterly time series,
	cross-sectional).  You will then be prompted for starting and
	ending dates (or observation numbers) and the name of the
	first variable to add to the data set. After supplying this
	information you will be faced with a simple spreadsheet into
	which you can type data values.  In the spreadsheet window,
	clicking the right mouse button will invoke a popup menu which
	enables you to add a new variable (column), to add an
	observation (append a row at the foot of the sheet), or to
	insert an observation at the selected point (move the data
	down and insert a blank row.)</para>
  
      <para>Once you have entered data into the spreadsheet you import
	these into <application>gretl</application>'s workspace using
	the spreadsheet's <quote>Apply changes</quote> button.</para>

      <para>Please note that <application>gretl</application>'s
	spreadsheet is quite basic and has no support for functions or
	formulas.  Data transformations are done via the
	<quote>Data</quote> or <quote>Variable</quote> menus in the
	main <application>gretl</application> window.</para>
    </sect2>

    <sect2><title>Selecting from a database</title>

      <para>Another alternative is to establish your data set by
	selecting variables from a database.
	<application>gretl</application> comes with a database of US
	macroeconomic time series and, as mentioned above, the program
	will reads RATS 4 databases.</para>
  
      <para>Begin with <application>gretl</application>'s <quote>File,
	  Browse databases</quote> menu item. This has three forks:
	<quote>gretl native</quote>, <quote>RATS 4</quote> and
	<quote>on database server</quote>.  You should be able to find
	the file <filename>bcih.bin</filename> in the file selector
	that opens if you choose the <quote>gretl native</quote>
	option &mdash; this file is supplied with the
	distribution.</para>
	
      <para>You won't find anything under <quote>RATS 4</quote> unless
	you have purchased RATS data.<footnote><para>See <ulink
	      url="http://www.estima.com/">www.estima.com</ulink></para>
	  </footnote>  If you do possess RATS data you should go into
	<application>gretl</application>'s <quote>File, Preferences,
	  General</quote> dialog, select the Databases tab, and fill
	in the correct path to your RATS files.</para> 
  
      <para>If your computer is connected to the internet you should
	find several databases (at Wake Forest University) under
	<quote>on database server</quote>.  You can browse these
	remotely; you also have the option of installing them onto
	your own computer.  The initial remote databases window has an
	item showing, for each file, whether it is already installed
	locally (and if so, if the local version is up to date with
	the version at Wake Forest).</para> 

      <para>Assuming you have managed to open a database you can
	import selected series into <application>gretl</application>'s
	workspace by using the <quote>Import</quote> menu item in the
	database window (or via the popup menu that appears if you
	click the right mouse button).</para>   

    </sect2>

    <sect2><title>Creating a gretl data file independently</title>

      <para>It is possible to create a data file in one or other of
	<application>gretl</application>'s own formats using a text
	editor or software tools such as
	<application>awk</application>, <application>sed</application>
	or <application>perl</application>.  This may be a good choice
	if you have large amounts of data already in machine readable
	form. You will, of course, need to study the
	<application>gretl</application> data formats (XML format or
	<quote>traditional</quote> format) as described in 
	<xref linkend="datafiles"/>.</para>

    </sect2>

    <sect2><title>Further note</title>
  
      <para>
	<application>gretl</application> has no problem compacting
	data series of relatively high frequency (e.g. monthly) to a
	lower frequency (e.g. quarterly): this is done by averaging.
	But it has no way of converting lower frequency data to
	higher.  Therefore if you want to import series of various
	different frequencies from a database into
	<application>gretl</application> <emphasis>you must start by
	  importing a series of the lowest frequency you intend to
	  use.</emphasis> This will initialize your
	<application>gretl</application> data set to the low
	frequency, and higher frequency data can be imported
	subsequently (they will be compacted automatically).  If you
	start with a high frequency series you will not be able to
	import any series of lower frequency.</para>

    </sect2>

  </sect1>

  <sect1 id="missing-data"><title>Missing data values</title>

    <para>These are represented internally as &minus;999.  In a
      native-format data file they should be represented as
      <literal>NA</literal>. When importing CSV data
      <application>gretl</application> accepts any of three
      representations of missing values: &minus;999, the string
      <literal>NA</literal>, or simply a blank cell.  Blank cells
      should, of course, be properly delimited, e.g.
      <literal>120.6,,5.38</literal>, in which the middle value is
      presumed missing.</para>

    <para>As for handling of missing values in the course of
      statistical analysis, <application>gretl</application> does the
      following:</para>

    <itemizedlist>
      <listitem><para>In calculating descriptive statistics (mean,
	  standard deviation, etc.) under the
	  <command>summary</command> command, missing values are
	  simply skipped and the sample size adjusted
	  appropriately.</para></listitem>
      <listitem><para>In running regressions
	  <application>gretl</application> first adjusts the beginning
	  and end of the sample range, truncating the sample if need
	  be.  Missing values at the beginning of the sample are
	  common in time series work due to the inclusion of lags,
	  first differences and so on; missing values at the end of
	  the range are not uncommon due to differential updating of
	  series and possibly the inclusion of
	  leads.</para></listitem>  
      <listitem><para>If <application>gretl</application> detects any
	  missing values <quote>inside</quote> the (possibly
	  truncated) sample range for a regression it gives an error
	  message and refuses to produce estimates.</para></listitem>
    </itemizedlist>

    <para>Missing values in the middle of a data set are a problem. In
      a cross-sectional data set it may be possible to move the
      offending observations to the beginning or the end of the file,
      but obviously this won't do with time series data.  For those
      who know what they are doing (!), the
      <command>misszero</command> function is provided under the
      <command>genr</command> command.  By doing
    </para> 

    <para><command>genr foo = misszero(bar)</command>
    </para>

    <para>you can produce a series <command>foo</command> which is
      identical to <command>bar</command> except that any &minus;999
      values become zeros.  Then you can use carefully constructed
      dummy variables to, in effect, drop the missing observations
      from the regression while retaining the surrounding sample
      range.<footnote><para><command>genr</command> also offers the
	  inverse function to <command>misszero</command>, namely
	  <command>zeromiss</command>, which replaces zeros in a given
	  series with the missing observation code.</para>
      </footnote></para>

  </sect1>


  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
sgml-default-dtd-file:"../manual.ced"
mode: xml
sgml-parent-document:("../manual.xml" "book" "chapter")
End:
-->


