<appendix id="app-datafile"><title>Data file details</title>

    <sect1 id="native"><title>Basic native format</title>

      <para>In <application>gretl</application>'s native data format,
	a data set is represented by two files.  One contains the
	actual data and the other information on how the data should
	be read.  To be more specific:</para>

      <orderedlist>
  
	<listitem><para><emphasis>Actual data</emphasis>: A
	    rectangular matrix of white-space separated numbers.  Each
	    column represents a variable, each row an observation on
	    each of the variables (spreadsheet style). Data columns
	    can be separated by spaces or tabs. The filename should
	    have the suffix <filename>.gdt</filename>.  By default the
	    data file is ASCII (plain text).  Optionally it can be
	    gzip-compressed to save disk space. You can insert
	    comments into a data file: if a line begins with the hash
	    mark (<literal>#</literal>) the entire line is
	    ignored. This is consistent with gnuplot and octave data
	    files.</para></listitem>

	<listitem><para><emphasis>Header</emphasis>: The data file
	    must be accompanied by a header file which has the same
	    basename as the data file plus the suffix
	    <filename>.hdr</filename>.  This file contains, in
	    order:</para>

	  <itemizedlist mark="dash">
	    <listitem><para>(Optional) <emphasis>comments</emphasis>
		on the data, set off by the opening string
		<literal>(*</literal> and the closing string
		<literal>*)</literal>, each of these strings to occur
		on lines by themselves.</para></listitem>
	    <listitem><para>(Required) list of white-space separated
		<emphasis>names of the variables</emphasis> in the
		data file. Names are limited to 8 characters, must
		start with a letter, and are limited to alphanumeric
		characters plus the underscore.  The list may continue
		over more than one line; it is terminated with a
		semicolon, <literal>;</literal>.</para></listitem>
	    <listitem><para>(Required) <emphasis>observations</emphasis> line of
		the form <literal>1 1 85</literal>.  The first element
		gives the data frequency (1 for undated or annual
		data, 4 for quarterly, 12 for monthly).  The second
		and third elements give the starting and ending
		observations. Generally these will be 1 and the number
		of observations respectively, for undated data.  For
		time-series data one can use dates of the form
		<command>1959.1</command> (quarterly, one digit after
		the point) or <command>1967.03</command> (monthly, two
		digits after the point). See <xref linkend="panel"/> below
		for special use of this line in the case of panel
		data.</para></listitem>
	    <listitem><para>The keyword
		<literal>BYOBS</literal>.</para></listitem> 
	  </itemizedlist>
	</listitem>   
      </orderedlist> 

      <para>Here is an example of a well-formed data header file.

	<programlisting> 
	  (* 
	  DATA9-6: 
	  Data on log(money), log(income) and interest rate from US. 
	  Source: Stock and Watson (1993) Econometrica 
	  (unsmoothed data) Period is 1900-1989 (annual data). 
	  Data compiled by Graham Elliott. 
	  *) 
	  lmoney lincome intrate ; 
	  1 1900 1989 BYOBS</programlisting>

	The corresponding data file contains three columns of data, each
	having 90 entries.</para>

    </sect1>

    <sect1 id="extensions"><title>Extensions to the basic data
	format</title>

      <para>
	The options available in <application>gretl</application> data
	files are broader than the setup just described, in three
	ways:
      </para>

      <orderedlist>
	<listitem><para>If the <literal>BYOBS</literal> keyword is
	    replaced by <literal>BYVAR</literal>, and followed by the
	    keyword <literal>BINARY</literal>, this indicates that the
	    corresponding data file is in binary format.  Such data
	    files can be written from
	    <application>gretlcli</application> using the
	    <command>store</command> command with the
	    <command>-s</command> flag (single precision) or the
	    <command>-o</command> flag (double
	    precision).</para></listitem>
	
	<listitem><para>If <literal>BYOBS</literal> is followed by the
	    keyword <literal>MARKERS</literal>,
	    <application>gretl</application> expects a data file in
	    which the <emphasis>first column</emphasis> contains strings (8
	    characters maximum) used to identify the observations.
	    This may be handy in the case of cross-sectional data
	    where the units of observation are identifiable:
	    countries, states, cities or whatever.  It can also be
	    useful for irregular time series data, such as daily stock
	    price data where some days are not trading days &mdash; in
	    this case the observations can be marked with a date
	    string such as <command>10/01/98</command>.  (Remember the
	    8-character maximum.)  Note that <command>BINARY</command> and
	    <command>MARKERS</command> are mutually exclusive flags. Also note
	    that the <quote>markers</quote> are not considered to be a
	    variable: this column does not have a corresponding entry
	    in the list of variable names in the header
	    file.</para></listitem>

	<listitem><para>If a file with the same base name as the data
	    file and header files, but with the suffix
	    <filename>.lbl</filename>, is found, this is read to fill
	    out the descriptive labels for the data series. The format
	    of the (plain text) label file is simple: each line
	    contains the name of one variable (as found in the header
	    file), followed by one or more spaces, followed by the
	    descriptive label. Here is an example: 

	    <literal>price  New car price index, 1982 base year</literal>

	    A label file of this sort is created automatically when
	    you save data from <application>gretl</application>, if
	    there is any descriptive information to be saved.  Such
	    information can be added under the <quote>Variable, Edit
	      label</quote> menu item.
	  </para>
	</listitem>
      </orderedlist>

    </sect1>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
sgml-default-dtd-file:"../manual.ced"
mode: sgml
sgml-parent-document:("../manual.xml" "book" "chapter")
End:
-->