<appendix id="app-datafile"><title>Data file details</title>

  <sect1 id="native"><title>Basic native format</title>

    <para>In <application>gretl</application>'s native data format, a
      data set is stored in XML (extensible mark-up language). Data
      files correspond to the simple DTD (document type definition)
      given in <filename>gretldata.dtd</filename>, which is supplied
      with the <application>gretl</application> distribution and is
      installed in the system data directory (e.g.
      <filename>/usr/share/gretl/data</filename> on Linux.) Data files
      may be plain text or gzipped.  They contain the actual data
      values plus additional information such as the names and
      descriptions of variables, the frequency of the data, and so
      on.</para>

    <para>Most users will probably not have need to read or write such
      files other than via <application>gretl</application> itself,
      but if you want to manipulate them using other software tools
      you should examine the DTD and also take a look at a few of the
      supplied practice data files: <filename>data4-1.gdt</filename>
      gives a simple example; <filename>data4-10.gdt</filename> is an
      example where observation labels are included.</para>

  </sect1>

  <sect1 id="traddata"><title>Traditional ESL format</title>
     
    <para>For backward compatibility, <application>gretl</application>
      can also handle data files in the <quote>traditional</quote>
      format inherited from Ramanathan's
      <application>ESL</application> program.  In this format (which
      was the default in <application>gretl</application> prior to
      version 0.98) a data set is represented by two files.  One
      contains the actual data and the other information on how the
      data should be read.  To be more specific:</para>

    <orderedlist>
  
      <listitem><para><emphasis>Actual data</emphasis>: A rectangular
	  matrix of white-space separated numbers.  Each column
	  represents a variable, each row an observation on each of
	  the variables (spreadsheet style). Data columns can be
	  separated by spaces or tabs. The filename should have the
	  suffix <filename>.gdt</filename>.  By default the data file
	  is ASCII (plain text).  Optionally it can be gzip-compressed
	  to save disk space. You can insert comments into a data
	  file: if a line begins with the hash mark
	  (<literal>#</literal>) the entire line is ignored. This is
	  consistent with gnuplot and octave data
	  files.</para></listitem>

      <listitem><para><emphasis>Header</emphasis>: The data file must
	  be accompanied by a header file which has the same basename
	  as the data file plus the suffix <filename>.hdr</filename>.
	  This file contains, in order:</para>

	<itemizedlist mark="dash">
	  <listitem><para>(Optional) <emphasis>comments</emphasis> on
	      the data, set off by the opening string
	      <literal>(*</literal> and the closing string
	      <literal>*)</literal>, each of these strings to occur on
	      lines by themselves.</para></listitem>
	  <listitem><para>(Required) list of white-space separated
	      <emphasis>names of the variables</emphasis> in the data
	      file. Names are limited to 8 characters, must start with
	      a letter, and are limited to alphanumeric characters
	      plus the underscore.  The list may continue over more
	      than one line; it is terminated with a semicolon,
	      <literal>;</literal>.</para></listitem>
	  <listitem><para>(Required) <emphasis>observations</emphasis>
	      line of the form <literal>1 1 85</literal>.  The first
	      element gives the data frequency (1 for undated or
	      annual data, 4 for quarterly, 12 for monthly).  The
	      second and third elements give the starting and ending
	      observations. Generally these will be 1 and the number
	      of observations respectively, for undated data.  For
	      time-series data one can use dates of the form
	      <command>1959.1</command> (quarterly, one digit after
	      the point) or <command>1967.03</command> (monthly, two
	      digits after the point). See <xref linkend="chap-panel"/> for
	      special use of this line in the case of panel
	      data.</para></listitem>
	  <listitem><para>The keyword
	      <literal>BYOBS</literal>.</para></listitem> 
	</itemizedlist>
      </listitem>   
    </orderedlist> 

    <para>Here is an example of a well-formed data header file.

	<programlisting> 
	  (* 
	  DATA9-6: 
	  Data on log(money), log(income) and interest rate from US. 
	  Source: Stock and Watson (1993) Econometrica 
	  (unsmoothed data) Period is 1900-1989 (annual data). 
	  Data compiled by Graham Elliott. 
	  *) 
	  lmoney lincome intrate ; 
	  1 1900 1989 BYOBS</programlisting> The corresponding data
      file contains three columns of data, each having 90
      entries.</para>

    <para>
      Three further features of the <quote>traditional</quote> data
      format may be noted.
    </para>

    <orderedlist>
      <listitem><para>If the <literal>BYOBS</literal> keyword is
	  replaced by <literal>BYVAR</literal>, and followed by the
	  keyword <literal>BINARY</literal>, this indicates that the
	  corresponding data file is in binary format.  Such data
	  files can be written from
	  <application>gretlcli</application> using the
	  <command>store</command> command with the
	  <command>-s</command> flag (single precision) or the
	  <command>-o</command> flag (double
	  precision).</para></listitem>
	
      <listitem><para>If <literal>BYOBS</literal> is followed by the
	  keyword <literal>MARKERS</literal>,
	  <application>gretl</application> expects a data file in
	  which the <emphasis>first column</emphasis> contains strings
	  (8 characters maximum) used to identify the observations.
	  This may be handy in the case of cross-sectional data where
	  the units of observation are identifiable: countries,
	  states, cities or whatever.  It can also be useful for
	  irregular time series data, such as daily stock price data
	  where some days are not trading days &mdash; in this case
	  the observations can be marked with a date string such as
	  <command>10/01/98</command>.  (Remember the 8-character
	  maximum.)  Note that <command>BINARY</command> and
	  <command>MARKERS</command> are mutually exclusive flags.
	  Also note that the <quote>markers</quote> are not considered
	  to be a variable: this column does not have a corresponding
	  entry in the list of variable names in the header
	  file.</para></listitem>

      <listitem><para>If a file with the same base name as the data
	  file and header files, but with the suffix
	  <filename>.lbl</filename>, is found, it is read to fill out
	  the descriptive labels for the data series. The format of
	  the label file is simple: each line contains the name of one
	  variable (as found in the header file), followed by one or
	  more spaces, followed by the descriptive label. Here is an
	  example: <literal>price  New car price index, 1982 base
	    year</literal>

	</para>
      </listitem>
    </orderedlist>

    <para>If you want to save data in traditional format, use the
      <command>-t</command> flag with the <command>store</command>
      command, either in the command-line program or in the console
      window of the GUI program.</para>

  </sect1>

  <sect1 id="dbdetails"><title>Binary database details</title>

    <para>A <application>gretl</application> database consists of two
      parts: an ASCII index file (with filename suffix
      <filename>.idx</filename>) containing information on the series,
      and a binary file (suffix <filename>.bin</filename>) containing
      the actual data.  Two examples of the format for an entry in the
      <filename>idx</filename> file are shown below:</para>

    <programlisting>
      G0M910  Composite index of 11 leading indicators (1987=100) 
      M 1948.01 - 1995.11  n = 575
      currbal Balance of Payments: Balance on Current Account; SA 
      Q 1960.1 - 1999.4 n = 160</programlisting>
  
    <para>The first field is the series name.  The second is a
      description of the series (maximum 128 characters).  On the
      second line the first field is a frequency code:
      <literal>M</literal> for monthly, <literal>Q</literal> for
      quarterly, <literal>A</literal> for annual, <literal>B</literal>
      for business-daily (daily with five days per week) and
      <literal>D</literal> for daily (seven days per week).  No other
      frequencies are accepted at present.  Then comes the starting
      date (N.B. with two digits following the point for monthly data,
      one for quarterly data, none for annual), a space, a hyphen,
      another space, the ending date, the string <quote><literal>n =
	</literal></quote> and the integer number of observations. In
      the case of daily data the starting and ending dates should be
      given in the form <literal>YYYY/MM/DD</literal>. This format
      must be respected exactly.</para>

    <para>Optionally, the first line of the index file may contain a
      short comment (up to 64 characters) on the source and nature of
      the data, following a hash mark.  For example:</para>

    <programlisting>
      # Federal Reserve Board (interest rates)</programlisting>

    <para>The corresponding binary database file holds the data
      values, represented as <quote>floats</quote>, that is,
      single-precision floating-point numbers, typically taking four
      bytes apiece.  The numbers are packed <quote>by
	variable</quote>, so that the first <emphasis>n</emphasis>
      numbers are the observations of variable 1, the next
      <emphasis>m</emphasis> the observations on variable 2, and so
      on.</para>

  </sect1>

</appendix>

  <appendix id="app-technote"><title>Technical notes</title>

  <para>
    <application>Gretl</application> is written in the C programming
    language.  I have abided as far as possible by the ISO/ANSI C
    Standard (C89), although the graphical user interface and some
    other components necessarily make use of platform-specific
    extensions.
  </para>

  <para>
    <application>gretl</application> is being developed under Linux.
    The shared library and command-line client should compile and run
    on any platform that (a) supports ISO/ANSI C and (b) has the zlib
    (compression) and libxml (XML manipulation) libraries installed.
    The homepage for zlib can be found at <ulink
      url="http://www.info-zip.org/pub/infozip/zlib/">info-zip.org</ulink>. 
    Libxml is at <ulink url="http:/xmlsoft.org/">xmlsoft.org</ulink>.
    If the GNU readline library is found on the host system this will
    be used for <application>gretcli</application>, providing a much
    enhanced editable command line. See the <ulink
      url="http://cnswww.cns.cwru.edu/~chet/readline/rltop.html">readline 
      homepage</ulink>.
  </para>

  <para>The graphical client program should compile and run on any
    system that, in addition to the above requirements, offers GTK
    version 1.2.3 or higher (see <ulink
      url="http://www.gtk.org/">gtk.org</ulink>).  As of this writing
    there are two main variants of the GTK libraries: the 1.2 series
    and the 2.0 series which was launched in summer 2002.  These
    variants are mutually incompatible.
    <application>gretl</application> can be built using either one
    &mdash; the source code package includes two sub-directories,
    <filename>gui</filename> for GTK 1.2 and <filename>gui2</filename>
    for GTK 2.0.  I recommend use of GTK 2.0 if it is available, since
    it offers many enhancements over GTK 1.2.
  </para>

  <para>
    <application>gretl</application> calls gnuplot for graphing. You
    can find gnuplot at <ulink
      url="http://www.gnuplot.info/">gnuplot.info</ulink>.  As of this
    writing the most recent official release is 3.7.3 (of December,
    2002).  If you are comfortable compiling source code I would
    recommend installing gnuplot 3.8j0 or higher (source package
    available from <ulink
      url="http://sourceforge.net/projects/gnuplot/">sourceforge.net/projects/gnuplot</ulink>.
    The MS Windows version of <application>gretl</application> comes
    with a Windows version gnuplot 3.8j0; the gretl website also
    offers an rpm of gnuplot 3.8j0 for x86 Linux systems.
  </para>

  <para>
    Some features of <application>gretl</application> make use of
    Adrian Feguin's <application>gtkextra</application> library. You
    can find gtkextra at <ulink
      url="http://gtkextra.sourceforge.net/">gtkextra.sourceforge.net</ulink>. 
    Unfortunately, it seems that <application>gtkextra</application>
    is no longer being maintained.  The relevant parts of this package
    are included (in slightly modified form) with the
    <application>gretl</application> source distribution.
  </para>

  <para>
    A binary version of the program is available for the Microsoft
    Windows platform (32-bit version, i.e. Windows 95 or higher). This
    version was cross-compiled under Linux using mingw (the GNU C
    compiler, <application>gcc</application>, ported for use with
    win32) and linked against the Microsoft C library,
    <filename>msvcrt.dll</filename>.  It uses Tor Lillqvist's port of
    GTK 2.0 to win32. The (free, open-source) Windows installer
    program is courtesy of Jordan Russell (<ulink
      url="http://www.jrsoftware.org/">jrsoftware.org</ulink>).
  </para>

  <para>I'm hopeful that some users with coding skills may consider
    <application>gretl</application> sufficiently interesting to be
    worth improving and extending.  The documentation of the libgretl
    API is by no means complete, but you can find some details by
    following the link <quote>Libgretl API docs</quote> on the
    <application>gretl</application> homepage.
  </para>

  </appendix>

  <appendix id="app-accuracy"><title>Numerical accuracy</title>

  <para><application>gretl</application> uses double-precision
    arithmetic throughout &mdash; except for the multiple-precision
    plugin invoked by the menu item <quote>Model/High precision
      OLS</quote> which represents floating-point values using a
    number of bits given by the environment variable
    <varname>GRETL_MP_BITS</varname> (default value 256).  The normal
    equations of Least Squares are by default solved via Cholesky
    decomposition, which is accurate enough for most purposes (with
    the option of using QR decomposition instead).  The program has
    been tested rather thoroughly on the statistical reference
    datasets provided by NIST (the U.S. National Institute of
    Standards and Technology) and a full account of the results may be
    found on the gretl website (follow the link <quote>Numerical
      accuracy</quote>).</para>

  <para>In October 2002 I had a useful exchange with Giovanni Baoicchi
    and Walter Distaso, who were writing a review of
    <application>gretl</application> for the <citetitle>Journal of
      Applied Econonetrics</citetitle>, and James MacKinnon, software
    review editor for the journal.<footnote><para>This review has
    since been published; see Baoicchi and Distaso (2003).</para>
    </footnote> and I am grateful to Baoicchi and
    Disasto for their careful examination of the program, which
    prompted the following modifications.</para>

  <orderedlist>

    <listitem><para>The reviewers pointed out that there was a bug in
	<application>gretl</application>'s <quote>p-value
	  finder</quote>, whereby the program printed the complement
	of the correct probability for negative values of
	<emphasis>z</emphasis>.  This was fixed in version 0.998 of
	the program (released July 9, 2002).</para></listitem>

    <listitem><para>They also noted that the p-value finder produced
	inaccurate results for extreme values of
	<emphasis>x</emphasis> (e.g. values of around 8 to 10 in the
	<emphasis>t</emphasis> distribution with 100 degrees of
	freedom).  This too was fixed in
	<application>gretl</application> version 0.998, with a switch
	to more accurate probability distribution code.</para>
    </listitem>

    <listitem><para>The reviewers noted a flaw in the presentation of
	regression coefficients in <application>gretl</application>,
	whereby some coefficients could be printed to an unacceptably
	small number of significant figures. This was fixed in version
	0.999 (released August 25, 2002): now all the statistics
	associated with a regression are printed to 6 significant
	figures.</para>
    </listitem>

    <listitem><para>It transpired from the reviewer's tests that the
	numerical accuracy of <application>gretl</application> on MS
	Windows was less than on Linux, where I had done my testing.
	For example, on the Longley data &mdash; a well-known
	<quote>ill-conditioned</quote> dataset often used for testing
	econometrics programs &mdash; the Windows version of gretl was
	getting some coefficients wrong at the 7th digit while the
	same coefficients were correct on Linux.  This anomaly was
	fixed in <application>gretl</application> version 1.0pre3
	(released October 10, 2002).</para>
    </listitem>

  </orderedlist>

  <para>The current version of the <application>gretl</application>
    source code package contains a <filename>tests</filename>
    subdirectory, with a test suite based on the NIST datasets.  This
    is invoked if you do <command>make check</command> in the top
    source directory.  You are warned if the numerical accuracy falls
    short of standard.  Please consult the file
    <filename>README</filename> in the <filename>tests</filename>
    directory for details.</para>

  <para>The NIST test suite is also distributed with the MS Windows
    version of <application>gretl</application>.  You can run the
    tests by invoking the program
    <filename>nisttest.exe</filename>.</para> 

  <para>As mentioned above, all regression statistics are printed to 6
    significant figures in the current version of
    <application>gretl</application> (except when the
    multiple-precision plugin is used, then results are given to 12
    figures).  If you want to examine a particular value more closely,
    first save it (see <xref linkend="cmd-genr"/>) then print it using 
    <command>print -t</command> (see <xref linkend="cmdref"/>).  This
    will show the value to 10 digits.</para>

</appendix>

    <appendix id="app-advanced"><title>Advanced econometric analysis
    with free software</title>

  <para>As mentioned in the main text,
    <application>gretl</application> offers a reasonably full
    selection of least-squares based estimators, plus a few additional
    estimators such as (binomial) logit and probit and Least Absolute
    Deviations. Advanced users may, however, find
    <application>gretl</application>'s menu of statistical routines
    restrictive.</para>

  <para>No doubt some advanced users will prefer to write their own
    statistical code in a fundamental computer language such as C, C++
    or Fortran.  Another option is to use a relatively high-level
    language that offers easy matrix manipulation and that already has
    numerous statistical routines built in, or available as add-on
    packages. If the latter option sounds attractive, and you are
    interested in using free, open source software, I would recommend
    taking a look at either GNU R (<ulink
      url="http://www.r-project.org/">r-project.org</ulink>) or
    (<ulink url="http://www.octave.org/">GNU Octave</ulink>). These
    programs are very close to the commercial programs S and Matlab
    respectively. 
  </para>

  <para>
    Also as mentioned above, <application>gretl</application> offers
    the facility of exporting data in the formats of both Octave and
    R.  In the case of Octave, the <application>gretl</application>
    data set is saved thus: the first variable listed for export is
    treated as the dependent variable and is saved as a vector,
    <varname>y</varname>, while the remaining variables are saved
    jointly as a matrix, <varname>X</varname>. You can pull the
    <varname>X</varname> matrix apart if you wish, once the data are
    loaded in Octave. See the Octave manual for details. As for R, the
    exported data file preserves any time series structure that is
    apparent to <application>gretl</application>. The series are saved
    as individual structures. The data should be brought into R using
    the <command>source()</command> command.
  </para>

  <para>
    Of these two programs, R is perhaps more likely to be of immediate
    interest to econometricians since it offers more in the way of
    statistical routines (e.g. generalized linear models, maximum
    likelihood estimation, time series methods). I have therefore
    supplied <application>gretl</application> with a convenience
    function for moving data quickly into R. Under
    <application>gretl</application>'s Session menu, you will find the
    entry <quote>Start GNU R</quote>.  This writes out an R version of
    the current <application>gretl</application> data set
    (<filename>Rdata.tmp</filename>, in the user's gretl directory),
    and sources it into a new R session. A few details on this follow.
  </para>

  <para>
    First, the data are brought into R by writing a temporary version
    of <filename>.Rprofile</filename> in the current working
    directory.  (If such a file exists it is referenced by R at
    startup.)  In case you already have a personal
    <filename>.Rprofile</filename> in place, the original file is
    temporarily moved to <filename>.Rprofile.gretltmp</filename>, and
    on exit from <application>gretl</application> it is restored.  (If
    anyone can suggest a cleaner way of doing this I'd be happy to
    hear of it.)
  </para>

  <para>
    Second, the particular way R is invoked depends on the internal
    <application>gretl</application> variable
    <varname>Rcommand</varname>, whose value may be set under the
    File, Preferences menu.  The default command is
    <command>RGui.exe</command> under MS Windows. Under X it is either
    <command>R --gui=gnome</command> if an installation of the Gnome
    desktop (<ulink url="http://www.gnome.org/">gnome.org</ulink>) was
    detected at compile time, or <command>xterm -e R</command> if
    Gnome was not found. Please note that at most three
    space-separated elements in this command string will be processed;
    any extra elements are ignored.
  </para>

  </appendix>


  <appendix id="app-urls"><title>Listing of URLs</title>

  <para>Below is a listing of the full URLs of websites mentioned in
    the text.</para>

  <variablelist>

    <varlistentry><term>Census Bureau, Data Extraction Service</term>
      <listitem><para><ulink
	    url="http://www.census.gov/ftp/pub/DES/www/welcome.html">
	    <literal>http://www.census.gov/ftp/pub/DES/www/welcome.html</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Estima (RATS)</term>
      <listitem><para><ulink url="http://www.estima.com/">
	    <literal>http://www.estima.com/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Gnome desktop homepage</term>
      <listitem><para><ulink url="http://www.gnome.org/">
	    <literal>http://www.gnome.org/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>GNU Multiple Precision (GMP) library</term>
      <listitem><para><ulink url="http://swox.com/gmp/">
	    <literal>http://swox.com/gmp/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>GNU Octave homepage</term>
      <listitem><para><ulink url="http://www.octave.org/">
	    <literal>http://www.octave.org/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>GNU R homepage</term>
      <listitem><para><ulink url="http://www.r-project.org/">
	    <literal>http://www.r-project.org/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>GNU R manual</term>
      <listitem><para><ulink
	    url="http://cran.r-project.org/doc/manuals/R-intro.pdf">
	    <literal>http://cran.r-project.org/doc/manuals/R-intro.pdf</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Gnuplot homepage</term>
      <listitem><para><ulink url="http://www.gnuplot.info/">
	    <literal>http://www.gnuplot.info/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Gnuplot manual</term>
      <listitem><para><ulink
	    url="http://ricardo.ecn.wfu.edu/gnuplot.html">
	    <literal>http://ricardo.ecn.wfu.edu/gnuplot.html</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Gretl data page</term>
      <listitem><para><ulink
	    url="http://ricardo.ecn.wfu.edu/gretl/gretl_data.html">
	    <literal>http://ricardo.ecn.wfu.edu/gretl/gretl_data.html</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Gretl homepage</term>
      <listitem><para><ulink url="http://gretl.sourceforge.net/">
	    <literal>http://gretl.sourceforge.net/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>GTK+ homepage</term>
      <listitem><para><ulink url="http://www.gtk.org/">
	    <literal>http://www.gtk.org/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>GTK+ port for win32</term>
      <listitem><para><ulink
	    url="http://user.sgic.fi/~tml/gimp/win32/">
	    <literal>http://www.gimp.org/~tml/gimp/win32/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Gtkextra homepage</term>
      <listitem><para><ulink url="http://gtkextra.sourceforge.net/">
	    <literal>http://gtkextra.sourceforge.net/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>InfoZip homepage</term>
      <listitem><para><ulink
	    url="http://www.info-zip.org/pub/infozip/zlib/">
	    <literal>http://www.info-zip.org/pub/infozip/zlib/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>JRSoftware</term>
      <listitem><para><ulink url="http://www.jrsoftware.org/">
	    <literal>http://www.jrsoftware.org/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Mingw (gcc for win32) homepage</term>
      <listitem><para><ulink url="http://www.mingw.org/">
	    <literal>http://www.mingw.org/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Minpack</term>
      <listitem><para><ulink url="http://www.netlib.org/minpack/">
	    <literal>http://www.netlib.org/minpack/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Penn World Table</term>
      <listitem><para><ulink url="http://pwt.econ.upenn.edu/">
	    <literal>http://pwt.econ.upenn.edu/</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Readline homepage</term>
      <listitem><para><ulink
	    url="http://cnswww.cns.cwru.edu/~chet/readline/rltop.html"> 
	    <literal>http://cnswww.cns.cwru.edu/~chet/readline/rltop.html</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Readline manual</term>
      <listitem><para><ulink
	    url="http://cnswww.cns.cwru.edu/~chet/readline/readline.html"> 
	    <literal>http://cnswww.cns.cwru.edu/~chet/readline/readline.html</literal></ulink></para>
      </listitem>
    </varlistentry>

    <varlistentry><term>Xmlsoft  homepage</term>
      <listitem><para><ulink url="http://xmlsoft.org/">
	    <literal>http://xmlsoft.org/</literal></ulink></para>
      </listitem>
    </varlistentry>

  </variablelist>

  </appendix>

<!-- Keep this comment at the end of the file
Local variables:
sgml-default-dtd-file:"../manual.ced"
mode: xml
sgml-parent-document:("../manual.xml" "book" "chapter")
End:
-->

