set verbose off
clear
set assert stop

print "Start checking type-functions."

bundle b = _(y={1,2})
m = b.y

t = typeof(b)
assert(t == 5)
t = typeof(m)
assert(t == 3)
t = typeof(c)
assert(t == 0)

t = typeof(b.y)
assert(t == 3)
t = inbundle(b, "y")
assert(t == 3)

t = typeof(b.x)
assert(t == 0)
t = inbundle(b, "x")
assert(t == 0)

s = typename(b.y)
assert(s == "matrix")
s = typename(b.x)
assert(s == "null")

matrices M = array(1)
s = typestr(typeof(M))
assert(s == "array")
s = typestr(typeof(M[1]))
assert(s == "matrix")
s = typename(M)
assert(s == "matrices")
s = typename(M[1])
assert(s == "matrix")
# out of bounds value
t = typeof(M[2])
assert(t == 0)
s = typename(M[2])
assert(s == "null")

t = typeof(m*3)
assert(t == 3)
s = typename(m*3)
assert(s == "matrix")
t = typeof("foo")
assert(t == 4)
t = typeof(foo)
assert(t == 0)

arrays A = array(2)
strings A[1] = defarray("foo", "bar")
s = typename(A)
assert(s == "arrays")
s = typename(A[1])
assert(s == "strings")
s = typename(A[7])
assert(s == "null")
s = typename(A[1][1])
assert(s == "string")

delete A
matrix A = {1, 2}
loop i=1..nelem(A)
    string actual = typename(A[i])
    string expected = "matrix"
    assert(actual == expected)

    # Now assign a scalar
    scalar ai = A[i]
    string actual = typename(ai)
    string expected = "scalar"
    assert(actual == expected)
endloop

print "Successfully finished tests."
