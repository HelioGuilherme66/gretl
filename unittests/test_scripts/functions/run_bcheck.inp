clear
set verbose off
set assert stop


bundles Params = null
Params = Params + _(mat = I(4), x = 0.75, str = "dog days", expected = FALSE)
Params = Params + _(mat = I(4), x = 0.75, expected = FALSE)
Params = Params + _(mat = I(4), x = 0.75, str = "hoopla", extra = 13,\
                    expected = 2)
Params = Params + _(mat = I(4), x = "egg", expected = 3)

bundle TEMPLATE = _(mat=I(3), x=0.45, str="happy days")

function void test_bcheck (const bundle template, bundles P)
    print "Start testing bcheck()."

    loop foreach i P
        # Given
        scalar expected = P[i].expected
        printf "i=%d, expected=%d\n", i, expected
        delete P[i].expected --force
        bundle btmp = template

        # When
        actual = bcheck(&template, P[i])

        # Then
        assert(actual == expected)
    endloop
end function
test_bcheck(TEMPLATE, Params)


function void test_bcheck_bounds (void)
    print "Start testing bcheck() with bounds."

    bundle TEMPLATE = _(x=5, y=1000, s=-1.3)
    TEMPLATE.bounds = _(x={0,10}, y={NA, NA}, s={NA, 2.1})

    # Integer with lower and upper bound
    bundle input = _(x = -1)
    scalar expected = TRUE
    scalar actual = bcheck(&TEMPLATE, input)
    assert(actual == expected)

    bundle input = _(x = 11)
    scalar expected = TRUE
    scalar actual = bcheck(&TEMPLATE, input)
    assert(actual == expected)

    # Scalar with upper bound
    bundle input = _(s = -1.3)
    scalar expected = FALSE
    scalar actual = bcheck(&TEMPLATE, input)
    assert(actual == expected)

    bundle input = _(s = 2.101)
    scalar expected = TRUE
    scalar actual = bcheck(&TEMPLATE, input)
    assert(actual == expected)

    # Integer with no bounds
    bundle input = _(y=300)
    scalar expected = FALSE
    eval bcheck(&TEMPLATE, input)

    bundle input = _(y=-300)
    scalar expected = FALSE
    eval bcheck(&TEMPLATE, input)

    # Integer with no bounds
    bundle input = _(x = -1, y=300, s=2.2)
    scalar expected = TRUE
    eval bcheck(&TEMPLATE, input)

    bundle input = _(x = 10, y=300, s=2.1)
    scalar expected = FALSE
    eval bcheck(&TEMPLATE, input)
end function
test_bcheck_bounds()





print "Successfully finished all tests"
quit
