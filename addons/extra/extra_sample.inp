# extra_sample.inp
# Sample script for the extra.gfn package

include extra.gfn --force
set verbose off

######## Examples for functions not needing a dataset ##########

print "---- eliminate -----"
eval eliminate(vec(I(3)))

print "---- duplicate -----"
eval duplicate(vech(I(3)))

print "---- nearPSD -----"
matrix mc = {1, -1.2; -1.2, 1}	# eigenvalues -0.2 and 2.2
eval nearPSD(&mc)
print mc

print "---- zeroifclose -----"
mc = {1, 1e-12}
eval zeroifclose(&mc, 1e-10)
print mc

print "---- drill -----"
matrix A = mshape(seq(1,9),3,3)
matrix B = A
matrices x = defarray(A, B)
eval drill(x, 2)			# one row
eval drill(x, , 1)			# one column
eval drill(x, 2, 1)			# one row & one column
eval drill(x, {1,3}, 2)		# multiple rows
eval drill(x, 2, {1,3})		# multiple columns


print "---- combinations -----"  ##
matrix bucket = {1, 3, 5, 6, 7}
eval combinations(bucket, 3)

print "---- qformvech -----"
matrix mtemp = mnormal(4,3)
matrix A = mtemp'mtemp
matrix X = mnormal(3,5)
print  " compare the columns:"
eval vech(qform(X',A)) ~ qformvech(X') * vech(A)

## end of matrix-related functions ##

print "---- scores2x2 -----"##
eval scores2x2({24, 4; 12, 9})

print "---- truncnorm -----"
m = 0.5
s = 1
matrix left  = truncnorm(20, m, s, NA, 1)
matrix right = truncnorm(20, m, s, -1, NA)
matrix both  = truncnorm(20, m, s, -1, 1)
print left right both


print "---- WSRcritical -----"
print "----------------------------------------"
print "Some examples for WSRcritical()"
loop N = 11..13 -q            # loop over n
  Wmax = N * (N + 1) / 2
  loop i = 3..4 -q        # loop over W
    printf "n = $N, Pr = %g\n", i/100
    printf "try exact:"
    eval WSRcritical(N, i/100)'
    printf "approx:"
    eval WSRcritical(N, i/100, 1)'
  endloop
endloop

print "---- WSRpvalue -----"
print "============================="
print "Some examples for WSRpvalue()"
loop N = 11..14 -q            # loop over n
  loop i = 6..7 -q        # loop over W
    printf "n=$N, W=$i\n"
    printf "try exact: %g, approx: %g\n", WSRpvalue(N, i), WSRpvalue(N, i, 1)
  endloop

  Wmax = N * (N + 1) / 2
  loop i = (Wmax - 7)..(Wmax - 6) -q
    printf "n=$N, W=$i\n"
    printf "try exact: %g, approx: %g\n", WSRpvalue(N, i), WSRpvalue(N, i, 1)
  endloop

endloop

print "---- powerset -----"
strings pp =  powerset(defarray("a", "b", "c", "x", "y", "z"))
loop i = 1..nelem(pp) -q
  eval pp[i]
endloop
print ""

print "---- onemode -----"
eval onemode({1,2,3,1,1,2})


print "---- splitfname -----"  ##
eval splitfname(sprintf("\\do\\.you\\believe.input"))

print "---- multi_instrings -----"  ##
strings AA = defarray("an","apple","and","an","egg")
strings BB = defarray("an","dog","egg")
eval multi_instrings(AA, BB)

print "---- mat2latex -----"  ##

open mroz87.gdt
summary 2 3 4 5 --simple
X = $result
eval mat2latex(X)
X[2,4] = NA
eval mat2latex(X, _(nacode="NA", decimals=1))

######## Examples that require a dataset ############

open denmark	# get some data

print "---- correspondence -----"  ##
x = $obsminor == 4
C = seasonals(1,1)
printf "correspondence(x, S4) = %d\n\n", correspondence(x, S4)

print "---- gap_filler -----"  #

nulldata 24
setobs 4 2010:1
smpl +2 -2
series x = normal()
x[10] = NA	# insert missing
series x1 = gap_filler(x, 1)
series x2 = gap_filler(x, 2)
smpl full
print x x1 x2 --byobs

print "---- winsor -----"  #
open denmark.gdt --quiet
series winDM = winsor(ldiff(LRM))
series winDM_asy = winsor(ldiff(LRM), 0.01, 0.8)
print  winDM_asy


print "---- fracorder -----"
open djclose.gdt --quiet	# need longer data here
matrix M = fracorder(ldiff(djclose), 20)
print  M

print "---- add_outofsample -----"
open denmark --quiet

smpl +3 -5


## plain ols single-equation
ols LRM const LRY(-2) LRM(-3) 
b = add_outofsample($model)
eval b.initY
eval b.futureY
eval b.futureX

## a VAR
var 2 LRM LRY IBO; IDE -q 

bundle b = add_outofsample($system)
eval b.initY
eval b.futureY
eval b.futureX

## a VECM 
vecm 2 1 LRM LRY IBO; IDE --rc -q

b = add_outofsample($system)
eval b.initY
eval b.futureY
eval b.futureX


## an explicit system 

system method=sur --quiet
    equation LRM const LRY(-2) LRM(-3)
    equation LRY const LRY(-1)
end system

b = add_outofsample($system)
eval b.initY
eval b.futureY
eval b.futureX

### end add_outofsample example ###
