# extra_string.inp for string-related functions

function strings powerset (strings S)
    # Computes the powerset of the input S,
    # i.e. all possible cominations of the
    # string elements in S. (Including the
    # empty set / empty string "".)
    # Each combination
    # yields one string in the output array.
    # Being a set, the ordering is not
    # defined.
    l = nelem(S)
    N = 2^l
    matrix P = zeros(N,l)
    matrix s = seq(0, N-1)'

    loop i=1..l --quiet
        matrix a = s % 2
        P[,i] = a
        s = (s - a) / 2
    endloop

    strings PS = array(N)

    loop i = 1..N --quiet
        string c = ""
        loop j = 1..l --quiet
            if P[i, j]
                c = c ~ " " ~ S[j]
            endif
        endloop
        PS[i] = c
    endloop

    return PS
end function

function strings splitfname (string fn)
    /* The idea is take a file name or full path and extract 
      up to 3 components:
    1. The "base" component of the file name, without the 
       extension and without the path 
    2. The file extension (without the dot; may be empty)
    3. The path prefix (may be empty; this is presumably not
       needed often on its own and thus put in last position)
	
    Example:
    Input string: "/what/on/earth/isthisfile.gdt"
	Output: 
    defarray("isthisfile", "gdt", "/what/on/earth")

    (To separate the path prefix we just look for the last / _OR_ 
     \ (forward or backward slash).)
    */
    print "Warning: This is still incomplete!" # FIXME
	# (also think of the possibility of //)

    string base = regsub(fn, "(.*)\.([^\.]*)", "\1") 
    string ext = fn + (strlen(base) + 1) 
    return defarray(base, ext) 
end function
