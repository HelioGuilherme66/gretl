set warnings off
set verbose off
set assert stop
clear

include "../extra.inp" --force
include assertion.gfn


function void test_splitfname (void)
  print "Start with splitfname()"

  strings S = splitfname("/what/on/earth/isthisfile.gdt")

  assert(nelem(S) == 3)

  assert(S[1] == "/what/on/earth")
  assert(S[2] == "isthisfile")
  assert(S[3] == "gdt")
end function
test_splitfname()


function void test_splitfname_spec_chars (void)
  print "Start with splitfname() + special chars"

  strings S = splitfname("../what/on_=65/earth/is_this-file.gdt")

  assert(nelem(S) == 3)

  assert(S[1] == "../what/on_=65/earth")
  assert(S[2] == "is_this-file")
  assert(S[3] == "gdt")
end function
test_splitfname_spec_chars()


function void test_splitfname_wo_file_ext (void)
  print "Start with splitfname() + special chars w/o file extension"

  strings S = splitfname("../what/on_=65/earth/is_this-file")

  assert(nelem(S) == 3)

  assert(S[1] == "../what/on_=65/earth")
  assert(S[2] == "is_this-file")
  assert(S[3] == "")

end function
test_splitfname_wo_file_ext()


function void test_splitfname_wo_dir_file_ext (void)
  print "Start with splitfname() + special chars w/o dir and file extension"

  strings S = splitfname("is_this-file=67?")

  assert(nelem(S) == 3)

  assert(S[1] == "")
  assert(S[2] == "is_this-file=67?")
  assert(S[3] == "")
end function
test_splitfname_wo_dir_file_ext()


function void test_splitfname_dir_file_ext (void)
  print "Start with splitfname() + special chars w/o filename and file extension"
  strings S = splitfname("../what/on_=65/earth/")

  assert(nelem(S) == 3)

  assert(S[1] == "../what/on_=65/earth")
  assert(S[2] == "")
  assert(S[3] == "")
end function
test_splitfname_dir_file_ext()


function void test_onemode (void)
  print "Start testing onemode()."

  matrix m = seq(1,5)
  assert(onemode(m) == 4)

  matrix m = seq(1,5) ~ NA
  assert(onemode(m) == 4)

  matrix m = {1, 2, 3, 2}
  assert(onemode(m) == 2)

  matrix m = {1, 2, 3, 2, 3}
  assert(onemode(m) == 3)     # Why 3? Expected?

  matrix m = {1, 3, 2, 3, 2}
  assert(onemode(m) == 2)     # Why 2? Expected?

  matrix m = {NA, NA}
  assert(sum(ok(onemode(m))) == 0)
end function


set seed 12345
function void test_truncnorm (void)
  print "Start testing truncnorm()."

  matrix m = truncnorm(5, 1, 5, 0.1, 1.5)

  assert_almost_equal_num(m[1], 0.69278, 1e-5)
  assert_almost_equal_num(m[2], 1.4910, 1e-4)
  assert_almost_equal_num(m[3], 0.13854, 1e-5)
  assert_almost_equal_num(m[4], 0.81192, 1e-5)
  assert_almost_equal_num(m[5], 0.54419, 1e-5)


  matrix m = truncnorm(5, 1, 5, NA, NA)

  assert_almost_equal_num(m[1], -6.4419, 1e-4)
  assert_almost_equal_num(m[2], 5.7794, 1e-4)
  assert_almost_equal_num(m[3], -4.5460, 1e-4)
  assert_almost_equal_num(m[4], -0.79578, 1e-5)
  assert_almost_equal_num(m[5], 5.4342, 1e-4)
end function
test_truncnorm()


clear
function void repeated_combinations (void)
  /* Bug reported on May 8th 2024 with Gretl 2024a for the
  combinations() function probably due to some failure
  related to the compilation of recursive functions. */

  scalar n = 10
  scalar k = 6
  scalar H = 1
  matrix c = seq(1, n)

  # First run works fine
  loop H
      x0 = combinations(c, k)
  endloop

  # Second run failed
  loop H
      x0 = combinations(c, k)
  endloop
end function
repeated_combinations()



printf "\nInfo: All tests passed.\n"
