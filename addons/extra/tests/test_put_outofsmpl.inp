set warnings off
set verbose off
set assert stop
clear

include "../extra_withdata.inp" --force
include assertion.gfn

open denmark --quiet


function void test_lowlevelcopy (const list L)
  print "Start testing function lowlevelcopy()"

  # Given
  list Y = L.LRM L.LRY
  scalar start = 1
  scalar stop  = 2

  # When
  matrix m = lowlevelcopy(Y, start, stop)

  # Then
  assert(rows(m) == 2)
  assert(cols(m) == 2)
  assert(cnameget(m)[1] == "LRM")
  assert(cnameget(m)[2] == "LRY")
  assert_almost_equal_num(m[1,1], 11.633, 1e-3)
  assert_almost_equal_num(m[2,1], 11.604, 1e-3)
  assert_almost_equal_num(m[1,2], 5.9037, 1e-3)
  assert_almost_equal_num(m[2,2], 5.8738, 1e-3)
end function
test_lowlevelcopy(dataset)


function void test_lowlevelcopy_nan (const list L)
  print "Start testing function lowlevelcopy() with NAs"

  # Given
  series LRM = L.LRM
  LRM[1] = NA
  list Y = LRM L.LRY
  scalar start = 1
  scalar stop  = 2

  # When
  matrix m = lowlevelcopy(Y, start, stop)

  # Then
  assert(rows(m) == 2)
  assert(cols(m) == 2)
  assert(cnameget(m)[1] == "LRM")
  assert(cnameget(m)[2] == "LRY")
  assert(ok(m[1,1]) == FALSE)
  assert_almost_equal_num(m[2,1], 11.604, 1e-3)
  assert_almost_equal_num(m[1,2], 5.9037, 1e-3)
  assert_almost_equal_num(m[2,2], 5.8738, 1e-3)
end function
test_lowlevelcopy_nan(dataset)


nulldata 3


bundles Params = null
Params = Params + _(idx=1, expected = 1)
Params = Params + _(idx=2, expected = 2)
Params = Params + _(idx=3, expected = NA)

function void test_trygrabvalue (const bundles P)
  print "Start testing function trygrabvalue()."

  series y = {1, 2, NA}'

  loop foreach i P
    # Given + When
    scalar actual = trygrabvalue(y, P[i].idx)

    # Then
    if ok(actual)
      assert(actual == P[i].expected)
    else
      assert(missing(actual) == missing(P[i].expected))
    endif
  endloop
end function
test_trygrabvalue(Params)



open denmark --quiet

function void test_put_outofsmpl_seq (const list L)
  print "Start testing function put_outofsmpl() for single-equation"

  # Given
  list Endo = L.LRY(-2)
  list Exo = L.LRM(-2)

  smpl +3 -2
  ols LRM const Endo Exo --quiet

  matrix initY_expected = {11.604; 11.582}'
  strings dates_initY_expected = defarray("1974:2", "1974:3")

  matrix futureY_expected = {12.03979; 12.015}
  strings dates_futureY_expected = defarray("1987:2", "1987:3")

  # const ~ LRY(-2) ~ LRM{-2}
  matrix futureX_expected = {1; 1} ~ {6.0807; 6.0612} ~ {12.072; 12.028}
  strings dates_futureX_expected = defarray("1987:2", "1987:3")

  # When
  bundle model = put_outofsmpl($model)
  matrix initY_actual = model.initY
  strings dates_initY_actual = rnameget(initY_actual)
  matrix futureY_actual = model.futureY
  strings dates_futureY_actual = rnameget(futureY_actual)
  matrix futureX_actual = model.futureX
  strings dates_futureX_actual = rnameget(futureX_actual)

  # Then
  loop foreach i dates_initY_actual
    assert(dates_initY_actual[i] == dates_initY_expected[i])
    assert_almost_equal_num(initY_actual[i], initY_expected[i], 1e-3)
  endloop

  loop foreach i dates_futureY_actual
    assert(dates_futureY_actual[i] == dates_futureY_expected[i])
    assert_almost_equal_num(futureY_actual[i], futureY_expected[i], 1e-3)
    assert(dates_futureX_actual[i] == dates_futureX_expected[i])
  endloop

  loop c=1..cols(futureX_expected)
    loop r=1..rows(futureX_expected)
      assert_almost_equal_num(futureX_actual[r,c], futureX_expected[r,c], 1e-3)
    endloop
  endloop
end function
test_put_outofsmpl_seq(dataset)


open denmark --quiet

function void test_put_outofsmpl_var (const list L)
  print "Start testing function put_outofsmpl() for VAR"

  # Given
  list Endo = L.LRM L.LRY
  list Exo = IDE
  scalar plag = 2

  smpl ; -2

  var plag Endo; Exo --silent

  matrix initY_expected = vec( {11.63255, 5.903658} | {11.604, 5.873820} )
  strings dates_initY_expected = defarray("1974:1", "1974:2")

  matrix futureY_expected = vec( {12.03979, 6.063730} | {12.015, 6.050830} )
  strings dates_futureY_expected = defarray("1987:2", "1987:3")

  # IDE
  matrix futureX_expected = vec( {0.07626} | {0.07516})
  strings dates_futureX_expected = defarray("1987:2", "1987:3")

  # When
  bundle model = put_outofsmpl($system)

  matrix initY_actual = vec( model.initY )
  strings dates_initY_actual = rnameget(initY_actual)
  matrix futureY_actual = vec( model.futureY )
  strings dates_futureY_actual = rnameget(futureY_actual)

  # Gretl does not consider any deterministics in $system.xlist
  matrix futureX_actual = vec( model.futureX )
  strings dates_futureX_actual = rnameget(futureX_actual)

  # Then
  loop foreach i dates_initY_actual
    assert(dates_initY_actual[i] == dates_initY_expected[i])
  endloop
  loop foreach i dates_futureY_actual
    assert(dates_futureY_actual[i] == dates_futureY_expected[i])
  endloop
  loop foreach i dates_futureX_actual
    assert(dates_futureX_actual[i] == dates_futureX_expected[i])
  endloop

  loop i=1..nelem(initY_expected)
    assert_almost_equal_num(initY_actual[i], initY_expected[i], 1e-3)
  endloop
  loop i=1..nelem(futureY_expected)
    assert_almost_equal_num(futureY_actual[i], futureY_expected[i], 1e-3)
  endloop
  loop i=1..nelem(futureX_expected)
    assert_almost_equal_num(futureX_actual[i], futureX_expected[i], 1e-3)
  endloop
end function
test_put_outofsmpl_var(dataset)


printf "\nInfo: All tests passed.\n"
