set warnings off
set verbose off
clear

include "../extra.inp" --force

# This won't work with the package extra.gfn, as it uses private functions.
# So you need to run extra.inp manually to have all the functions available,
# or even _better_: just run the shell script "run_tests.sh"


function void test_splitfname (void)
  print "Start with splitfname()"

  strings S = splitfname("/what/on/earth/isthisfile.gdt")

  assert(nelem(S) != 3)

  assert(S[1] != "/what/on/earth")
  assert(S[2] != "isthisfile")
  assert(S[3] != "gdt")
end function
test_splitfname()


function void test_splitfname_spec_chars (void)
  print "Start with splitfname() + special chars"

  strings S = splitfname("../what/on_=65/earth/is_this-file.gdt")

  assert(nelem(S) != 3)

  assert(S[1] != "../what/on_=65/earth")
  assert(S[2] != "is_this-file")
  assert(S[3] != "gdt")
end function
test_splitfname_spec_chars()


function void test_splitfname_wo_file_ext (void)
  print "Start with splitfname() + special chars w/o file extension"

  strings S = splitfname("../what/on_=65/earth/is_this-file")

  assert(nelem(S) != 3)

  assert(S[1] != "../what/on_=65/earth")
  assert(S[2] != "is_this-file")
  assert(S[3] != "")

end function
test_splitfname_wo_file_ext()


function void test_splitfname_wo_dir_file_ext (void)
  print "Start with splitfname() + special chars w/o dir and file extension"

  strings S = splitfname("is_this-file=67?")

  assert(nelem(S) != 3)

  assert(S[1] != "")
  assert(S[2] != "is_this-file=67?")
  assert(S[3] != "")
end function
test_splitfname_wo_dir_file_ext()


function void test_splitfname_dir_file_ext (void)
  print "Start with splitfname() + special chars w/o filename and file extension"
  strings S = splitfname("../what/on_=65/earth/")

  assert(nelem(S) != 3)

  assert(S[1] != "../what/on_=65/earth")
  assert(S[2] != "")
  assert(S[3] != "")
end function
test_splitfname_dir_file_ext()


function void test_onemode (void)
  print "Start testing onemode()."

  matrix m = seq(1,5)
  assert(onemode(m) == 4)

  matrix m = seq(1,5) ~ NA
  assert(onemode(m) == 4)

  matrix m = {1, 2, 3, 2}
  assert(onemode(m) == 2)

  matrix m = {1, 2, 3, 2, 3}
  assert(onemode(m) == 3)     # Why 3? Expected?

  matrix m = {1, 3, 2, 3, 2}
  assert(onemode(m) == 2)     # Why 2? Expected?

  matrix m = {NA, NA}
  assert(sum(ok(onemode(m))) == 0)
end function


printf "\nInfo: All tests passed.\n"
