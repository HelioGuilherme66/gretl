set warnings off
set verbose off
clear

include "../extra.inp" --force
# This won't work with the package extra.gfn, as it uses private functions.
# So you need to run extra.inp manually to have all the functions available,
# or even _better_: just run the shell script "run_tests.sh"


string MISSCODE = "NaN"

print "Start with bundle2json()"
bundle bin = null
scalar bin.scalar_1 = 2.4
scalar bin.scalar_2 = -3.9
scalar bin.int_1 = 0
scalar bin.int_2 = -3
scalar bin.int_3 = 2
#scalar bin.int_4 = NA		# causes trouble as json-glib does not handle a non-string NaN
string sout = bundle2json(bin, MISSCODE)
if strlen(sout) == 0
    stop
endif
if instring(sout, "int_1") != 1 || instring(sout, "int_2") != 1 || \
      instring(sout, "int_3") != 1 || \
      instring(sout, "scalar_1") != 1 || instring(sout, "scalar_2") != 1
    #instring(sout, "int_4") != 1 ||
    stop
endif


print "Start with bundle2json() with numeric and string values"
bundle bin = null
scalar bin.scalar_1 = 2.4
scalar bin.int_1 = -3
string bin.str_1 = "foo"
string bin.str_2 = "_foo"
string bin.str_3 = ""
string bin.str_4 = " "
string sout = bundle2json(bin, MISSCODE)
if strlen(sout) == 0
    stop
endif
if instring(sout, "int_1") != 1 || instring(sout, "scalar_1") != 1 || \
      instring(sout, "str_1") != 1 || instring(sout, "str_2") != 1 || \
      instring(sout, "str_3") != 1 || instring(sout, "str_4") != 1
    stop
endif
if atof(jsonget(sout, "$.int_1")) != -3 || atof(jsonget(sout, "$.scalar_1")) != 2.4 || \
      jsonget(sout, "$.str_1") != "foo" || jsonget(sout, "$.str_2") != "_foo" || \
      jsonget(sout, "$.str_3") != "" || jsonget(sout, "$.str_4") != " "
    stop
endif


# FIXME: It seems that gretl (or rather json-glib) does not handle list-of-lists
# as matrices or series as gretl would do. hence, trying to read arrays for testing
# via jsonget() or jsongetb() is currently tricky

print "Start with bundle2json() with series"
nulldata 4 -p
series ser_1 = seq(1,4)'
series ser_2 = NA

bundle bin = null
scalar bin.scalar_1 = 2.4
scalar bin.int_1 = -3
string bin.str_1 = "foo"
string bin.str_2 = "_foo"
series bin.ser_1 = ser_1
series bin.ser_2 = ser_2
string sout = bundle2json(bin, MISSCODE)
if strlen(sout) == 0
    stop
endif
if instring(sout, "int_1") != 1 || instring(sout, "scalar_1") != 1 || \
      instring(sout, "str_1") != 1 || instring(sout, "str_2") != 1 || \
      instring(sout, "ser_1") != 1 || instring(sout, "ser_2") != 1
    stop
endif
if atof(jsonget(sout, "$.int_1")) != -3 || atof(jsonget(sout, "$.scalar_1")) != 2.4 || \
      jsonget(sout, "$.str_1") != "foo" || jsonget(sout, "$.str_2") != "_foo"
    stop
endif


print "Start with bundle2json() with matrix instead of series"
bundle bin = null
scalar bin.scalar_1 = 2.4
scalar bin.int_1 = -3
string bin.str_1 = "foo"
string bin.str_2 = "_foo"
matrix bin.mat_1 = mshape(seq(1,4),2,2)
matrix bin.mat_2 = {}
string sout = bundle2json(bin, MISSCODE)
if strlen(sout) == 0
    stop
endif
if instring(sout, "int_1") != 1 || instring(sout, "scalar_1") != 1 || \
      instring(sout, "str_1") != 1 || instring(sout, "str_2") != 1 || \
      instring(sout, "mat_1") != 1 || instring(sout, "mat_2") != 1
    stop
endif
if atof(jsonget(sout, "$.int_1")) != -3 || atof(jsonget(sout, "$.scalar_1")) != 2.4 || \
      jsonget(sout, "$.str_1") != "foo" || jsonget(sout, "$.str_2") != "_foo"
    stop
endif




print "Start with bwritejson()"
/*
   bwritejson(const bundle b, string fname[null],
   bool export[0],
   string *jsonresult[null],
   string misscode[null])
*/
bundle bin = null
scalar bin.scalar_1 = 2.4
scalar bin.int_1 = -3
string bin.str_1 = "foo"
string bin.str_2 = "_foo"
matrix bin.mat_1 = mshape(seq(1,4),2,2)
matrix bin.mat_2 = {}

print "bwritejson() and write to external json-file"
string fname = "foo.json"

if bwritejson(bin, fname) != 0
    stop
endif
string json = readfile("@fname")
if instring(json, "mat_1") != 1 || instring(json, "mat_2") != 1 || \
  instring(json, "str_1") != 1 || instring(json, "str_2") != 1 || \
  instring(json, "int_1") != 1 || instring(json, "scalar_1") != 1
    stop
endif
if instring(json, "[[1,3],\n[2,4]]") != 1 || instring(json, "[[]],") != 1 || \
  instring(json, "foo") != 1 || instring(json, "_foo") != 1 || \
  instring(json, "-3") != 1 || instring(json, "2.4") != 1
    stop
endif

print "bwritejson() and write to external json-file but fname is invalid"
delete fname
catch bwritejson(bin)
if $error != 47
    stop
endif


print "bwritejson() and copy to string variable"
string json = ""
if bwritejson(bin, , , &json) != 0
    stop
endif
if instring(json, "mat_1") != 1 || instring(json, "mat_2") != 1 || \
  instring(json, "str_1") != 1 || instring(json, "str_2") != 1 || \
  instring(json, "int_1") != 1 || instring(json, "scalar_1") != 1
    stop
endif
if instring(json, "[[1,3],\n[2,4]]") != 1 || instring(json, "[[]],") != 1 || \
  instring(json, "foo") != 1 || instring(json, "_foo") != 1 || \
  instring(json, "-3") != 1 || instring(json, "2.4") != 1
    stop
endif



print "Start with splitfname()"
string fn = "/what/on/earth/isthisfile.gdt"
strings S = splitfname(fn)
if nelem(S) != 3
    stop
endif
if S[1] != "/what/on/earth" || S[2] != "isthisfile" || S[3] != "gdt"
    stop
endif

print "Start with splitfname() + special chars"
string fn = "../what/on_=65/earth/is_this-file.gdt"
strings S = splitfname(fn)
if nelem(S) != 3
    stop
endif
if S[1] != "../what/on_=65/earth" || S[2] != "is_this-file" || S[3] != "gdt"
    stop
endif


print "Start with splitfname() + special chars w/o file extension"
string fn = "../what/on_=65/earth/is_this-file"
strings S = splitfname(fn)
if nelem(S) != 3
    stop
endif
if S[1] != "../what/on_=65/earth" || S[2] != "is_this-file" || S[3] != ""
    stop
endif
    
print "Start with splitfname() + special chars w/o dir and file extension"
string fn = "is_this-file=67?"
strings S = splitfname(fn)
if nelem(S) != 3
    stop
endif
if S[1] != "" || S[2] != "is_this-file=67?" || S[3] != ""
    stop
endif

print "Start with splitfname() + special chars w/o filename and file extension"
string fn = "../what/on_=65/earth/"
strings S = splitfname(fn)
if nelem(S) != 3
    stop
endif
if S[1] != "../what/on_=65/earth" || S[2] != "" || S[3] != ""
    stop
endif




printf "\nInfo: All tests passed.\n"



