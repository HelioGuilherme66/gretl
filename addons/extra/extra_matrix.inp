# extra_matrix.inp for matrix-related functions

function scalar nearPSD (matrix *m,
                         scalar epsilon[0::0])
    # TODO: cover the case with some variances == 0
    # (use misszero() after scaling, or something)
    #
    # Forces the matrix m into the positive semi-definite region.
    #
    # Ported from "DomPazz" in Stackoverflow, apparently
    # mimicking the nearPD() function in R.
    # Because of re-scaling ( to correlation matrix ), the
    # epsilon should implicitly apply to the correlation-based
    # eigenvalues.
    #
    # The return value 0 or 1 indicates whether m was altered or not.

    matrix s = sqrt(diag(m)) # std dev
    matrix scaling = s * s'
    matrix ms = m ./ scaling	# rescaled
    matrix eigvec
    matrix eigval = eigensym(ms, &eigvec)
    matrix val = (eigval .> epsilon) ? eigval : epsilon	# like xmax

    if sum(val .> eigval)	# actually something was changed
        matrix T = 1 / ( (eigvec .^2) * val )

        # transform vector T to a diagonal matrix
        matrix temp = I(rows(T))
        temp[diag] = sqrt(T)

        # and also val
        matrix temp2 = I(rows(T))
        temp2[diag] = sqrt(val)
        matrix B = temp * eigvec * temp2
        ms = B * B'

        # undo the re-scaling
        m = ms .* scaling

        return 1
    else
        return 0
    endif
end function


function scalar zeroifclose (matrix *m,
                             scalar thresh[0::1e-12])
    # Sets elements to zero if they are really close.
    # The return value 0 or 1 indicates whether m was altered or not.
    # (an older version copied and returned the matrix)
    matrix indicator = (abs(m) .< thresh)
    ret = sum(indicator) > 0

    if ret
        m = indicator ? 0 : m
    endif

    return ret
end function

function matrix eliminate (const matrix vecA)
    # Each column of the input vecA is assumed to
    # come from the operation vec(A) on a square
    # matrix, thus rows(vecA) must be a square number.
    # Returns vech(A), which is the result of pre-
    # multiplying vec(A) with the "elimination"
    # matrix L_m.
    # If vecA has several columns, each column is
    # treated separately as described above
    # (and the results stacked side-by-side).

    r = sqrt(rows(vecA))

    if r != round(r)
        funcerr "Input must have a square number of rows"
    endif

    e = vech(mshape(seq(1, r^2), r, r)')

    return vecA[e,]
end function


function matrix duplicate (const matrix vechA)
    # The input is a vector assumed to come from
    # an operation like vech(A).
    # Returns vec(A), which is the result of pre-
    # multiplying vech(A) with the "duplication"
    # matrix D_m.
    # If vechA has several columns, each column is
    # treated separately as described above
    # (and the results stacked side-by-side).

    e = vec(unvech(seq(1,rows(vechA))'))
    return vechA[e,]
end function


function matrix drill (const matrices x,
                      matrix rowspec[null],
                      matrix colspec[null])
    # This function "drills through" a matrix array and returns a matrix;
    # for example, drill(x, 2, 3) returns a vector with the [2,3] elements
    # of all matrices in the x array. "0" means "all". Returns an empty
    # 1x1 matrix in case of any error.

    # NOTA BENE: all matrices must be the same size
	# (might perhaps be relaxed in the future?)

    matrix ret = {}
    scalar n = nelem(x)
    scalar same_dim = 1

    if n == 0
        return ret
    endif

    ### check sizes
    nr = rows(x[1])
    nc = cols(x[1])

    loop i = 2..n
        same_dim = same_dim && (rows(x[i]) == nr) && (cols(x[i]) == nc)
        if !same_dim
			printf "Matrix number %d with different dimensions\n", i
            funcerr "Not all matrices are the same size."
        endif
    endloop

    ### process specs
    matrix rs = seq(1, nr)'	# default
    if exists(rowspec)
        rs = (rowspec[1] == 0) ? rs : vec(rowspec) # force to column
    endif

    matrix cs = seq(1, nc)' # default
    if exists(colspec)
        cs = (colspec[1] == 0) ? cs : vec(colspec) # force to column
    endif

    ### check for multiple or illegal specs
    scalar nrspec = rows(rs)
    scalar ncspec = rows(cs)

    if xmin(nrspec, ncspec) > 1
        funcerr "Cannot have multiple row and column specifications"

    elif minc(rs|cs) < 0
        funcerr "Negative specification not allowed"

    elif maxc(rs) > nr
        printf "(matrices have %d rows, but %d wanted)\n", nr, maxc(rs)
        funcerr "Incorrect row specification"

    elif maxc(cs) > nc
        printf "(matrices have %d columns, but %d wanted)\n", nc, maxc(cs)
        funcerr "Incorrect column specification"
    endif

    ### do the actual drilling
    if nrspec == 1
        ret = flatten(x)[rs,]
        ret = transp(mshape(ret, nc, n))
        ret = ret[,cs]

    elif ncspec == 1
        ret = flatten(x,1)[,cs]
        ret = mshape(ret, nr, n)
        ret = ret[rs,]
    endif

    return ret
end function


function matrix combinations (matrix from "Set of all choices",
                              int h[1::] "Number of selected choices")
    /* If "from" is a vector with n elements, this function returns a
        matrix whose rows are all the possible subsets with h elements;
        for h>2, a recursive algorithm is used.

       For example: combinations({1,2,3}, 2) returns

         1   2
         1   3
         2   3

       return: matrix with n! / (h! * (n-h)!) rows if successful,
       otherwise a 1x1 matrix with an NA value. */

    if rows(from) > 1 && cols(from) > 1
        string s = argname(from)
        printf "\nError: %s is not a vector\n", strlen(s) ? s : "argument 1"

        return {NA}
    endif

    scalar n = nelem(from)
    if h > n
        string s = argname(from)
        printf "\nError: number of elements of %s less than argument 2\n", strlen(s) ? s : "argument 1"

        return {NA}
    endif
	
    # special cases
    if h == 1
        return vec(from)
    elif h == 2
        matrix a = mshape(from, n, n)
        return (a')[lower] ~ a[lower]
    elif h == n
        return vec(from)'
    elif h == n-1
        return mshape(mshape(from, n, n-1)', n, n-1)
    endif

    matrix ret = {}
    scalar hh = h-1
    loop i = 1 .. (n-hh)
        ret |= from[i] ~ combinations(from[i+1:], hh)
    endloop

    return ret
end function

####

# this is originally from Jack's StrucTiSM code 
function matrix qformvech(const matrix Xt)
    # vech(X'AX) = P (X ** X)' Q vech(A) = G vech(A)
    # this function returns G

    n = rows(Xt)
    m = round(n * (n+1) / 2)
    matrix s = seq(1,m)
    matrix P = vec(upper(unvech(s'))) .= s

    n = cols(Xt)
    m = round(n * (n+1) / 2)
    s = seq(1,m)
    matrix Q = vec(upper(unvech(s'))) .= s
    Q =   Q || vec(lower(unvech(s'))) .= s

    matrix ret = P'(Xt ** Xt) * Q
    return ret
end function

