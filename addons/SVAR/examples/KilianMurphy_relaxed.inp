/*
Example script for sign restrictions in gretl's SVAR addon.
This here is to demonstrate the use of "exotic" restrictions,
inspired from Kilian & Murphy.

However, it is not a replication, since imposing all their 
restrictions leads to very few accepted draws. Hence the 
restrictions here are somewhat relaxed. 
*/

set verbose off
set seed 909090

include SVAR.gfn

open KMdata.gdt --quiet --frompkg=SVAR

# variables
list X = prod KI rpo inventories

scalar order = 24

#set up the model
list Z = const seasonals(1)
mod = SVAR_setup("SR", X, Z, order) 
SVAR_cumulate(&mod, 1)
SVAR_cumulate(&mod, 4)
mod.horizon = 1

## set up the sign restictions
mod.snames = defarray("Supply", "Demand", "Speculative Demand",)

# these are the "dynamic" restriction and (impact? )sign restrictions.
SVAR_SRplain(&mod, "prod", "Supply", "-", 12) 
SVAR_SRplain(&mod, "KI",   "Supply", "-", 12)
SVAR_SRplain(&mod, "rpo",  "Supply", "+", 12)

SVAR_SRplain(&mod, "prod", "Demand", "+")
SVAR_SRplain(&mod, "KI",   "Demand", "+")
SVAR_SRplain(&mod, "rpo",  "Demand", "+")
# SignRest(&mod, "Demand", "inventories")

SVAR_SRplain(&mod, "prod", "Speculative Demand", "+")
SVAR_SRplain(&mod, "KI",   "Speculative Demand", "-")
SVAR_SRplain(&mod, "rpo",  "Speculative Demand", "+")
SVAR_SRplain(&mod, "inventories", "Speculative Demand","+")


# exotic restrictions: supply elasticity  bounds
# (hardcoded "M"!)
exostring2 = "M[1,2] / M[3,2] >= 0"
exostring3 = "M[1,3] / M[3,3] >= 0"


# FIXME: Don't the following restrictions also imply "need_model" ??? (Sven)
exostring1 = "mean(((exp((log(54389) + cum(mod.Y[,1])))* M[1,1] ./ 100) - M[4,1]) ./ (exp((log(54389)+cum(mod.Y[,1]))) - mean(mod.Y[,4])) ./ (M[3,1]./100))>=-0.8"
# mean(mod.Y[,4])=4.4982 -from the summary statistics
exostring11 = "mean(((exp((log(54389) + cum(mod.Y[,1])))* M[1,1] ./ 100) - M[4,1]) ./ (exp((log(54389)+cum(mod.Y[,1]))) - mean(mod.Y[,4])) ./ (M[3,1]./100)) <=0"

SVAR_SRexotic(&mod, exostring11, 0)
SVAR_SRexotic(&mod, exostring1, 0)
SVAR_SRexotic(&mod, exostring2, 0)
SVAR_SRexotic(&mod, exostring3, 0)

# do the rotations (this is the computationally intensive part)
bundles moo = SVAR_setidIRF(&mod, 256, 0, 15000)

# draw the irfs
SVAR_SRplot(moo, mod, mod.Ynames, mod.snames, 0.95) 
