function void scoreC(matrix *ret, const matrix theta, matrices dat)
    matrix Sigma = dat[1]
    matrix Ss = dat[2]
    # unscramble_dat(&dat, &Sigma, &Ss)
    scalar n = rows(Sigma)
    scalar npar = cols(Ss) - 1

    matrix C = mat_exp(theta, Ss) # was: , 0)
    matrix S = Ss[,1:npar]

    matrix iC = inv(C)
    matrix ret = iC' (qform(iC,Sigma) - I(n))

    ret = vec(ret)'S
end function

function matrix C1mat( const matrix A, bool VECM[0],
                      const matrix jalpha[null], const matrix jbeta[null])
    /*
       computes C(1) out of the autoregressive matrices; jalpha and jbeta
       are alpha and beta, which are used only if VECM is nonzero, that
       is under cointegration

       (Remark Sven: jbeta / We now (Jan 2018) make sure only rows 1:n are used.) */

    n = rows(A)
    p = cols(A) / n
    matrix tmp = mshape(vec(A), n*n, p)

    if VECM == 0
        tmp = mshape(sumr(tmp), n, n)
        matrix ret = inv(I(n) - tmp)
    else # cointegrated
        errorif( !exists(jalpha) || !exists(jbeta), "Need cointegration params for C1 in VECM!")

        matrix aperp = nullspace(jalpha')
        matrix bperp = nullspace(jbeta[1:n, ]')
        tmp = mshape(tmp*seq(1,p)', n, n)
        matrix ret = bperp * inv(aperp'tmp*bperp) * aperp'
    endif

    return ret
end function

function matrix init_C(const matrix Sigma, const matrix Rd)
    
    matrix Ss = imp2exp(Rd)
    k = cols(Ss)
    if k == 1
        # nothing to estimate
        ret = {}
    else
        n = rows(Sigma)

        matrix S = k>1 ? Ss[,1:k-1] : {}
        matrix s = Ss[,k]
        matrix K = cholesky(Sigma)
        matrix bigmat = (K ** I(n))

        matrix ret = mols(vec(Sigma) - bigmat*s, bigmat*S)
    endif

    return ret
end function

function void PseudoHessC(matrix *H, const matrix theta,
        				  const matrices dat)
                          
    matrix Sigma = dat[1]
    matrix Ss = dat[2]
    n = rows(Sigma)
    npar = cols(Ss) - 1
    matrix S = Ss[,1:npar]

    # printf "PseudoHessC\n%10.4f\n%4.1f\n", theta, Ss

    matrix C = mat_exp(theta, Ss) # was: , 0)
    H = InfoMat(C, S) # was InfoMatC
end function

function matrix estC(matrix *theta, const matrix Sigma, const matrix Rd, 
                     matrix *vcv[null],\
                     scalar *errcode, int method, scalar verbose[1])

    matrix Ss = imp2exp(Rd)
    n = rows(Sigma)
    if cols(Ss) == 1
        # nothing to estimate
        matrix C = mshape(Ss, n, n)
        if exists(vcv)
            vcv = zeros(n*n,n*n)
        endif
        errcode = 0
        return C
    endif

    scalar SCALE = 0 # EXPERIMENTAL
    npar = rows(theta)

    if SCALE == 1
        printf "Scale!\n"
        matrix s = sqrt(diag(Sigma))
        matrix sSig = Sigma ./ (s*s')
    else
        matrix sSig = Sigma
    endif

    matrix tmp = mat_exp(theta, Ss) 

    if verbose > 2
        /* obsolete ? */
        printf "check within estC -- before estimation\n"
        check_const(tmp, Rd)
    endif
    matrices dat = defarray(sSig, Ss)

    matrix g H
    if verbose > 1
        set max_verbose 1
    else
        set max_verbose 0
    endif
    err = 1
    iters = 0
    #set bfgs_toler 1.0e-03

    matrix theta0 = theta
    errcode = 0

    loop while (err==1 && iters<100) 
        if method == 0
            catch scalar ll = BFGSmax(theta, "loglik(theta, dat, -1)")
            errcode = $error
            scoreC(&g, theta, dat)
        elif method == 1
            catch scalar ll = BFGSmax(theta, "loglik(theta, dat, -1)",
              "scoreC(&g, theta, dat)")
            errcode = $error
        elif method == 2
            catch scalar ll = NRmax(theta, "loglik(theta, dat, -1)")
            errcode = $error
            scoreC(&g, theta, dat)
        elif method == 3
            catch scalar ll = NRmax(theta, "loglik(theta, dat, -1)",
              "scoreC(&g, theta, dat)")
            errcode = $error
        elif method == 4
            catch scalar ll = NRmax(theta, "loglik(theta, dat, -1)",
              "scoreC(&g, theta, dat)",
              "PseudoHessC(&H, theta, dat)")
            errcode = $error
        endif

        if errcode>0
            printf "errcode = %d\n", errcode
        endif
        scalar crit = maxr(abs(g))
        err = (crit > 1.0e-4)

        if err==1
            iters++
            theta = 0.1*mnormal(npar,1) + theta0
            if verbose>1
                printf "Iter %3d: Restarting... ll = %12.7f, crit = %16.10f\n", \
                  iters, ll, crit
                printf "theta = %10.5f grad = %10.5f\n", theta', g
            endif
        endif

    endloop

    scalar crit = maxr(abs(g))
    warn = (crit > 1.0e-1)

    if !err
        if (iters > 0) && (verbose > 1)
            printf "Converged after %d restarts\n", iters
        endif
        matrix C = mat_exp(theta, Ss) 

        if SCALE == 1
            C = C .* s'
        endif
        if verbose > 1
            printf "Estimated C matrix:\n%12.5f", C
        endif

        if exists(vcv)
            vcv = coeffVCV(Ss[,1:npar], &C)
        endif

        if verbose > 1
            matrix Info = InfoMat(C, Ss[,1:npar])	# was InfoMatC
            printf "estC : Info = \n%14.10f\n", Info
            printf "estC : score = \n%14.10f\n", g
        endif

    else
        if verbose > 1
            printf "No convergence! :-( \n%12.6f\n", theta' | g
        endif
        matrix C = {}
        errcode = 1
    endif

    return C
end function
