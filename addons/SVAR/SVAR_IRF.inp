function void doIRF_new(bundle *SVARobj)

    # constructs the structural VMA representation via the native vma()
    # function and stores it into the bundle
    # (apparently this isn't used yet? - June 2021)

    scalar type = SVARobj.type
    matrix C

    if type==1 || type==2 || type==4
        C = SVARobj.C
    elif type == 3
        # (maybe not yet computed)
        C = inbundle(SVARobj, "C") ? SVARobj.C : SVARobj.S1 \ SVARobj.S2
    endif

    ret = vma(SVARobj.VARpar, C, SVARobj.horizon + 1)

    # switch the indices (necessary for compatibility)
    n = SVARobj.n
    s = vec(mshape(seq(1, n*n), n, n)')
    ret = ret[,s]

    if SVARobj.ncumul > 0
        ret[, SVARobj.cumsel] = cum(ret[, SVARobj.cumsel]) # .cumsel was sel
    endif

    matrix SVARobj.IRFs = ret
end function

function void doIRF(bundle *SVARobj)
/*
   constructs the structural VMA representation. Note
   that the companion matrix is never used explicitly;

   The output is not returned by the function, but rather
   put into the bundle under the "IRFs" key.
    */
    scalar type = SVARobj.type
    matrix varA = SVARobj.VARpar
    scalar H = SVARobj.horizon + 1
    scalar n = SVARobj.n
    matrix C

    if type==1 || type==2 || type==4
        C = SVARobj.C	# was: SVARobj.S1

    elif type == 3
        # (maybe not yet computed)
        C = inbundle(SVARobj, "C") ? SVARobj.C : SVARobj.S1 \ SVARobj.S2
    endif

    matrix ret = zeros(H,n*n)
    scalar np = SVARobj.p * n
    matrix tmp = I(np)
    matrix prd = zeros(np,np)

    loop i = 1..H
        ret[i,] = vec(tmp[1:n,1:n] * C)'
        if (np>n)
            prd[n+1:np, ] = tmp[1:np-n, ]
        endif
        prd[1:n,] = varA * tmp
        tmp = prd
    endloop

    if SVARobj.ncumul > 0
        # The following code is now done in SVAR_cumulate
        # once and for all:
        # matrix to_cum = SVARobj.cumul
        # tmp = zeros(n,n)
        # tmp[to_cum,] = 1
        # sel = selifr(transp(seq(1,n*n)), vec(tmp))
        ret[, SVARobj.cumsel] = cum(ret[, SVARobj.cumsel]) # .cumsel was sel
    endif

    matrix SVARobj.IRFs = ret
end function

##############

function matrix FEVD(bundle *SVARobj, int drawix[0::0])
    # (drawix only meant for the set id case (type 10))

    n = SVARobj.n
    h = SVARobj.horizon + 1

    if SVARobj.type == 10
        # In the set id case in each accepted draw the impulse
        # responses are already stored as "irfs"; however, the format
        # there is an array of matrices.

        errchkSRhisto(&SVARobj, drawix)

        # allow drawix to override the setting in the bundle
        whichdraw = drawix ? drawix : SVARobj.bestdraw
        bundle pickdraw = SVARobj.acc_draws[whichdraw]

        errorif( cols(pickdraw.irfs[1]) != n, "partial id not supported for FEVD")
        errorif( h != nelem(pickdraw.irfs), "horizon mismatch")

        if !inbundle(pickdraw, "IRFs") # maybe have already been added there
            putIrf_to_accdraw(&SVARobj, whichdraw)
        endif
        matrix IRFs = SVARobj.acc_draws[whichdraw].IRFs

    else # standard non-SR model
        if drawix > 0
            print "Warning: 'drawix' arg meaningless for standard SVAR, ignoring"
        endif
        matrix IRFs = SVARobj.IRFs
    endif

    matrix ret = zeros(h, n*n)
    ctmp = cum(IRFs .* IRFs)

    loop i = 1..h
        tmp = mshape(ctmp[i,],n,n)'
        ret[i,] = vec(tmp ./ sumc(tmp))'
    endloop

    return ret
end function


### The functions GetShock() and SVAR_getshock aren't called anywhere,
#### but they're public and meant to be used by the user.
## GetShock may be deprecated in the future in favor of SVAR_getshock.

function series SVAR_getshock(bundle *mod, string sname[null],
                              int drawix[0::0])
    # This is a wrapper to provide a nicer interface, using the
    # name of the shock instead of the number.
    # Default (as in GetShock) is to use the first shock.

    s_ix = !exists(sname) ? 1 : instrings(mod.snames, sname)

    return GetShock(&mod, s_ix, drawix)
end function

####

function series GetShock(bundle *SVARobj, int i[1::1], int drawix[0::0])
/*
   Produces the series corresponding to the historical shock
   realizations associated with the point estimates of the model
   (and IRFs).
   For set identification (sign restrictions) there is no point
   estimate; however, we support that
   the user picks one of the accepted draws and then the shock series
   is based on that particular model draw.
   # (drawix only meant for the set id case (type 10))
    */

    series ret = NA
    type = SVARobj.type
    matrix B10 = {}	# to be filled in type 10

    ## some error checks ##
    errorif( type>4 && type!=10, sprintf("Given type %d\nUnknown model type", type))
    errorif( i > SVARobj.n, sprintf("Chosen shock index: %d\nShock index out of range", i))
       
    if type != 10 && drawix > 0
        print "Warning: 'drawix' arg meaningless for standard SVAR"
    elif type == 10
        errchkSRhisto(&SVARobj, drawix)
    endif

    ## get the C matrix (and then the inv) ##
    matrix C
    if type==1 || type==2 || type==4
        C = SVARobj.C

    elif type == 3
        # (maybe not yet computed)
        C = inbundle(SVARobj, "C") ? SVARobj.C : SVARobj.S1 \ SVARobj.S2

    elif type == 10 # set id
        # allow drawix to override the setting in the bundle
        whichdraw = drawix ? drawix : SVARobj.bestdraw
        bundle pickdraw = SVARobj.acc_draws[whichdraw]
        matrix C = pickdraw.irfs[1] # impact effect is C
        B10 = pickdraw.B

        errorif( cols(C) < SVARobj.n, "partial id not supported for shock retrieval")
    endif

    matrix iC = inv(C')

    matrix resids = muVARparE_mayberedr(SVARobj, B10)[3]

    ## construct the wanted series ##
    extra = $nobs - rows(resids)
    matrix tmp = {}
    if extra > 0
        set warnings off
        tmp = ones(extra,1) .* NA
    endif

    tmp |= resids * iC[,i]
    ret = tmp

    snames = SVARobj.snames # strings array?
    string vlab = snames[i]

    setinfo ret --description="@vlab"

    return ret
end function

#######################

function list SVAR_HD(bundle *mod, string vname[null],
                      int drawix[0::0])
    # wrapper around SVAR_hd to use a string interface for the
    # variable
    v_ix = !exists(vname) ? 1 : instrings(mod.Ynames, vname)
    return SVAR_hd(&mod, v_ix, drawix)
end function


function list SVAR_hd(bundle *Mod, int nv[1::1], int drawix[0::0])
    # historical decomposition
    # (drawix only meant for the set id case (type 10))

    list ret = null
    loop foreach i n p t1 t2 type T k
        scalar $i = Mod.$i
    endloop
    matrix B10 = {} # to be filled for type 10

    if nv > n
        printf "Hm. There are %d variables in the model. ", n
        printf "Chosen shock index: %d\n", nv
        funcerr "Shock index out of range"
        ## (further range check for SR partial id below) ##
    endif

    # Prepare the set id case
    if type == 10
        errchkSRhisto(&Mod, drawix)
        # allow drawix to override the setting in the bundle
        whichdraw = drawix ? drawix : Mod.bestdraw
        bundle pickdraw = Mod.acc_draws[whichdraw]
        matrix B10 = pickdraw.B
    endif

    # The following might be redrawn in type10/Bayesian
    matrices muVARparE = muVARparE_mayberedr(Mod, B10)

    # compute the exogenous part
    if type < 4
        matrix m = Mod.X * Mod.mu

    elif type == 4
        # here we have to take into account the "5 cases"
        dcase = Mod.jcase
        # T     = Mod.T
        matrix mreg = (dcase == 1) ? {} : ones(T,1)
        if dcase > 3
            mreg ~= seq(1,T)'
        endif

        matrix m = (mreg ~ Mod.X) * Mod.mu

    elif type == 10
        matrix m = Mod.X * muVARparE[1]
    endif

    # grab the C matrix
    matrix C
    if type==1 || type==2 || type==4
        C = Mod.C

    elif type == 3
        C = inbundle(Mod, "C") ? Mod.C : Mod.S1 \ Mod.S2

    elif type == 10
        C = pickdraw.irfs[1] # impact effect is C
        errorif( cols(C) < Mod.n, "partial id not supported for historical decomp")
    endif

    matrix iC = inv(C)
    strings Ynames = Mod.Ynames
    strings snames = Mod.snames
    string yn = Ynames[nv]

    smpl t1 t2
    if cols(m)>0
        Xdet = varsimul(muVARparE[2], m[p+1:,], Mod.Y[1:p,]) # was VARpar
    else
        Xdet = varsimul(muVARparE[2], zeros(T-p, n), Mod.Y[1:p,]) # was Mod.T
    endif

    ret += genseries( sprintf("hd_%s_det", yn), Xdet[,nv])

    # the structural shocks
    matrix U = muVARparE[3] * iC' # was E
    rotVARpar = iC * muVARparE[2] * (I(p) ** C)

    loop i = 1..n
        a = (seq(1,n) .= i)
        W = varsimul(rotVARpar, U .* a, zeros(p,n)) * C'
        ret += genseries(sprintf("hd_%s_%s", yn,
          fixname(snames[i])), W[,nv])
    endloop

    return ret
end function
