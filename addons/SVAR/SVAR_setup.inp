/*
   user functions for setting up stuff
*/

function string modelstring(int type)
/*
   The idea about the number 10 for sign restrictions is:
   - First it's very different from the other types (haha)
   - Secondly if later on we really support mixed models,
   like some sign restrictions and some zero restrictions,
   perhaps this could be expressed as the sum of the types.
   (E.g. 12 == 2 + 10 would be zero restrictions on the C matrix
   coupled with sign stuff.)
    */
    string ret = ""
    if type == 1
        ret = "plain"
    elif type == 2
        ret = "C"
    elif type == 3
        ret = "AB"
    elif type == 4
        ret = "SVEC"

    elif type == 10
        ret = "SR" # sign restrictions
    endif

    return ret
end function

function scalar modeltype(string s)
    scalar ret = 0
    string s2 = toupper(s)	# case insensitive
    if s2 == "PLAIN"
        ret = 1
    elif s2 == "C"
        ret = 2
    elif s2 == "AB"
        ret = 3
    elif s2 == "SVEC"
        ret = 4
    elif s2 == "KPSW"
        print "Please use 'SVEC' for cointegrated SVARs,"
        print "the code 'KPSW' is deprecated (but still works for now)."
        ret = 4

    elif s2 == "SR"	# sign restrictions
        ret = 10
    endif

    return ret
end function

function string optimstring(int type)
    string ret = ""
    if type == 0
        ret = "BFGS (numerical)"
    elif type == 1
        ret = "BFGS (analytical)"
    elif type == 2
        ret = "Newton-Raphson (numerical)"
    elif type == 3
        ret = "Newton-Raphson (analytical score)"
    elif type == 4
        ret = "Scoring algorithm"
    endif

    return ret
end function

function string btypestring(int type)
    string ret = ""
    if type == 1
        ret = "resampling"
    elif type == 2
        ret = "wild (Normal)"
    elif type == 3
        ret = "wild (Rademacher)"
    elif type == 4
        ret = "wild (Mammen)"
    elif type == 5
        ret = "MBB (moving blocks)"
    endif

    return ret
end function

function scalar boottypecode(string btypestr)
    ret = 0
    string s = tolower(btypestr) # case insensitive!
    if s == "resampling" || s == "resample"
        ret = 1
    elif s == "wildn" || s == "wild"
        ret = 2
    elif s == "wildr"
        ret = 3
    elif s == "wildm"
        ret = 4
    elif s == "mbb" || s == "moving blocks"
        ret = 5
    endif
    return ret
end function

function string BCstring(int level)
    string ret = ""
    if level == 0
        ret = "none"
    elif level == 1
        ret = "partial"
    elif level == 2
        ret = "full"
    endif
    return ret
end function


function matrix set_default_dimensions(bundle *mod, list lY,
                                       list lX[null], int varorder)

    # trivial stuff: set up dimensions etc.

    n = nelem(lY)
    k = nelem(lX)

    /* no of endogenous variables */
    mod.n = n
    /* no of exogenous variables */
    mod.k = k
    /* VAR order */
    mod.p = varorder
    /* horizon for IRFs etc */
    mod.horizon = 10
    if $pd == 4
        /* quarterly: try 5 years */
        mod.horizon = 20
    elif $pd == 12
        /* monthly: two years */
        mod.horizon = 24
    endif

    /* sample size */
    list everything = lY lX
    smpl everything --no-missing
    matrix mreg = { everything }
    mod.T = rows(mreg)
    mod.t1 = $t1
    mod.t2 = $t2

    return mreg
end function

function bundle SVAR_setup(string type_string, list lY, list lX[null],
                           int varorder[1::1], bool checkident[1])

    /*
       This creates a bundle holding the info on the SVAR; this will be
       filled in 3 steps: This function inserts the initial info: sample
       size, data and so on. Then, more stuff will have to be added later:
       the VAR estimates in packed form (see below), then the SVAR estimates.

       The scalar "step" keeps track of the stage we're at.
       (maybe not needed any more)

       The arg 'checkident' is just copied into the model bundle. It still needs
       to be processed later (presumably within SVAR_estimate).
    */

    # Drop collinear exogenous terms
    lX = dropcoll(lX)

    scalar type = modeltype(type_string)
    if type == 4	# SVEC
        # SVEC treats restricted deterministic terms specially as per Johansen,
        # so we'll drop them if present,
        # any other exogenous regressors are under the user's responsibility
        # (eg centred dummies)

        # the following currently doesn't work in gretl w.r.t. the time trend,
        # but fails silently (but const works -- still current in Jan 2019)
        list lX -= const time

        # therefore check for remaining collinearity
        genr time
        list lcheck = lX const time
        matrix mcheck = { lcheck }
        if rank(mcheck'mcheck) < nelem(lcheck)
            funcerr "Remove constant and trend terms from X list!"
        endif
    endif

    scalar n = nelem(lY)
    scalar k = nelem(lX)
    scalar n2 = n*n

    bundle ret = null

    /*-----------------------------------------------------------------------*/
    /* general info                                                          */
    /*-----------------------------------------------------------------------*/

    /* type goes from 1 to 4 (plain, "C", "AB" or "SVEC"), plus 10 ("SR") */
    ret.type = type

    /* the step we're at: 0 = no estimation done, 1 = VAR only, 2 = SVAR */
    ret.step = 0 # maybe not needed any more

    matrix mreg = set_default_dimensions(&ret, lY, lX, varorder)

    /* the actual data */
    matrix ret.Y = mreg[,1:n]
    matrix ret.X = (k>0) ? mreg[, n+1 : n+k] : {}

    # variable names
    strings ret.Ynames = strsplit(strsub(varname(lY), "," , " ")) # note: string array
    strings ret.Xnames = strsplit(strsub(varname(lX), "," , " ")) # needed?

    /* Names for shocks */
    # per default, we borrow variable names, following tradition
    strings ret.snames = ret.Ynames

    /* Don't calculate the long-run matrix by default.
    (This does not apply to the case of long-run restrictions.) */
    ret.calc_lr = 0

    /* Optimisation (not needed for SR, but is expected elsewhere...) */
    ret.optmeth = 4 # default = scoring

    /* Information for cumulating/normalizing IRFs */
    ret.ncumul = 0
    matrix ret.cumul = {}
    ret.normalize = 0


    /* ----------------------------------------------------------------
        type-specific stuff
       ----------------------------------------------------------------*/

    if type != 10    # (traditional, no sign restrictions)

        /*
        The constraint matrices.
        "Rd1" contains short-run constraints on B (and therefore C in non-AB models);
        "Rd1l" contains long-run constraints on C (not supported in AB models);
        "Rd0" contains short-run constraints on A in AB;

        note that "Rd1l" and "Rd0" were both "aux" in previous versions.

        Initially, they are empty. Except for the "plain" model, it's up to
        the user to fill them up later, via SVAR_restrict() or by hand
        */

        matrix ret.Rd1 = (type==1) ? cholRd(n) : {}
        matrix ret.Rd1l = {}

        if type == 3
            matrix ret.Rd0 = {}
        else
            matrix ret.fullRd = {}	# short- and long-run restrictions together later

            if type == 4
                /* SVEC model: cointegration stuff */
                matrix ret.jalpha = {}
                matrix ret.jbeta = {}
                ret.jcase = 0
            endif
        endif

        ## Other settings for traditional SVARs
        
        /* Copy the id check choice */
        ret.checkident = checkident

        /* Bootstrap */
        ret.nboot = 0
        ret.boot_alpha = -1
        matrix ret.bootdata = {}
        ret.biascorr = 0
        ret.boottype = 1  # standard resid resampl. (choice new 1.5)

    else #  10 (SR) 
        # matrix for holding sign restrictions
        matrix ret.SRest = {}

		/* Since for sign restrictions the traditional estimation step doesn't apply,
           but we need the reduced-form coefficients, we already do it here auto-
           matically. */
        ret.checkident = 0 # senseless for SR 
        SVAR_estimate(&ret, 0)
    endif

    return ret
end function

#####################################

function scalar SVAR_restrict(bundle *b, string code, int r,
                              int c[0], scalar d[0])

    # c gets a default so that it can be omitted with Adiag, Bdiag (?)
    # the d default is also natural

    type = b.type
    n = b.n

    # check input for implemented restriction code
    if strstr("C lrC A B Adiag Bdiag", code) == "" # code unknown
        print "Unknown code in SVAR_restrict."
        return 2

        # check for input mismatch
    elif (code=="C" || code=="lrC") && !(type==1 || type==2 || type==4)
        print "C type restriction but not a C model."
        return 1

    elif (strstr("A B Adiag Bdiag", code) != "") && (type!=3)
        print "AB type restriction but not an AB model."
        return 1

        # check for unsupported case
    elif code == "lrC" && type == 3
        print "Long-run restrictions only supported in C model."
        return 3	# (Which code to return here? <Sven>)

        # check for bogus long-run constraint
    elif code == "lrC" && type == 4
        if c > n - b.crank
            print "Long-run constraints only make sense on permanent shocks."
            printf " (First %d shocks.)\n", n - b.crank
            # (p.29, section 7 of the doc)
            return 4
        endif

    elif type == 10
        print "Use specialized functions (SVAR_SRplain etc.) for sign restrictions."
        return 5
    endif

    # if no input error, proceed with this:
    err = 0
    if code == "C"
        matrix Rd = b.Rd1
        err = add_constraint(&Rd, n, r, c, d)
        if !err
            b.Rd1 = Rd
        endif
    elif code == "lrC"
        matrix Rd = b.Rd1l
        err = add_constraint(&Rd, n, r, c, d)
        if !err
            b.Rd1l = Rd
        endif
    elif code == "A"
        matrix Rd = b.Rd0
        err = add_constraint(&Rd, n, r, c, d)
        if !err
            b.Rd0 = Rd
        endif
    elif code == "B"
        matrix Rd = b.Rd1
        err = add_constraint(&Rd, n, r, c, d)
        if !err
            b.Rd1 = Rd
        endif
    elif code == "Adiag"
        matrix Rd = b.Rd0
        if ok(r)
            b.Rd0 = Rd | diag_Rd(n, r)
        else
            b.Rd0 = Rd | free_diag_Rd(n)
        endif
    elif code == "Bdiag"
        matrix Rd = b.Rd1
        if ok(r)
            b.Rd1 = Rd | diag_Rd(n, r)
        else
            b.Rd1 = Rd | free_diag_Rd(n)
        endif
    endif

    ## Inform the user if the restriction failed.
    /*
       At this point it should hold that:
       err ==  0 : add_constraint worked ok,
       -- or Adiag/Bdiag: is it conceivable that this happens
       together with other A/B restrictions? Then it probably should
       also be checked in principle (but doesn't happen here).
    */

    if err == -1
        printf "Imposing restriction failed, bad input to "
        printf "add_constraint.\n"

    elif err == 10
        printf "Imposing restriction failed, conflicting with "
        printf "earlier restrictions.\n"

    elif err == 20
        printf "Imposing restriction failed, redundant.\n"
    endif

    if err
        printf "(Code %s, ", code
        if ok(r)
            printf "element %d,%d restricted to %f.)\n", r,c,d
        else
            printf "no manual restriction.)\n"
        endif
    endif

    return err	# 0, -1, 10, or 20
end function

function scalar SVAR_coint(bundle *SVARobj, int dcase[1:5:3],
                           matrix jbeta, matrix jalpha[null],
                           bool verbose[0], const list rexo[null])

    /*
       This function doesn't do very much, except setting
       up the model for subsequent VECM estimation; "dcase" tells you
       which of the "five cases" we want (no constant, restricted
       constant, etc), jbeta is simply checked for dimensions and then
       copied into the object.

       As for jalpha, if it's an empty matrix,
       that means "just estimate it unrestrictedly", and we set up a
       flag accordingly. Otherwise, it's taken to be pre-set to some
       fixed value; the intermediate case (contraints on alpha) is not
       handled, and I doubt it will ever be.

       While we're at it, we also label the structural shocks as
       "Perm_1", "Perm_2", "Trans_1", "Trans_2", etc.
    */

    if SVARobj.type != 4 && verbose 
        print "Putting cointegration information into a non-SVEC model --"
        print " are you sure you know what you're doing?"
    endif

    scalar n = SVARobj.n

    # define default
    if !exists(jalpha)
        matrix jalpha = {}
    endif

    # syntax check
    err = (dcase<1) || (dcase>5)
    if err
        errmsg = sprintf("Invalid dcase value %d", dcase)
        funcerr errmsg
    endif

    # dimensions check
    if dcase%2 # nice, huh?
        err = err || (rows(jbeta) != n)
    else
        err = err || (rows(jbeta) != n+1)
    endif
    if err
        errmsg = sprintf("jbeta: has %d rows, should have %d", rows(jbeta),
          dcase%2 ? n : n+1)
        funcerr errmsg
    endif

    r = cols(jbeta)
    err = err || (n < r) # should this be <=? hmm.

    # rank check
    err = err || (rank(jbeta) < r)

    # now check if alpha is ok
    d = rows(jalpha)

    # d==0 is ok, we'll estimate alpha later
    free_a = (d==0)
    if !free_a
        err = err || (d != n) || (cols(jalpha) != r)
    endif

    # if anything goes wrong, return
    if err
        # (currently err==1 here always, Sven believes)
        outfile stderr --write --quiet
        printf "SVAR_coint: returning on err = %d\n", err
        outfile --close
        return err
    endif

    # fill up the object with the info

    SVARobj.crank = r
    SVARobj.jcase = dcase
    SVARobj.jbeta = jbeta
    SVARobj.jalpha = jalpha
    SVARobj.free_a = free_a

    if verbose
        if dcase == 1
            printf "No constant, "
        elif dcase == 2
            printf "Restricted constant, "
        elif dcase == 3
            printf "Unrestricted constant, "
        elif dcase == 4
            printf "Restricted trend, "
        elif dcase == 5
            printf "Unrestricted trend, "
        endif

        printf "beta =\n%9.5f\n", jbeta

        if free_a
            printf "alpha is unrestricted\n"
        else
            printf "alpha =\n%9.5f\n", jalpha
            printf "PI =\n%9.5f\n", jalpha * jbeta'
        endif
    endif

    # relabel transitory structural shocks
    strings sn = SVARobj.snames

    if n-r == 1
        sn[1] = sprintf("Permanent")
        if r == 1
            sn[2] = "Transitory"
        else
            loop i=2..n --quiet
                sn[i] = sprintf("Transitory_%d", i-1)
            endloop
        endif
    else
        loop i=1..n --quiet
            sn[i] = sprintf("Permanent_%d", i)
        endloop
        if r == 1
            sn[n] = "Transitory"
        else
            loop i=1..r --quiet
                sn[n-r+i] = sprintf("Transitory_%d", i)
            endloop
        endif
    endif

    SVARobj.snames = sn
    if !err
        SVARobj.cointsetup = 1	# flag success
    endif

    return err
end function

####

function scalar SVAR_cumulate(bundle *b, int nv)
    err = (nv>b.n || nv<1) # was nv<0, but 0 makes no sense (?)
    if !err
        vn = b.Ynames
        printf "Variable %s cumulated\n",  vn[nv]
        b.cumul = b.cumul | {nv}
        b.ncumul = b.ncumul + 1

        # The following code was in doIRF but doesn't depend
        # on the data, so slightly inefficient for the bootstrap.
        # Instead we introduce b.cumsel which can be reused later
        tmp = zeros(b.n, b.n)
        tmp[b.cumul,] = 1
        matrix b.cumsel = selifr(transp(seq(1, b.n * b.n)), vec(tmp))
    endif
    return err
end function

