function scalar SVAR_estimate(bundle *obj, int verbosity[1])

    /*
   this function fills the bundle with the estimated structural
   matrices and the covariance matrix of their free elements; it also
   calls do_IRF at the end so that the structural VMA is stored into
   the bundle
    */

    errorif(!inbundle(obj, "type"), "Missing info, did you run SVAR_setup?")
    scalar type = obj.type
    scalar meth = obj.optmeth
    scalar n = obj.n
    scalar T = obj.T
    matrix vcv
    scalar errcode = 0

    if type == 4 # do VECM
        errorif(!inbundle(obj, "cointsetup"), "Need to do cointegration setup first for 'SVEC'.")
        errorif(!obj.cointsetup, "No valid cointegration setup found.")
        # ( Not sure if this case (obj.cointsetup==0) can currently happen.)
        vecm_est(&obj)

    else # estimate ordinary VAR
        base_est(&obj)
    endif

    if obj.checkident
        id = SVAR_ident(&obj, (verbosity > 1)) # output for verbosity >= 2  
        errorif( !id, "Identification check failed.")
    endif

    # grab the instantaneous covariance matrix
    matrix Sigma = obj.Sigma
    scalar obj.LL0 = VARloglik(obj.T, Sigma)

    if type == 1

        # plain model: just Cholesky decomposition
        matrix C = cholesky(Sigma)
        matrix param = vech(C')

        # compute the covariance matrix for C
        matrix Ss = imp2exp(obj.Rd1)
        vcv = coeffVCV(Ss[, 1: cols(Ss)-1], &C)

    elif type==2 || type==4
        # C models in a broad sense (including SVEC)

        # Maybe redundant restrictions have already been detected
        # by SVAR_ident and then removed; in this case we mustn't
        # use the plain vanilla fullRd.
        if inbundle(obj, "cleanfullRd")
            matrix fullRd = obj.cleanfullRd
            # (obj.C1 and obj.fullRd already created by SVAR_ident then)
      
        elif inbundle(obj, "fullRd") && inbundle(obj, "C1")
            matrix fullRd = obj.fullRd

        else
            matrix fullRd = get_full_Rd(&obj, verbosity) 
            # (This also sets obj.C1.)
            matrix obj.fullRd = fullRd

        endif 

        # try to set some "sensible" initial values
        matrix param = init_C(Sigma, fullRd)

        # do estimation; note that vcv is estimated inside "estC"
        matrix C = estC(&param, Sigma, fullRd, &vcv, &errcode, meth, verbosity)

    elif type == 3
        # AB-model

        matrix U = obj.U     # grab the VAR residuals (needed for initialisation)
        matrix bRd = obj.Rd1 # restrictions on B
        matrix aRd = obj.Rd0 # restrictions on A

        # try to set some "sensible" initial values
        # (substitute out call to (former) init_AB)
        matrix param = is_standard_AB(aRd, bRd) ? \
          stdAB_init(U, aRd, bRd) : nonstdAB_init(U, aRd, bRd)

        # do estimation; note that vcv is estimated inside "estAB"
        # (no it actually wasn't, now it is <Sven>)
        matrices transfer
        matrix C = estAB(&param, Sigma, aRd, bRd, &vcv, &errcode, meth, \
          verbosity, &transfer)
    
    elif type == 10    # SR 
	    # just enter some dummy stuff, only needed for compatibility right now
        matrix C = cholesky(Sigma)
        matrix obj.theta = vech(C')

        # the covariance matrix for C (just dummy!)
        matrix Ss = imp2exp(cholRd(n))
        matrix obj.vcv = coeffVCV(Ss[, 1: cols(Ss)-1], &C)
        matrix obj.C = C

    endif	# which type

    /*
       Post-estimation; transfers, long-run matrix, over-id test
    */
    errorif( errcode, "Estimation failed")

    if type != 10	# estimation ran fine, and we don't have a SR model 

        # Copy stuff into the bundle
        if type == 3
            matrix obj.S1 = transfer[1]	# A
            matrix obj.S2 = transfer[2]	# B
            scalar obj.ka = transfer[3]
            scalar obj.kb = transfer[4]

        endif
        /*
           We now also store C in the bundle because its computation
        was repeated several times elsewhere 
        (This was obj.S1 for C models instead of obj.C, no idea why.) 
        */
        matrix obj.C = C

        matrix obj.theta = param
        matrix obj.vcv = vcv

        # Long-run matrix
        # Jan 2018: add the type 4 possibility
        if ( (type < 3) && ( rows(obj.Rd1l) || obj.calc_lr ) ) || type == 4
            # a plain or C model with long-run constraints, or user switch;
            # here we now (Oct 2017) calc and save the long-run matrix

            # re-use the C1 matrix from above if possible
            matrix C1 = (type == 2 || type == 4) ? obj.C1 : C1mat(obj.VARpar)
            matrix obj.lrmat = C1 * obj.C
        endif

        # Indicate that estimation is done (still needed?)
        obj.step = 2
        # Store IRFs into the bundle
        doIRF(&obj)

        # store the log-likelihood into the bundle
        scalar obj.LL1 = VARloglik(obj.T, obj.Sigma, &C)

        # calculate the over-id test in any case (not just for verbosity)
        # (C should hopefully be correctly depending on type)
        overid = (n * (n+1) / 2 - rows(obj.theta))
        if overid > 0
            LR = 2 * (obj.LL0 - obj.LL1)
            matrix obj.LRoid = {LR; overid; pvalue(X, overid, LR)}
            # this is: (stat| dof| pv)
        endif

        if verbosity
            SVAR_est_printout(&obj)
        endif
    endif

    return errcode
end function # SVAR_estimate


/* ------------------------------------------------------------------ */

function bundle GUI_SVAR(int type[1:3:1] "Model type" \
                         {"plain (Cholesky)", "C-model", "AB-model"},
      list Y "VAR variables",
      list X[null] "Exogenous regressors",
      bool hasconst[1] "Constant",
      bool hastrend[0] "Time trend",
      bool hasseas[0] "Seasonal dummies",
      int l[1::1] "Lags",
      int h[0::] "Horizon",
      matrix R1[null] "Restriction pattern (short-run C or B)",
      matrix R2[null] "Restriction pattern (long-run C or A)",
      int b[0::] "Bootstrap replications",
      scalar alpha[0:1:0.9] "Bootstrap alpha",
      int biascorr[0:2:0] "Bias correction" \
      {"None", "Partial", "Full"},
      int boottype[1:5:1] "Bootstrap type" {"residual resampling", \
                         "wild/Normal", "wild/Rademacher", "wild/Mammen",\
						 "moving blocks"},
      bool checkident[0] "Check identification",
      matrix cumix[null] "Indices of responses to cumulate",
      int optmeth[0:4:4] "Optimization method" \
      {"BFGS (numerical score)", \
      "BFGS (analytical score)", \
      "Newton-Raphson (numerical score)", \
      "Newton-Raphson (analytical score)"\
      "Scoring algorithm"})

    n = nelem(Y)

    # stick together deterministics and other exog.
    list lX = dropcoll(determ(X, hasconst, hastrend, hasseas))

    # initialize the model bundle
    bundle m = SVAR_setup(modelstring(type), Y, lX, l, checkident)
    if h > 0
        m.horizon = h
    endif

    # copy options and/or overwrite defaults
    m.biascorr = biascorr
    m.optmeth = optmeth
    m.boottype = boottype

    ## implement the cumulation spec
    if exists(cumix)
        # ensure column vector
        cumix = vec(cumix)
        # input checks (numbers out of bounds)
        if max(cumix) > nelem(Y) || min(cumix) < 1
            print "Invalid cumulation specification!"
            print "(No responses will be cumulated.)"
        else	# sensible cumulation spec
            loop i = 1..rows(cumix) 
                SVAR_cumulate(&m, cumix[i])
            endloop
        endif
    endif

    ## process restrictions
    if type == 1
        if exists(R1) || exists(R2)
            print "Estimating plain model. Discarding provided restrictions."
        endif

        if checkident
            print "(Identification trivially given in plain model.)"
        endif
    else # C or AB model
        # input check
        errorif(!exists(R1) && !exists(R2), "Need some restrictions for C and AB models!")
        errorif(type==3 && (!exists(R1) || !exists(R2)), "Need restrictions on A and B for AB model!")

        # transform the R1-matrix to SVAR-style restrictions
        if exists(R1)
            apply_patternrestr(&m, (type==3 ? "B" : "C"), R1)
            # old:
            
#             r = rows(R1)
#             c = cols(R1)
#             errorif( r != n || c != n, "wrong R1 dimensions")
# 
#             string sBorC = type==3 ? "B" : "C"
#             loop i = 1..n 
#                 loop j = 1..n 
#                     scalar rij = R1[i,j]
#                     if ok(rij) # valid number = restricted element
#                         SVAR_restrict(&m, sBorC, i, j, rij)
#                     endif
#                 endloop
#             endloop
        endif

        # still need to consider the A or longrun-C matrix
        # transform the R2-matrix to SVAR-style restrictions
        if exists(R2)
            apply_patternrestr(&m, (type==3 ? "A" : "lrC"), R2)
            # old:
            
#             r2 = rows(R2)
#             c2 = cols(R2)
#             errorif(r2 != n || c2 != n, "wrong R2 dimension")
# 
#             string sAorlrC = type == 3 ? "A" : "lrC"
#             loop i = 1..n 
#                 loop j = 1..n 
#                     scalar rij = R2[i,j]
#                     if ok(rij) # valid number = restricted element
#                         SVAR_restrict(&m, sAorlrC, i, j, rij)
#                     endif
#                 endloop
#             endloop
        endif
    endif

    # do an explicit ID check (sven 1.0.2)
    scalar id_ok = 1

    if checkident
        if type == 2  && exists(R2)  # longrun C
            print "FIXME: not yet implemented for models with long-run restrictions"
        else
            print "Check identification:"
            id_ok = SVAR_ident(&m, 1)	# request verbosity==1 to get messages
        endif
    endif

    # and of course estimate
    if !id_ok
        return m
    else
        SVAR_estimate(&m)

        if b > 0
            SVAR_boot(&m, b, alpha, 0)
        endif
    endif

    return m
end function # GUI_SVAR

/* ---------------------------------------------------------------------- */

function void SVAR_bundle_print(bundle *b)
    # Some specification echoing (sven 1.0.2)
    # (not sure whether this should go into SVAR_est_printout() instead...)

    errorif(!inbundle(b, "type"), "Missing info, not a valid SVAR bundle!")
    loop foreach i type n k p 
        scalar $i = b.$i
    endloop

    printf "Model type: %s\n", modelstring(type)

    strings Ynames = b.Ynames
    print "Endogenous variables:"
    loop i = 1..n 
        printf "%s%s", Ynames[i], (i==n ? sprintf("\n") : ", ")
    endloop
    printf "\n"

    if k>0
        print "Exogenous variables:"
        strings Xnames = b.Xnames
        loop i = 1..k 
            printf "%s%s", Xnames[i], (i==k ? sprintf("\n") : ", ")
        endloop
    else
        print "(No exogenous variables.)"
    endif
    printf "\n"

    printf "Restriction patterns:\n\n"

    if type == 1
        print "Lower-triangular C matrix (Choleski decomposition)\n"
    elif type == 2 # C-model
        if rows(b.Rd1)
            printf "Short-run restrictions:\n"
            printf "%3.0f\n", b.Rd1
        else
            print "(No short-run restrictions)"
        endif
        if rows(b.Rd1l)
            print "Long-run restrictions:"
            printf "%3.0f\n", b.Rd1l
        else
            print "(No long-run restrictions.)"
        endif
    elif type == 3 # AB-model
        if rows(b.Rd0)
            print "Restrictions on A:"
            printf "%3.0f\n", b.Rd0
        else
            print "(No restrictions on A.)"
        endif
        if rows(b.Rd1)
            print "Restrictions on B:"
            printf "%3.0f\n", b.Rd1
        else
            print "(No restrictions on B.)"
        endif
    endif

    # only print this if actual estimation took place
    if inbundle(b, "Sigma")
        printf "Sigma = \n%10.6f", b.Sigma
        SVAR_est_printout(&b)
    endif

end function # SVAR_bundle_print
