# Utility functions for the sign restriction method in SVAR.
# (Later could probably merged into SVAR_utils.inp)


#############################

function matrices muVARparE_mayberedr(const bundle Smod, matrix Bofonedraw[null])
    # Retrieves all the quantities that perhaps are redrawn 
    # in the Bayesian set id case:
    # - mu: exog. coeffs, B[1:k , ]
    # - VARpar: autoregr. coeffs, B[k+1: ,]
    # - E: residuals

	redrawn = 0

    if Smod.type == 10 
        if Smod.DO_BAYES && !exists(Bofonedraw)
            funcerr "Need redrawn matrix input for Bayesian set id case"
        elif Smod.DO_BAYES
            redrawn = 1
        endif
    endif  

    if !redrawn
        # old standard cases
        matrix mu = Smod.mu
        matrix VARpar = Smod.VARpar
        matrix resids = Smod.E    # original residuals 

    else
        # need to use the resids associated with re-drawn coefficients
        matrix mu = Bofonedraw[1 : Smod.k ,]
        matrix VARpar = Bofonedraw[Smod.k + 1 : ,] 
        matrix resids = Smod.Y[Smod.p + 1 : ,] - Smod.mreg * Bofonedraw
    endif

    return defarray(mu, VARpar, resids) 
end function     

function void errchkSRhisto(bundle *Smod, int drawix)

    if !Smod.storeSRirfs
        funcerr "Need accepted draws content (acc_draws) in set-id case"
    elif drawix == 0
        funcerr "Need to pick one particular draw (index)"
    elif drawix > nelem(Smod.acc_draws)
        printf "Only %d accepted draws exist\n", nelem(Smod.acc_draws) 
        funcerr "Draw index out of range"
    endif

end function

function void errmsgshockmatch(const matrix pos, string sname)
    if nelem(pos) != 1 
        printf "You don't have a shock named %s in your model.\n", sname
        print " (or several ones)"
        funcerr "Specify correct and unique shock names" 
    endif
end function 

function strings getstrings_byindex(const strings S, const matrix indices)
    # collects the (in general non-contiguous) sub-array
    # indexed by indices (imitate fancy indexing)
    strings out = null
    matrix m = vec(indices) 
    loop i = 1..nelem(m) -q
        out += S[m[i]]
    endloop
    return out
end function

# --------------------------------

function matrix names2indices(strings fromwhich, strings names)

    matrix which = {}
    if !nelem(names) # default, all
        which = seq(1, nelem(fromwhich))

    else
        loop n = 1..nelem(names) -q
            which |= strpos_allin(fromwhich, names[n]) 
        endloop 
        which = values(which)
    endif
    return which # may still be empty
end function 
        

# ------------------------------

function void safetycheck1(const matrix Sigma, const matrix iXX, const matrix B)
    hhh = 10
    matrix V = Sigma ** iXX
    chk = B[1:hhh,1] ~ sqrt(diag(V[1:hhh, 1:hhh]))
    strings pnames = array(hhh)
    loop i = 1..hhh -q
        pnames[i] = sprintf("chk%d", i)
    endloop
    modprint chk pnames
end function 

# -------------------------------

function scalar get_n_exotic(const bundle mod)
    n_exotic = 0
    if inbundle(mod, "exoticSR") 
        n_exotic = nelem(mod.exoticSR.checks)
    endif
    return n_exotic
end function

# ----------------------------------

function void rot_redraw(bundle *b, const bundle mod, bool DO_BAYES, 
                         const matrix B,
                         const matrix iXX )

    if DO_BAYES
        matrices Mats = drawnormwis(iXX, B, mod.Sigma, b.T) # was b.df
        matrix b.B = Mats[1]
        matrix b.Sigma = Mats[2]
    endif
    
    matrix b.rot = qrdecomp(mnormal(mod.n, mod.n))

end function 

# -----------------------------------

function matrices prepAis(const bundle mod, const matrix shocks)

    nshocks = rows(shocks)
    matrices Ais = array(nshocks)
    loop i = 1..nshocks --quiet
        matrix Ais[i] = selifr(mod.SRest, mod.SRest[,6] .= shocks[i])
    endloop
    return Ais 
end function 

# -----------------------------------

function matrix get_id_mat (const bundle mod, const matrix shocks,
                            const matrices irfs, const matrices Ais,
                            bool DO_NORM)
    # (removed redundant nshocks arg)

    nshocks = rows(shocks)
    matrix id_matrix = zeros(nshocks, mod.n)
    loop i = 1..nshocks --quiet
        id_matrix[i,] = check_irfs(irfs, Ais[i])
    endloop

	if DO_NORM
        # printf "Before normalization:\n%6.0f\n", id_matrix
        id_matrix = normalize(id_matrix)
        # printf "After normalization:\n%6.0f\n", id_matrix
    endif

    return id_matrix
end function

# --------------------------------------


###
### functions for shock identification/normalization
###

function matrix correspondence(const matrix A)
    # Tag: sign restriction apparatus

    # this function checks for a possible way to couple
    # shocks with observables, given the "candidate" matrix A
    
    nr = rows(A)
    nc = cols(A)
    if nr == 0
        return {}
    endif
    
    r = 1
    c = 0
    x = 0
    loop while r <= nr --quiet
        matrix candidate = A[r,]
        matrix z = !(candidate .= 0)
        if sumr(z) == 1
            # candidate is ok
            scalar x = selifc(candidate, z) 
            scalar c = selifc(seq(1,nc), z) 
            break
        endif
        r++
    endloop
    
    if c>0
        matrix rest = correspondence(A[-r, -c])
        if rows(rest) > 0
            rest[,1] += rest[,1] .>= r
            rest[,2] += rest[,2] .>= c
        endif
    else
        matrix rest = {}
    endif
    
    return {r, c, x} | rest
end function

function matrix normalize(const matrix A)
    # Tag: sign restriction apparatus
    # this function is for normalizing the "candidate" matrix A
    # (-- TODO: maybe rename this function, to avoid confusion
    # with the normalize option in the SVAR model bundle!?)
    
    matrix U = correspondence(A)
    matrix ret = zeros(rows(A), cols(A))
    loop i = 1..rows(U) --quiet
        r = U[i,1]
        c = U[i,2]
        if c != 0
            x = U[i,3]
            ret[r,c] = x
        endif
    endloop
    return selifr(ret, maxr(abs(ret)) .> 0)
end function

function matrix check_one_irf(matrices M, matrix spec,
                              int verbose[0])
    # Tag: sign restriction apparatus
    # This function will return a row vector with elements
    # that are either:
    #  1 if the corresponding column satifies the bounds
    # -1 if column satifies the bounds after a sign change
    #  0 if the bounds condition isn't met

    n = cols(M[1])
    h = nelem(M)
    vndx = spec[1] # always matrix?

    # reshape IRFs so as to have columns as candidates
    matrix tmp = mshape(flatten(M)[vndx,], n, h)'

    # consider only selected rows
    matrix sel = seq(spec[4], spec[5])
    tmp = tmp[sel,]
    Max = maxc(tmp)
    Min = minc(tmp)

    scalar lo = spec[2]
    scalar hi = spec[3]

    noflip = (Min .> lo) && (Max .< hi) # shocks that respect the bounds
    flip = (Max .< -lo) && (Min .> -hi) # shocks that need to be flipped
    ret = noflip - flip

    if verbose
        print tmp
	if verbose > 1
            print lo hi
            print Min Max
	endif
        print noflip flip ret
    endif

    return ret
end function

function matrix check_irfs(matrices M, matrix A, int verbose[0])
    # Tag: sign restriction apparatus

    # Here we examine the constraints on the IRFs we return a vector
    # indicating if all the constraints contained in the matrix A are
    # satisfied; each row of A contains
    #
    # 1    : ordinal no of variable to check
    # 2, 3 : bounds (NA for +-infty)
    # 4, 5 : IRF interval to check (0-based)
    #
    # It may happen that the IRFs are ok up to a sign swap; we flag this
    # case by setting the corresponding column to -1

    n = cols(M[1])
    rA = rows(A)
    # check consistency

    matrix chks = zeros(rA, n)
    loop i = 1..rA --quiet
        chks[i,] = check_one_irf(M, A[i,], verbose)
    endloop

    if verbose
        print chks
    endif
    
    matrix positives = minc(chks) .= 1
    matrix negatives = maxc(chks) .= -1

    return positives - negatives

end function

function scalar check_id(matrix id)
    # Tag: sign restriction apparatus

    # Here we check if the sign check restriction allow us to
    # form a coherent set of IRFs for the problem at hand
    #
    # the input matrix is has r rows and c columns, where r is the
    # number of shocks we want to identify and c is the number
    # of variables in the system; note that r can be smaller
    # than c for partially identified models; for example, in Uhlig
    # (2005) KME, c = 6 but r = 1 (the monetary policy shock)
    #
    # id can only contain 0s, 1s and -1s; therefore, for completely
    # identified models, we just check if "id" is a proper orthogonal
    # matrix; for partially identified models, we need to make sure
    # that we have only one non-zero entry for each row, and that
    # the rank of id is r.

    r = rows(id)
    c = cols(id)

    if r < c
        # partial identification
        ret = (rank(id) == r) && minc(sumr(abs(id)) .= 1) == 1
    else
        ret = maxc(abs((id'id) - I(r))) < 1.0e-15
    endif

    return ret
end function 
