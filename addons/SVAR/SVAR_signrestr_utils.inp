# Utility functions for the sign restriction method in SVAR.
# (Later could probably merged into SVAR_utils.inp)


#############################

function void SVAR_SRresetalpha(bundle *Smod, scalar alpha[0:1:])
    # Public convenience function to implement the hack described
    # previously in fn 33 of the SVAR doc; allows to redefine
    # the confidence band coverage level after getting the draws.

    errorif( !inbundle(Smod, "acc_draws"), "no accepted draws found")

    if Smod.SRcoveralpha == alpha
        print "Warning: desired coverage level already active"
    else
        Smod.SRcoveralpha = alpha
    endif

    bundle newIrfdata = IRF_plotdata(Smod.acc_draws, Smod.SRcoveralpha)
    matrix Smod.SRlo_cb    = newIrfdata.lo_cb
    matrix Smod.SRhi_cb    = newIrfdata.hi_cb

    # are the following two actually necessary or shouldn't
    # their contents really be the same before and after?
    matrix Smod.SRirfmeans = newIrfdata.irfSRmeans
    matrix Smod.SRirfmeds  = newIrfdata.irfSRmeds
end function

# ------------------------------

function void putIrf_to_accdraw(bundle *SVARobj, int whichdraw[0::0] )
    # Only for SR (type 10)
    # to transfer the IRFs to the old format

    errorif( SVARobj.type != 10, "this function only for SR type")
    errorif( !inbundle(SVARobj, "acc_draws"), "need accepted draws (acc_draws)")

    n = SVARobj.n
    h = SVARobj.horizon + 1
    bundle pickdraw = SVARobj.acc_draws[whichdraw]

    matrix IRFs = zeros(h, n*n)
    loop ix = 1..h
        IRFs[ix, ] = vec(pickdraw.irfs[ix])'
    endloop

    # copy to origin
    matrix SVARobj.acc_draws[whichdraw].IRFs = IRFs

end function

# ------------------------------

function matrices muVARparE_mayberedr(const bundle Smod, matrix Bofonedraw[null])
    # Retrieves all the quantities that perhaps are redrawn
    # in the Bayesian set id case:
    # - mu: exog. coeffs, B[1:k , ]
    # - VARpar: autoregr. coeffs, B[k+1: ,]
    # - E: residuals

    redrawn = 0

    if Smod.type == 10
        if Smod.DO_BAYES && !exists(Bofonedraw)
            funcerr "Need redrawn matrix input for Bayesian set id case"
        elif Smod.DO_BAYES
            redrawn = 1
        endif
    endif

    if !redrawn
        # old standard cases
        matrix mu = Smod.mu
        matrix VARpar = Smod.VARpar
        matrix resids = Smod.U    # original residuals

    else
        # need to use the resids associated with re-drawn coefficients
        matrix mu = Bofonedraw[1 : Smod.k ,]
        matrix VARpar = Bofonedraw[Smod.k + 1 : ,]
        matrix resids = Smod.Y[Smod.p + 1 : ,] - Smod.mreg * Bofonedraw
    endif

    return defarray(mu, VARpar, resids)
end function

# ------------------------------

function void errchkSRhisto(bundle *Smod, int drawix)
    if !inbundle(Smod, "bestdraw")
        funcerr "Model not properly initialized for SR type"
    elif !Smod.bestdraw && !drawix
        funcerr "Need to pick one particular draw (run SVAR_SRgetbest?)"

    elif !Smod.storeSRirfs
        funcerr "Need accepted draws content (acc_draws) in set-id case"

    elif drawix > nelem(Smod.acc_draws)
        printf "Only %d accepted draws exist\n", nelem(Smod.acc_draws)
        funcerr "Draw index out of range"
    endif

end function

function void errmsgshockmatch(const matrix pos, string sname)
    if nelem(pos) != 1
        printf "You don't have a shock named %s in your model.\n", sname
        print " (or several ones)"
        funcerr "Specify correct and unique shock names"
    endif
end function

# ------------------------------

function void safetycheck1(const matrix Sigma, const matrix chol_iXX, const matrix B)
    hhh = 10
    matrix V = Sigma ** (chol_iXX * chol_iXX')
    chk = B[1:hhh,1] ~ sqrt(diag(V[1:hhh, 1:hhh]))
    strings pnames = array(hhh)
    loop i = 1..hhh
        pnames[i] = sprintf("chk%d", i)
    endloop
    modprint chk pnames
end function

# -------------------------------

function scalar get_n_exotic(const bundle mod)
    n_exotic = 0
    if inbundle(mod, "exoticSR")
        n_exotic = nelem(mod.exoticSR.checks)
    endif
    return n_exotic
end function

# ----------------------------------
function matrix rand_rotation(scalar n, const matrix sel)

    # we assume here that sel is a row vector containing
    # unique numbers in the range from 1 to n
    scalar nk = cols(sel)
    if nk == 0
        matrix ret = qrdecomp(mnormal(n, n))
    else
        matrix ret = I(n)
        ret[sel, sel] = qrdecomp(mnormal(nk, nk))
    endif

    return ret
end function

# ----------------------------------

function void rot_redraw(bundle *b, const bundle mod, bool DO_BAYES,
                         const matrix B,
                         const matrix chol_iXX,
                         const matrix rotate_only)

    if DO_BAYES
        # with the previous version of drawnormwis, was:
        # matrices Mats = drawnormwis(iXX, B, mod.Sigma, b.df) 
        matrices Mats = drawnormwis(chol_iXX, B, mod.Sigma, b.df) 
        matrix b.B = Mats[1]
        matrix b.Sigma = Mats[2]
    endif

    matrix C = DO_BAYES ? cholesky(b.Sigma) : mod.C
    if nelem(b.zc) == 0
        # no zero restrictions
        matrix b.rot = rand_rotation(mod.n, rotate_only)
    else
        matrix b.rot = const_orth(b.zc, C)
    endif

    if strlen(getenv("NO_AUTONORM")) == 0
        # identification: set main diagonal of instantaneous IRF
        # to positive numbers
        C = C * b.rot
        b.rot = b.rot .* sgn(diag(C))'
    endif

end function

# -----------------------------------
# unneeded any more?

# function matrices prepAis(const bundle mod, const matrix shocks)

#     nshocks = rows(shocks)
#     matrices Ais = array(nshocks)
#     loop i = 1..nshocks
#         matrix Ais[i] = selifr(mod.SRest, mod.SRest[,6] .= shocks[i])
#     endloop
#     return Ais
# end function

# -----------------------------------

function matrix get_id_mat (const bundle mod, const matrix shocks,
                            const matrices irfs, const matrices Ais,
                            bool DO_NORM)

    VERB = 0
    nshocks = rows(shocks)
    matrix id_matrix = zeros(nshocks, mod.n)
    loop i = 1..nshocks
        if VERB
            printf "=========================================\n"
            printf "IRF check for shock %d \n", i
            printf "=========================================\n"
        endif
        id_matrix[i,] = check_irfs(irfs, Ais[i], VERB)
    endloop

    if VERB
        printf "=========================================\n"
        printf "id_matrix = \n%4d\n", id_matrix
        printf "=========================================\n"
    endif

    if DO_NORM
        id_matrix = normlizA(id_matrix)
    endif

    return id_matrix
end function

# --------------------------------------

###
### functions for shock identification/normalization
###

function matrix sr_correspondence(const matrix A)
    # Tag: sign restriction apparatus

    # this function checks for a possible way to couple
    # shocks with observables, given the "candidate" matrix A

    nr = rows(A)
    nc = cols(A)
    if nr == 0
        return {}
    endif

    r = 1
    c = 0
    x = 0
    loop while r <= nr
        matrix candidate = A[r,]
        matrix z = !(candidate .= 0)
        if sumr(z) == 1
            # candidate is ok
            scalar x = selifc(candidate, z)
            scalar c = selifc(seq(1,nc), z)
            break
        endif
        r++
    endloop

    if c>0
        matrix rest = sr_correspondence(A[-r, -c])
        if rows(rest) > 0
            rest[,1] += rest[,1] .>= r
            rest[,2] += rest[,2] .>= c
        endif
    else
        matrix rest = {}
    endif

    return {r, c, x} | rest
end function

function matrix normlizA(const matrix A)
    # Tag: sign restriction apparatus
    # this function is for normalizing the "candidate" matrix A
    # (was normalize, but could be confused with the user option)

    matrix U = sr_correspondence(A) # not to confuse U with the residuals...
    matrix ret = zeros(rows(A), cols(A))
    loop i = 1..rows(U)
        r = U[i,1]
        c = U[i,2]
        if c != 0
            x = U[i,3]
            ret[r,c] = x
        endif
    endloop
    return selifr(ret, maxr(abs(ret)) .> 0)
end function

function matrix check_one_irf(matrices M, matrix spec,
                              int verbose[0])
    # Tag: sign restriction apparatus
    # This function will return a row vector with elements
    # that are either:
    #  1 if the corresponding column satifies the bounds
    # -1 if column satifies the bounds after a sign change
    #  0 if the bounds condition isn't met

    scalar n = cols(M[1])
    scalar h = nelem(M)
    scalar vndx = spec[1] # always matrix?

    # reshape IRFs so as to have columns as candidates
    matrix tmp = mshape(flatten(M)[vndx,], n, h)'

    # consider only selected rows
    matrix sel = seq(spec[4], spec[5])
    tmp = tmp[sel,]
    Max = maxc(tmp)
    Min = minc(tmp)

    scalar lo = spec[2]
    scalar hi = spec[3]

    noflip = (Min .> lo) && (Max .< hi) # shocks that respect the bounds
    flip = (Max .< -lo) && (Min .> -hi) # shocks that need to be flipped
    ret = noflip - flip

    if verbose
        printf "irf for variable %d at lags (%d-%d)\n%8.3f\n",
          vndx, spec[4]-1, spec[5]-1, tmp
        if verbose > 1
            print lo hi
            print Min Max
        endif
        print noflip flip ret
    endif

    return ret
end function

function matrix check_irfs(matrices M, matrix A, int verbose[0])
    # Tag: sign restriction apparatus

    # Here we examine the constraints on the IRFs
    # We return a vector
    # indicating if all the constraints contained in the matrix A are
    # satisfied; each row of A contains
    #
    # 1    : ordinal no of variable to check
    # 2, 3 : bounds (NA for +-infty)
    # 4, 5 : IRF interval to check (0-based)
    #
    # It may happen that the IRFs are ok up to a sign swap; we flag this
    # case by setting the corresponding column to -1

    n = cols(M[1])
    rA = rows(A)
    # check consistency

    matrix chks = zeros(rA, n)
    loop i = 1 .. rA
        if verbose
            printf "-----------------------------------------\n"
            printf "Check for constraint no. %d \n", i
            printf "-----------------------------------------\n"
        endif
        chks[i,] = check_one_irf(M, A[i,], verbose)
    endloop

    if verbose
        print chks
    endif

    matrix positives = minc(chks) .= 1
    matrix negatives = maxc(chks) .= -1

    return positives - negatives

end function

function scalar check_id(matrix id, matrix noswap)
    # Tag: sign restriction apparatus

    # Here we check if the sign restrictions allow us to
    # form a coherent set of IRFs for the problem at hand
    #
    # the input matrix has r rows and c columns, where r is the
    # number of shocks we want to identify and c is the number
    # of variables in the system; note that r can be smaller
    # than c for partially identified models; for example, in Uhlig
    # (2005) KME, c = 6 but r = 1 (the monetary policy shock)
    #
    # id can only contain 0s, 1s and -1s; therefore, for completely
    # identified models, we just check if "id" is a proper orthogonal
    # matrix; for partially identified models, we need to make sure
    # that we have only one non-zero entry for each row, and that
    # the rank of id is r.
    #
    # Edit 24-05-2023: in the case of zero constraints, the columns
    # corresponding to zero-constrained shocks should not be swapped

    r = rows(id)
    c = cols(id)

    if r < c
        # partial identification
        ret = (rank(id) == r) && minc(sumr(abs(id)) .= 1) == 1
    else
        ret = maxc(abs((id'id) - I(r))) < 1.0e-15
    endif

    us = nelem(noswap)
    if us
        # print noswap
        # printf "abs(id):\n%7.3f\n", abs(id[noswap,noswap])
        ret = ret && abs(id[noswap,noswap]) == I(us)
    endif
    return ret
end function


### drawnormwis_old() is the old version of the other function below,
## which is functionally equivalent but computationally much less 
## efficient on account that the Cholesky decomposition of iXX needn't
## be in a loop. For the moment, we'll keep it around just in case.

function matrices drawnormwis_old(const matrix iXX, const matrix B,
                                  const matrix Sigma, int T[1::])

    # Draw from a standard Normal-(inverse)-Wishart prior
    # for a multi-equation regression model.
    #
    # iXX:  K x K matrix (X'X)^{-1} (same for all equations!)
    #       (in a VAR context gretl provides this as $xtxinv)
    # B:    matrix of purely data-based estimates (max-lik)
    # Sigma: cross-equation covariance matrix of innovations
    # T:    number of observations

    K = rows(B)
    N = cols(B) # how many equations

    # some checks
    errorif( K != rows(iXX),  "Coeff and data matrix dims don't match")
    errorif( N != rows(Sigma), "Coeff and Cov matrix dims don't match")

    matrix Sigma_draw = iwishart(Sigma*T, T)
    matrix V = Sigma_draw ** iXX
    matrix C = cholesky(V)
    matrix B_draw = vec(B)

    B_draw += C * mnormal(K * N, 1)
    B_draw = mshape(B_draw, K, N)

    return defarray(B_draw, Sigma_draw)
end function


function matrices drawnormwis (const matrix chol_iXX,
                               const matrix B,
                               const matrix S,
                               scalar df)

    # Draw from a standard Normal-(inverse)-Wishart prior
    # for a multi-equation regression model.
    #
    # iXX:  K x K matrix, wholding the Cholesky decomposition of
    #       (X'X)^{-1} (same for all equations!)
    #       (in a VAR context gretl provides this as $xtxinv)
    # B:    mean of the normal variates
    # S:    cross-equation covariance matrix of innovations
    # df:   degrees of freedom for the Wishart distribution

    scalar n = rows(S)
    scalar npar = rows(chol_iXX)
    matrix Sdraw = iwishart(S * df, df)
    matrix C = cholesky(Sdraw)
    matrix alpha_draw = chol_iXX * (mnormal(npar, n) * C') + B
    
    return defarray(alpha_draw, Sdraw)
end function

###
### functions pertaining to mixed (sign- and 0-restriction) models
###

function matrix add_zero_constr(bundle mod, const matrix shocks, bundle *rotinfo)

    # Create the matrix array for zero restrictions if necessary and
    # stick it into the model bundle. The return matrix holds the indices
    # of shocks with at least one zero restriction so that they don't get
    # rotated afterwards in check_id()

    matrix zc_shocks = {}

    if rows(mod.Rd1)
        err = 0
        matrices zc = xtr_blockdg_const(mod.Rd1, &err)
        errorif(err > 0, "zero constraints malformed!")

        loop i = 1 .. nelem(zc)
            if nelem(zc[i]) && contains(i, shocks)
                zc_shocks ~= i
            endif
        endloop
    else
        matrices zc = array(0)
    endif

    rotinfo.zc = zc
    return zc_shocks
end function

function matrices xtr_blockdg_const(const matrix Rd, scalar *err)

    # this function translates a constraints matrix in the "traditional" format
    # into an array of per-shock restrictions (needed for the mixed
    # identification routine)

    scalar n = sqrt(cols(Rd)-1)
    matrices ret = array(n)
    if maxc(abs(Rd[,end]))
        printf "non-homogeneous constraints not allowed!\n"
        err = 1
    else
        p = rows(Rd)
        n2 = n*n
        loop i = 1 .. p
            Ri = mshape(Rd[i, 1:n2], n, n)
            chk = sumc(abs(Ri))
            # no cross-shock constraints allowed
            candidate = imaxr(chk)
            if maxr(chk[-candidate])>0
                printf "cross-shock constraints not allowed!\n"
                err = 2
                break
            else
                ret[candidate] = ret[candidate] | Ri[, candidate]'
            endif
        endloop
    endif

    return ret
end function

function matrix rank_restr(const matrices R)
    # this produces a vector (used in const_orth()) which lists
    # which columns of Q are constrained; elements are ranked so
    # that the "most constrained" columns come first

    matrix m = {}
    loop i = 1 .. nelem(R)
        p = rows(R[i])
        if p
            m |= {i, -p}
        endif
    endloop

    m = msortby(m, 2)
    return m[,1]
end function

function matrix const_orth(const matrices constraints, const matrix C)
    # this function produces an orthonormal matrix Q such that
    # K = QC
    # satisfies the constraints embodied in the matrix array "constraints"

    DBG = 0
    n = rows(C)
    matrix Q = I(n)
    matrix done = {}

    # we sort the constraints array to process the "most stringent"
    # ones first
    matrix to_do = rank_restr(constraints)
    scalar k = rows(to_do)

    loop j = 1 .. k
        i = to_do[j]
        matrix R = constraints[i]
        if DBG
            print i R
        endif
        if nelem(done) == 0
            matrix S = nullspace(R*C)
        else
            # was:
            # S = intersect(nullspace(R*C), nullspace(Q[,done]'))
            matrix S = nullspace((R*C) | Q[,done]')
        endif
        if DBG
            printf "RC =\n%12.4f", (R*C)'
            print done S
        endif

        if nelem(S) == 0
            print done
            printf "No intersection at step %d!!!\n", i
            printf "Q[,done] =\n%12.4f", Q[,done]
            return {}
        endif

        if cols(S) == 1
            S = S ./ sqrt(S'S)
        endif
        matrix qi = S * mnormal(cols(S), 1)
        Q[,i] = qi ./ sqrt(qi'qi)
        done ~= i
    endloop

    if DBG
        print Q
    endif

    matrix H = nullspace(Q[,done]')
    if cols(H) == 1
        H = H ./ sqrt(H'H)
    endif
    matrix Qq = qrdecomp(mnormal(n-k,n-k))
    # print Q H Qq

    Q[,-done] = H*Qq
    return Q
end function
