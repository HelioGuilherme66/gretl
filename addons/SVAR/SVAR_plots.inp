function scalar check_bounds(int s, int v, int n)
    # negative s is allowed and means to flip the shock

    if abs(s) > n || (s == 0)
        return 1

    elif (v > n) || (v < 1)
        return 2
    endif

    return 0
end function

/* ---------------------------------------------------------------------- */
/* --- IRF core graphing function --------------------------------------- */
/* ---------------------------------------------------------------------- */

function string IRFgrph(matrix IRFmat, int snum, int vnum, scalar scale, \
                        string sname, string vname, int keypos[0:2:1], \
                        matrix *cumul[null],  bundle *boot[null], \
                        int bc[0:2:0])

    # bc: bias correction choice

    scalar flip = (snum < 0)
    scalar snum = abs(snum)
    scalar n = round(sqrt(cols(IRFmat)))

    if exists(boot)
        scalar bootrep = boot.rep
        scalar alpha = boot.alpha
    else
        scalar bootrep = 0
    endif

    # anything to cumulate?
    scalar cumulate = exists(cumul) ? sumr(sumc(cumul .= vnum)) > 0 : 0

    scalar tmpfname = int(1000*muniform(1,1))
    string tmpfile = $windows ? sprintf("@dotdir\\irf%d.gp", tmpfname) : \
      sprintf("@dotdir/irf%d.gp", tmpfname)

    scalar k = (snum-1)*n + vnum

    scalar h = rows(IRFmat)
    matrix x = flip ? -IRFmat[,k]./scale : IRFmat[,k]./scale	# matrix?
    if bootrep > 0
        matrix hicb = flip ? -boot.lo_cb : boot.hi_cb	# matrix?
        matrix locb = flip ? -boot.hi_cb : boot.lo_cb
        matrix mdn  = flip ? -boot.mdns : boot.mdns
        matrix locb = locb[,k] ./ scale
        matrix hicb = hicb[,k] ./ scale
        matrix mdn  = mdn[,k]  ./ scale
        scalar miny = minc((locb | x))
        scalar maxy = maxc((hicb | x))
    else
        scalar miny = minc(x)
        scalar maxy = maxc(x)
    endif

    scalar miny = (miny>0) ? 0 : miny
    scalar maxy = (maxy<0) ? 0 : maxy

    set force_decpoint on

    outfile "@tmpfile" --write
    printf "set yrange [%g:%g]\n", miny*1.05, maxy*1.05
    printf "set xrange [%g:%g]\n", 0, (h-1)*1.05
    printf "set xzeroaxis\n"

    string l_sname = sname=="" ? sprintf("%d", snum) : sname
    string l_vname = vname=="" ? sprintf("%d", vnum) : vname

    printf "set title \"IRF: %s -> %s", l_sname, l_vname

    if bc == 1
        printf "; bias-correction = partial"
    elif bc == 2
        printf "; bias-correction = full"
    endif

    if cumulate > 0
        printf " (cumulated)"
    endif

    printf "\"\n"

    if bootrep > 0
        if keypos == 0
            printf "set key off\n"
        elif keypos == 1
            printf "set key outside\n"
        elif keypos == 2
            printf "set key below\n"
        endif
        printf "set style fill solid 0.125\n"
        printf "plot '-' using 1:2:3 w filledcurve t "
		printf "'Bstrap %d%% CI', \\\n", floor(100*alpha)
        printf "'-' w l lw 1 lc 1 t 'Bstrap median', \\\n"
        printf "'-' w l lw 2 lc -1 t 'IRF'\n"
        loop i=1..h -q
            printf "%d\t%g\t%g\n", i-1, locb[i,], hicb[i,]
        endloop
        printf "e\n"
        loop i=1..h -q
            printf "%d\t%g\n", i-1, mdn[i,]
        endloop
        printf "e\n"
    else
        printf "plot '-' w l lw 2\n"
    endif

    loop i=1..h -q
        printf "%d\t%g\n", i-1, x[i]
    endloop
    printf "e\n"
    outfile --close
    set force_decpoint off

    return tmpfile
end function

/* ---------------------------------------------------------------------- */
/* --- IRF public graphing functions ------------------------------------ */
/* ---------------------------------------------------------------------- */

function void IRFsave(string outfilename, bundle *obj, int snum,
                      int vnum, int keypos[0:2:1])

    # negative snum is allowed and means to flip the shock

    # copy and prepare some input
    string tmpfile, tmpout
    n = obj.n
    matrix IRFmat  = obj.IRFs
    scale = 1	# possibly changed later
    if obj.normalize == 1
        matrix tmp = mshape(IRFmat[1,], n, n)
    endif

    if obj.nboot
        boot = obj.bootdata	# bundle?
        bc = boot.biascorr
    endif

    scalar sfrom sto vfrom vto
    is_srange = range(snum, n, &sfrom, &sto)
    is_vrange = range(vnum, n, &vfrom, &vto)

    # cycle through all (selected) shocks and variables
    loop snum = sfrom..sto -q
        # do checks
        err = check_bounds(snum, 1, n)
        if err == 1
            printf "Shock number %d out of bounds\n", abs(snum) 
            # (abs because of flipping)
            return
        endif

        string sn = obj.snames[abs(snum)]
        # normalization / scaling
        if obj.normalize == 1
            scale = tmp[abs(snum), abs(snum)]
        endif

        loop vnum = vfrom..vto -q
            # do checks
            err = check_bounds(1, vnum, n)
            if err == 2
                printf "Variable number %d out of bounds\n", vnum
                return
            endif

            string yn = obj.Ynames[vnum]

            # produce plots
            if obj.ncumul == 0
                if obj.nboot == 0
                    tmpfile = IRFgrph(IRFmat, snum, vnum, scale, sn, yn, keypos)
                else
                    tmpfile = IRFgrph(IRFmat, snum, vnum, scale, sn, yn, keypos, \
                                      null, &boot, bc)
                endif
            else
                matrix cumul = obj.cumul
                if obj.nboot == 0
                    tmpfile = IRFgrph(IRFmat, snum, vnum, scale, sn, yn, keypos, \
                                      &cumul)
                else
                    tmpfile = IRFgrph(IRFmat, snum, vnum, scale, sn, yn, keypos, \
                                      &cumul, &boot, bc)
                endif
            endif

            if (outfilename == "display") || (sfrom == sto && vfrom == vto) 
                # (single plot, no indices)
                tmpout = outfilename
            else
                strings be = basename(outfilename)	# gives 2-elem array
                if is_vrange	 # several v indices
                    if is_srange # several s indices
                        tmpout = sprintf("%s_%d%d.%s", be[1], snum, vnum, be[2])
                    else
                        tmpout = sprintf("%s_%d.%s", be[1], vnum, be[2])
                    endif
                elif is_srange 	# several s indices
                    tmpout = sprintf("%s_%d.%s", be[1], snum, be[2])
                else
                    funcerr "shouldn't happen"
                endif
            endif
            gnuplot --input="@tmpfile" --output="@tmpout"
        endloop
    endloop

end function

function void IRFplot(bundle *obj, int snum, int vnum, int keypos[0:2:1])

    IRFsave("display", &obj, snum, vnum, keypos)

end function

/* ---------------------------------------------------------------------- */
/* --- FEVD core graphing function -------------------------------------- */
/* ---------------------------------------------------------------------- */

function string FEVDgrph(matrix FEVDmat, scalar v,
                         string vname, strings snames, int keypos[0:2:1])

    n = round(sqrt(cols(FEVDmat)))
    h = rows(FEVDmat) - 1

    scalar tmpfname = int(10000*muniform(1,1))
    if $windows
        sprintf datfile "@dotdir\\fevd%d.txt", tmpfname
        sprintf tmpfile "@dotdir\\fevd%d.gp", tmpfname
    else
        sprintf datfile "@dotdir/fevd%d.txt", tmpfname
        sprintf tmpfile "@dotdir/fevd%d.gp", tmpfname
    endif

    matrix sel = (v-1)*n + seq(1,n)
    set force_decpoint on

    outfile "@tmpfile" --write
    if keypos == 0
        printf "set key off\n"
    elif keypos == 1
        printf "set key outside\n"
    elif keypos == 2
        printf "set key below\n"
    endif
    printf "set yrange [0:100]\n"
    printf "set xrange [%g:%g]\n", 0, h
    printf "set xzeroaxis\n"

    printf "set title \"FEVD for %s\"\n", vname
    printf "set style fill solid 0.25\n"
    printf "set style histogram rowstacked\n"
    printf "set style data histogram\n"

    loop i=1..n --quiet
        string sname = snames[i]

        if i == 1
            printf "plot '%s' using 2 t '%s', \\\n", datfile, sname
        elif i == n
            printf "\t'' using %d t '%s'\n", i+1, sname
        else
            printf "\t'' using %d t '%s', \\\n", i+1, sname
        endif
    endloop
    outfile --close

    outfile "@datfile" --write
    printf "%12.4f\n", seq(0, h)' ~ 100*FEVDmat[,sel]
    outfile --close

    set force_decpoint off

    return tmpfile
end function


/* ---------------------------------------------------------------------- */
/* --- FEVD public graphing functions ----------------------------------- */
/* ---------------------------------------------------------------------- */

function void FEVDsave(string outfilename, bundle *obj, int vnum[0], \
                       int keypos[0:2:1])

    scalar n = obj.n
    scalar vfrom vto
    is_vrange = range(vnum, n, &vfrom, &vto)
    matrix Fmat = FEVD(&obj)

    loop vnum = vfrom..vto -q
        err = check_bounds(1, vnum, n)
        if err == 2
            printf "Variable number %d out of bounds\n", vnum
            return
        endif

        string tmpout = (outfilename == "display") ? "display" : \
                        sprintf("%s_%d", outfilename, vnum)
        string tmpfile = FEVDgrph(Fmat, vnum, obj.Ynames[vnum], obj.snames, keypos)
        gnuplot --input="@tmpfile" --output="@tmpout"

    endloop
end function

function void FEVDplot(bundle *obj, int vnum[0], int keypos[0:2:1])

    FEVDsave("display", &obj, vnum, keypos)

end function

/* ---------------------------------------------------------------------- */
/* --- HD public graphing functions ------------------------------------- */
/* ---------------------------------------------------------------------- */

function void HDsave(string outfilename, bundle *obj, int vnum[0])

    # more fashionable (=Dynare-like) style

    # Interpret vnum==0 as meaning "all 1..n"
    scalar n = obj.n
    scalar vfrom vto
    is_vrange = range(vnum, n, &vfrom, &vto)

    loop vnum = vfrom..vto -q
        err = check_bounds(1, vnum, n)
        if err == 2
            printf "Variable number %d out of bounds\n", vnum
            return
        endif

        list tmp = SVAR_hd(&obj, vnum)
        tmp -= tmp[1] # take away deterministic component
        loop i=1..nelem(tmp) --quiet
            string sn = obj.snames[i]
            setinfo tmp[i] --graph-name="@sn"
        endloop

        series tmpvar = sum(tmp)
        string gnam = sprintf("%s (stoch. component)", obj.Ynames[vnum])
        setinfo tmpvar --graph-name="@gnam"
        tmp = tmpvar tmp	# put the line with the target var name first

        string tmpout = (outfilename == "display") ? "display" : \
                        sprintf("%s_%d", outfilename, vnum)
        plot tmp
            option time-series
            option single-yaxis
            option with-boxes
            option with-lines=tmpvar
            printf "set title \"HD for %s\"", obj.Ynames[vnum]
        end plot --output="@tmpout"
    endloop
end function

function void HDplot(bundle *obj, int vnum[0])

    HDsave("display", &obj, vnum)

end function

/* ---------------------------------------------------------------------- */
/* --- GUI hook --------------------------------------------------------- */
/* ---------------------------------------------------------------------- */

function void GUI_plot(bundle *b, int ptype[0:2:0] \
                       "Plot type" {"IRF", "FEVD", "Historical decomposition"})

    if ptype == 0
        IRFplot(&b, 0, 0) # all in one go

    elif ptype == 1
        FEVDplot(&b, 0)

    elif ptype == 2
        HDplot(&b, 0)
    endif

end function
