function matrices SampleMatrices(matrix Ra, matrix da, matrix Rb, matrix db)
/*
   Returns an array with A and B evaluated at a random point
   in the parameter space (useful for checking the constraint
   matrices).

   Parameters: Ra, da, Rb, db = constraint matrices;
    */

    n = sqrt(cols(Ra | Rb))
    matrices ret

    matrix tmp = imp2exp(Ra ~ da)
    if cols(tmp) > 1
        tmp *= muniform(cols(tmp)-1,1) | 1
    endif
    ret += mshape(tmp,n,n)

    matrix tmp = imp2exp(Rb ~ db)
    if cols(tmp) > 1
        tmp *= muniform(cols(tmp)-1,1) | 1
    endif
    ret += mshape(tmp,n,n)

    return ret
end function

# ----------------------------------------------------------------------------

function matrix Dtn(int n)
/*
   Creates the matrix \tilde{D}_n.

   Output has n^2 rows and n*(n-1)/2 columns; any (n x n) skewsymmetric
   matrix has a vectorised form which lies in the space spanned by the
   columns of \tilde{D}_n
    */

    p = round(n*(n-1)/2)

    matrix A = zeros(1,n) | (lower(unvech(seq(1,p)')) ~ zeros(n-1,1))
    matrix B = zeros(n^2,p)
    matrix C

    loop i = 1..p 
        C = A.=i
        B[,i] = vec(C .- C')
    endloop

    return B
end function

# ----------------------------------------------------------------------------

function matrix Umat(int n, matrix R, matrix d, matrix S)

    # See Lucchetti(2006) -- left-hand side of matrix T;
    # see eq. 26 on page 248

    p = cols(S)
    matrix ret = {}
    loop i = 1..p 
        ret |= R * (mshape(S[,i],n,n)' ** I(n))
    endloop
    return ret
end function

function matrix Tmat(int n, matrix R, matrix d, matrix S)

    # See Lucchetti(2006) -- right-hand side of matrix T;
    # see eq. 26 on page 248

    p = cols(S)
    matrix ret = {}
    loop i = 1..p 
        ret |= R * (I(n) ** mshape(S[,i],n,n))
    endloop
    return ret
end function


# ----------------------------------------------------------------------------

function scalar strucond(int n, matrix Ra, matrix da,
                         matrix Rb, matrix db, int verbose[0])
    /*
       Checks the structure condition and optionally
       prints out some of the relevant matrices:

       Parameters: Ra, da, Rb, db = constraint matrices;
       iprint = output mode:
    */

    matrix Sa = imp2exp(Ra~da)
    matrix Sb = imp2exp(Rb~db)

    if verbose > 1
        print Ra da Rb db Sa Sb
    endif

    matrix Ua = Umat(n,Ra,da,Sa)
    matrix Ub = Umat(n,Rb,db,Sb)
    matrix Tb = Tmat(n,Rb,db,Sb)

    if verbose > 1
        print Ua Ub Tb
    endif

    matrix C = Ua ~ zeros(rows(Ua),(n*(n-1)/2))
    C |= Ub ~ Tb * Dtn(n)
    if verbose > 1
        print C
    endif

    /* purge zero rows from C */
    matrix e = maxr(abs(C)) .> 0
    C = selifr(C,e)
    if verbose > 1
        printf "After filtering zero rows, C is %d x %d\n", rows(C), cols(C)
    endif

    matrix CC = C'C
    if verbose > 1
        print CC
    endif

    d = det(CC)
    if d == 0
        matrix nspace = nullspace(CC)
        u_rank = cols(nspace)
        if verbose
            loop i = 1..u_rank 
                printf "Q_%d = \n", i
                printf "%6.1f", mshape(nspace[1:n*n,i],n,n)
                printf "H_%d = \n", i
                printf "%6.1f", mshape(Dtn(n) * nspace[n*n+1:,i],n,n)
            endloop
        endif
    endif

    return (d > 0)
end function

# ----------------------------------------------------------------------------

function scalar ordercond(int n, matrix Ra, matrix Rb,
                          int verbose[0])
    /*
       Checks the order condition and optionally
       prints out some of the relevant matrices:

       Parameters: Ra, Rb = constraint matrices;
       iprint = output mode:
    */

    p = 2*n*n - (n + 1)*n/2

    if verbose > 0
        print  "Checking order condition:"
        printf " no. of constraints on A:\t%d\n", rows(Ra)
        printf " no. of constraints on B /or C:\t%d\n", rows(Rb)
        printf " no. of total constraints:\t%d\n", rows(Ra) + rows(Rb)
        printf " no. of necessary constraints:\t%d\n", p
    endif

    return rank(Ra)+rank(Rb) >= p
end function

# ----------------------------------------------------------------------------

function scalar rankcond(int n, matrix Ra, matrix da, matrix Rb, matrix db,
                         int verbose[0])
    /*
       Checks the rank condition as per Amisano-Giannini and optionally
       prints out some of the relevant matrices:

       Parameters: Ra, da, Rb db, = constraint matrices;

       Note that in fact we check for the existence of solutions to
       the system given in eq. (9), chapter 4. The condition discussed later
       (matrix Q) is, sadly, wrong.
    */

    matrices AB = SampleMatrices(Ra, da, Rb, db)
    matrix A = AB[1]
    matrix B = AB[2]

    matrix BB = B*B'

    matrix Q11 =  Ra * (A' ** BB)
    matrix Q21 = -Rb * (B' ** BB)
    matrix Q22 = Q21 * Dtn(n)
    matrix Q = (Q11 ~ zeros(rows(Ra), n*(n-1)/2)) | (Q21 ~ Q22)
    scalar r = rank(Q)

    if verbose > 1
        loop foreach m Q11 Q21 Q22 Q 
            printf "\n$m:\n%7.2f", $m
        endloop
    endif

    if verbose > 0
        print  "Checking rank condition:"
        printf " r = %d, cols(Q) = %d\n", r, cols(Q)
    endif

    return r == cols(Q)
end function

# ----------------------------------------------------------------------------

function scalar ident(bundle *mod, int verbose[0])
    # signature was: matrix *Ra, matrix *da, matrix *Rb, matrix *db, int verbose[0]
    /*
       Main function for checking identification.
       
       The function also rewrites the 'fullRd' matrix to the mod if empty,
       and adds or overwrites 'cleanfullRd' or 'Rd0' and 'Rd1' 
       if redundant restrictions are found.

       The algorithm is described fully in Lucchetti (2006),
       "Identification Of Covariance Structures", Econometric
       Theory, Cambridge University Press, vol. 22(02), p 235-257.
       (currently partly unused due to some issues, work in progress) 

       The Ra, da, Rb, db  constraint matrices are constructed from mod.Rd0, 
         mod.Rd1 and oher ingredients if long-run constraints play a role 
         (in C and SVEC models). 

       Return value 0 means: no identification (check failed).
    */
       
    n2 = mod.n * mod.n
     
    if mod.type == 3 # AB - Model
        matrix Ra = mod.Rd0[, 1:n2] # restrictions on A
        matrix da = mod.Rd0[, n2+1]
        matrix Rb = mod.Rd1[, 1:n2] # restrictions on B
        matrix db = mod.Rd1[, n2+1]
        
        # check the constraints on A for inconsistencies
        # and/or redundancies
        # (for B further down, along with C)
        err = CheckNormalizeRd(&Ra, &da)
        if err == 1
            printf "--Contradictory constraints on A!--\n"
            return 0
            
        elif err == 2
            if verbose
                print "Warning: redundant constraints on A, dropping some."
            endif
            mod.Rd0 = Ra ~ da
        endif
         
    else             # plain, C-model or SVEC
        if !nelem(mod.fullRd)
            matrix mod.fullRd = get_full_Rd(&mod, 0) 
            if !nelem(mod.fullRd) 	# possible only for C model?
                funcerr "No restrictions specified!"
            endif
        endif               

        matrix Rb = mod.fullRd[, 1:n2]
        matrix db = mod.fullRd[, n2+1]
        matrix Ra = I(n2)	# just needed as a dummy below
        matrix da = vec(I(mod.n))

        if mod.type == 4    # special SVEC check
            if verbose
                print " (The identification check for SVEC models is work in"
                print "  progress. Be careful especially when loadings alpha"
                print "  are restricted.)"
            endif
            transshockcheck(mod)  # based on Luetkepohl 2008
        endif    
    endif   

    # check the constraints on B and C (respectively) for inconsistencies
    # and/or redundancies
    err = CheckNormalizeRd(&Rb, &db)
    if err == 1
        printf "--Contradictory constraints on B (or C, respectively)!--\n"
        return 0
    elif err == 2
        if verbose
            print "Warning: redundant constraints on B (or C), dropping some."
        endif
        if mod.type == 3
            mod.Rd1 = Rb ~ db
        else
            matrix mod.cleanfullRd = Rb ~ db
        endif
    endif

    # removed redundant calc: n = round(sqrt(cols(Ra | Rb)))

    /* check for the order condition */

    scalar id_o = ordercond(mod.n, Ra, Rb, verbose)
    if verbose
        string printout = id_o ? "OK" : "fails!"
        printf "=> Order condition %s\n", printout
    endif

    # /* check for the structure condition */

    # scalar id_s = strucond(n, locRa, locda, locRb, locdb, verbose)
    # string printout = id_s ? "OK" : "fails!"
    # printf "Structure condition %s\n", printout

    /* check for the rank condition */

    scalar id_r = rankcond(mod.n, Ra, da, Rb, db, verbose)
    if verbose
        string printout = id_r ? "OK" : "fails!"
        printf "=> Rank condition %s\n\n", printout
    endif

    return (id_o && id_r)
end function

# -------------- public function -------------------------------------

function scalar SVAR_ident(bundle *b, int verbose[0])

    /* Apparently returns a non-zero number if identification holds.
    (Coming from ident(); Which is perhaps against convention, 
    usually 0 for "no error"?)
    */

	if verbose
	    print "Check for identification"
    	print "------------------------"
    	print " (It may happen that in special circumstances under-"
    	print "  identification goes unnoticed. If estimation fails,"
    	print "  perhaps try adding restrictions.)"
	endif 

    n2 = b.n * b.n

    if verbose        
        printf "\nConstraints in implicit form:\n"
        if b.type == 3
            printf " Ra: %4.0f", b.Rd0[,1:n2]
            printf " da_T: %4.0f", b.Rd0[,n2+1]'
            printf " Rb: %4.0f", b.Rd1[,1:n2]
            printf " db_T: %4.0f", b.Rd1[,n2+1]'

        else    # The A restrictions are trivial and confusing here.
            matrix b.fullRd = get_full_Rd(&b, 0)
            # (maybe change get_full_Rd so that it saves its result directly in the model 
            #  bundle, just like it does with C1...)
    
            printf " Rc: %4.0f", b.fullRd[,1:n2]  
            printf " dc_T: %4.0f", b.fullRd[,n2+1]'
        endif
        printf "\n"
    endif

    ret = ident(&b, verbose) # was: &Ra, &da, &Rb, &db, verbose)

    return ret
end function
