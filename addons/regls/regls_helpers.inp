# get MSE and R^2

function matrix regls_get_stats (const series y, const series yhat)
   scalar SSR = sum((y - yhat)^2)
   scalar SST = sum((y - mean(y))^2)
   matrix ret = {SSR/$nobs, 1 - SSR/SST}
   cnameset(ret, "MSE R^2")
   return ret
end function

function scalar regls_pc_correct (const series y, const series yhat)
   series yr = round(yhat)
   return 100 * sum(yr == y) / $nobs
end function

# get prediction from glmnet, plus non-zero coeff vector

function series glmnet_pred (matrix *Rb, list X)
   matrix sel = Rb .!= 0
   Rb = selifr(Rb, sel)
   matrix mRX = X
   list RX = selifr(mRX', sel)
   rnameset(Rb, varnames(RX))
   return lincomb(RX, Rb)
end function

# construct a fixed folds vector for use with glmnet

function matrix regls_foldvec (int nobs, int nf)
   matrix foldvec = zeros(nobs, 1)
   scalar fsize = nobs / nf
   scalar r = 1
   loop i=1..nf -q
      foldvec[r:r+fsize-1] = i
      r += fsize
   endloop
   return foldvec
end function

# print summary statistics when multiple lambda values are used

function void regls_multiprint (const matrix B, const matrix lambda,
                                const series y, list X,
                                const matrix crit[null])

   if exists(crit)
      printf "\n       lambda     R^2    sum(|b|)   df   criterion\n"
   else
      printf "\n       lambda     R^2    sum(|b|)   df\n"
   endif
   scalar haveconst = 0
   if rows(B) == nelem(X) + 1
      haveconst = 1
   elif rows(B) != nelem(X)
      funcerr "B and X are not conformable"
   endif
   loop i=1..cols(B) -q
      if haveconst
         matrix bi = B[2:,i]
         series yhat = lincomb(X, bi) + B[1,i]
      else
         matrix bi = B[,i]
         series yhat = lincomb(X, bi)
      endif
      scalar l1 = sumc(abs(bi))
      scalar df = sumc(bi .!= 0)
      m = regls_get_stats(y, yhat)
      R2 = m[2]
      if R2 < 0 && R2 > -1.0e16
         # avoid printing -0.0000
         R2 = 0
      endif
      if exists(crit)
         printf "%#13g  %.4f  %#10g  %3d  %#10g\n", lambda[i], R2, l1, df, crit[i]
      else
         printf "%#13g  %.4f  %#10g  %3d\n", lambda[i], R2, l1, df
      endif
   endloop
   printf "\n"
end function

# compute fitted values

function series regls_yhat (const bundle b, list X)
   series yhat
   if inbundle(b, "nzX")
      yhat = lincomb(b.nzX, b.nzb)
   else
      if b.stdize
         X = const X
      endif
      yhat = lincomb(X, b.b)
   endif
   return yhat
end function

# report training-data R-squared after cross validation

function void training_R2 (bundle *b, series y, list X)
   series yhat = regls_yhat(b, X)
   matrix m = regls_get_stats(y, yhat)
   printf "training data R-squared = %.3f\n\n", m[2]
   b.training_R2 = m[2]
end function

function list outer_series_id (const string arg)
   list L = null
   loop i=1..$nvars
      catch string vname = varname(i)
      if !$error && varname(i) == arg
         L = {i}
         break
      endif
   endloop
   return L
end function
