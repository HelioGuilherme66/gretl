function strings make_xnames (int n)
   strings S = array(n)
   loop i=1..n
      S[i] = sprintf("x%d", i)
   endloop
   return S
end function

function bundle mregls (const matrix y, const matrix X,
                        const bundle parms[null])
   scalar nlam = 1
   scalar timer = 0
   matrix lfrac = {}
   scalar rank = $mpirank
   matrix bsel = {}
   matrix mx = {}
   matrix sx = {}
   scalar my sy
   scalar elnet = 0
   scalar gui = 0
   string yname

   if (cols(y) != 1 || rows(y) == 0 || rows(X) != rows(y))
      funcerr "Invalid y and/or X input"
   endif

   if !exists(parms)
      # an empty bundle will do
      bundle parms = null
   endif

   # initialize the return bundle
   bundle ret = regls_ret_init(1)

   err = check_params(parms, &lfrac, &nlam, &ret)
   if err
      funcerr "invalid or missing parameter(s)"
   endif

   # read optional parameters
   read_optional_params(parms, &ret, &gui, &elnet)

   if ret.stdize
      matrix ys = s_standardize(y, &my, &sy)
      matrix Xs = m_standardize(X, &mx, &sx)
   endif

   scalar ret.nobs = rows(X)
   if nelem(lfrac) > 0
      matrix ret.lfrac = vec(lfrac)
   endif

   string ret.estimator = elnet ? "Elastic net" : \
     ret.ridge ? "Ridge" : "LASSO"

   if ret.verbosity > 0 && rank <= 0
      yname = argname(y, "y")
      print_regls_header(ret, nlam, elnet, yname)
   endif

   # call plugin C code
   if rank <= 0 && timer
      set stopwatch
   endif
   if ret.stdize
      err = _regls(Xs, ys, ret)
   else
      err = _regls(X, y, ret)
   endif
   if err
      funcerr "_regls failed"
   endif
   if rank <= 0 && timer
      string mode = ret.ccd ? "CCD" : ret.ridge ? "SVD" : "ADMM"
      printf "_regls (%s): %.3f seconds\n", mode, $stopwatch
   endif

   if !ret.xvalidate && ret.verbosity > 0 && inbundle(ret, "BIC")
      BIC_print(ret, nlam)
   endif

   if rank > 0
      # MPI, and not root
      return ret
   endif

   strings xnames = cnameget(X)
   if nelem(xnames) == 0
      xnames = make_xnames(cols(X))
   endif
   if ret.stdize
      xnames = defarray("const") + xnames
   endif
   finalize_coeff_matrices(&ret, xnames, mx, sx, my, sy, &bsel)

   if !ret.ridge && nelem(bsel) > 0
      tmp = selifr(seq(1, cols(X))', bsel)
      matrix ret.nzX = tmp # check this
      rnameset(ret.nzb, xnames[bsel])
   endif

   if ret.verbosity > 1
      if inbundle(ret, "vcv")
         regls_modprint(ret, xnames)
      elif nlam == 1
         nz_print(ret, 1)
      elif nlam > 1 && ret.verbosity > 2
         nz_print(ret, nlam)
      endif
      if ret.xvalidate && ret.verbosity > 2
         mregls_training_R2(&ret, y, X)
      endif
   endif

   if inbundle(ret, "verbosity")
      delete ret.verbosity
   endif
   regls_set_notes(&ret)

   return ret
end function
