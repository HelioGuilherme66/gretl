# regls plotting functions

function void regls_fcast_plot (const series y, const series yhat,
                                const bundle b)
   string tmpname
   scalar x0 = min(yhat)
   scalar x1 = max(yhat)
   scalar xd = 0.025 * (x1 - x0)
   x0 = (x0 >= 0 && x0 - xd < 0)? 0 : x0 - xd
   x1 += xd
   set force_decpoint on
   outfile --tempfile=tmpname --quiet
      printf "set title 'actual vs predicted %s (%s)'\n", b.depvar, b.estimator
      printf "set xlabel 'predicted'\n"
      printf "set ylabel 'actual'\n"
      printf "set key left top\n"
      printf "set xrange [%g:%g]\n", x0, x1
      printf "plot '-' using 1:2 title '' w p, \\\n"
      printf " x title 'actual = predicted' w l\n"
      print yhat y --data-only
      printf "e\n"
   end outfile
   set force_decpoint off
   gnuplot --input="@tmpname" --output=display
   remove(tmpname)
end function

function void regls_mse_plot (const bundle b)
   matrix M = b.XVC[,1] ~ b.lfrac
   matrix B = b.XVC
   scalar ymin = 0.95 * minc(b.XVC[,1] - b.XVC[,2])
   scalar ymin = ymin < 0 ? 0 : ymin
   scalar x0 = b.lfrac[b.idxmin]
   scalar y0 = M[b.idxmin,1]
   string lspec0 = "front center point pt 8 ps 2"
   scalar x1 = b.lfrac[b.idx1se]
   scalar y1 = M[b.idx1se,1]
   string lspec1 = "front center point pt 6 ps 2"
   plot M
      options with-lp band=B band-style=dash fit=none
      literal set termoption enhanced
      printf "set yrange [%g:1]", ymin
      literal set xlabel 's = λ/λ_{max}'
      literal set ylabel 'MSE'
      printf "set xrange [1:%g]", minc(b.lfrac)
      literal set logscale x
      printf "set label \"\" at %g,%g %s", x0, y0, lspec0
      printf "set label \"\" at %g,%g %s", x1, y1, lspec1
      literal set title 'Mean cross-validation MSE with one-s.e. band'
   end plot --output=display
end function

function void regls_bic_plot (const bundle b)
   matrix M = b.BIC ~ b.lfrac
   scalar ymin = minc(b.BIC)
   scalar ymax = maxc(b.BIC)
   scalar ymargin = 0.05 * (ymax - ymin)
   ymin -= ymargin
   ymax += ymargin
   scalar x0 = b.lfrac[b.idxmin]
   scalar y0 = b.BIC[b.idxmin]
   string lspec = "front center point pt 8 ps 2"
   plot M
      options with-lp fit=none
      literal set termoption enhanced
      printf "set xrange [1:%g]", minc(b.lfrac)
      printf "set yrange [%g:%g]", ymin, ymax
      literal set xlabel 's = λ/λ_{max}'
      literal set ylabel 'BIC'
      literal set logscale x
      printf "set label \"\" at %g,%g %s", x0, y0, lspec
      literal set title 'BIC as a function of s'
   end plot --output=display
end function

function void regls_knot_plot (const bundle b, const matrix sel[null])
   matrix B = b.B
   strings colheads = rnameget(B)
   if exists(sel)
      colheads = colheads[sel]
      matrix B = B[sel,]
   elif colheads[1] == "const"
      colheads = colheads[2:]
      matrix B = B[2:,]
   endif
   colheads += "lfrac"
   matrix Bs = B' ~ b.lfrac
   cnameset(Bs, colheads)
   scalar x0 = b.lfrac[b.idxmin]
   string est = b.ridge ? "Ridge" : "LASSO"
   plot Bs
      options with-lp single-yaxis fit=none
      literal set termoption enhanced
      literal set xlabel 's = λ/λ_{max}'
      literal set key outside right noenhanced
      printf "set xrange [1:%g]", minc(b.lfrac)
      literal set logscale x
      literal set style arrow 1 nohead dt 2
      printf "set arrow 1 from %g, graph 0 to %g, graph 1", x0, x0
      literal set arrow 1 as 1
      printf "set title '%s coefficients as a function of s'", est
   end plot --output=display
end function

function void regls_bundle_plot (const bundle *b, int unused[0],
                                 const matrix sel[null])
   regls_knot_plot(b, sel)
end function
