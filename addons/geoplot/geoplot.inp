include geoplot_utils.inp

# public
function bundle geoplot_describe_json (const bundle jb, int verbose[1])

    # as per RFC 7946, "The GeoJSON Format"

    bundle ret = null

    matrix bbox = get_bbox(jb)
    if rows(bbox) == 0
        printf "No bounding box\n"
    else
        printf "%d-dimensional bounding box\n", rows(bbox)
    endif
    ndim = rows(bbox)
    ret.bbox = bbox

    bundles feat = jb.features
    nf = nelem(feat)
    printf "%d features\n", nf
    ret.nf = nf

    bundle ids = null

    loop i = 1 .. nf
        props = feat[i].properties
	
        if i == 1
            ids = create_ids(props, nf, verbose)
        endif
	
        fill_ids(props, &ids, i)

        if verbose
	    describe_feature(feat[i], i)
        endif
    endloop

    ret.ids = ids
    return ret
end function

# public
function void geoplot_translate_feature(bundle *b, int f,
                                        matrix shift,
                                        matrix center[null],
                                        matrix scale[null])
    if exists(center)
        center = vec(center)
    else
        center = {0;0}
    endif
    if exists(scale)
        scale = vec(scale)
    else
        scale = {1;1}
    endif
    shift = vec(shift)
    scalar single = b.features[f].geometry.type == "Polygon"
    arrays mod = b.features[f].geometry.coordinates
    loop i=1..nelem(mod)
        loop j=1..nelem(mod[i])
            if single
                ctmp = scale .* (mod[i][j] - center)
                mod[i][j] = ctmp + center + shift
            else
                loop k=1..nelem(mod[i][j])
                    ctmp = scale .* (mod[i][j][k] - center)
                    mod[i][j][k] = ctmp + center + shift
                endloop
            endif
        endloop
    endloop
    b.features[f].geometry.coordinates = mod
end function

function void geoplot_set_properties (bundle *b, list L)
    strings keys = varnames(L)
    loop i=1..nelem(b.features)
        bundle bpi = null
        loop foreach j L
            bpi[keys[j]] = L.$j[i]
        endloop
        b.features[i].properties = bpi
    endloop
end function

function matrix geoplot_seek_feature(const bundle b,
                                     string name,
                                     bool do_plot[1])

    bundles feat = b.features
    nf = nelem(feat)
    matrix found = {}
    scalar nfound = 0
    strings where = array(0)
    loop i = 1 .. nf
        bundle prop_i = feat[i].properties
        strings keys = sort(getkeys(prop_i))
        loop j = 1 .. nelem(keys)
            type = inbundle(prop_i, keys[j])
            if type == 4
                if instring(tolower(prop_i[keys[j]]), tolower(name))
                    found = found ~ i
                    nfound++
                    where = where + defarray(keys[j])
                    break
                endif
            endif
        endloop
    endloop

    if nfound == 0
        printf "\"%s\" not found\n", name
    elif nfound == 1
        f = feat[found[1]]
        extents = describe_feature(f, 0, 0)
        string key = where[1]
        string cont = f.properties[key]

        if do_plot
            plot_feature(b, found[1], cont, extents)
        endif
    else
        loop i = 1 .. nfound
            k = found[i]
            string key = where[i]
            string cont = feat[k].properties[key]
            printf "Feature %4d: \"%s\" = %s\n", found[i], key, cont
        endloop
    endif

    return found
end function


function void geoplot_simplify(bundle *b, 
                               scalar preserve[0.1:1:0.75])
    
    feat = b.features
    set stopwatch
    loop i = 1 .. nelem(feat)
        feat[i] = simplify_feature(feat[i], preserve)
    endloop
    printf "Simplification took %g seconds\n", $stopwatch
    flush
    b.features = feat
end function
