topsrc = @top_srcdir@
datarootdir = @datarootdir@

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@
CC = @CC@
CFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@
SSE2_OPT = @SSE2_CFLAGS@
OMP_OPT = @OPENMP_CFLAGS@
MAKE = @MAKE@
INSTALL = @INSTALL@
LN = @LN_S@
have_readline = @have_readline@
have_sourceview = @have_sourceview@
have_zlib = @have_zlib@
quiet_build = @quiet_build@
pkg_build = @pkg_build@
fake_gtkspinner = @fake_gtkspinner@
mac_native = @mac_native@

GTK_CFLAGS = @GTK_CFLAGS@
GTK_LIBS = @GTK_LIBS@
GDK_PIXBUF_CFLAGS = @GDK_PIXBUF_CFLAGS@
GDK_PIXBUF_LIBS = @GDK_PIXBUF_LIBS@
GTKSOURCEVIEW_CFLAGS = @GTKSOURCEVIEW_CFLAGS@
GTKSOURCEVIEW_LIBS = @GTKSOURCEVIEW_LIBS@
XML_CFLAGS = @XML_CFLAGS@
XML_LIBS = @XML_LIBS@
USE_NLS = @USE_NLS@
CARBONLIB = @CARBONLIB@
GTKMAC_CFLAGS = @GTKMAC_CFLAGS@
GTKMAC_LIBS = @GTKMAC_LIBS@
MKLANG = @MKLANG@

GRETL_LANG = gretl.lang
GNUPLOT_LANG = gnuplot.lang

ifeq ($(have_sourceview),3.0)
  svprefix = $(shell pkg-config --variable=prefix gtksourceview-3.0)
  langdir = $(svprefix)/share/gtksourceview-3.0/language-specs
endif

ifeq ($(have_sourceview),2.0)
  svprefix = $(shell pkg-config --variable=prefix gtksourceview-2.0)
  langdir = $(svprefix)/share/gtksourceview-2.0/language-specs
endif

# override for packaging with DESTDIR
ifneq ($(DESTDIR),)
  svnum = $(have_sourceview)
  langdir = $(prefix)/share/gtksourceview-$(svnum)/language-specs
endif

# override for building Windows and OS X packages
ifeq ($(pkg_build),yes)
  langdir = $(prefix)/share/gretl/gtksourceview
endif

ifeq ($(CC),)
  CC = gcc
endif
ifeq ($(INSTALL_PROGRAM),)
  INSTALL_PROGRAM = $(INSTALL) -m 755
endif
ifeq ($(INSTALL_DATA),)
  INSTALL_DATA = $(INSTALL) -m 644
endif
ifeq ($(LN),)
  LN = ln -sf
endif

GRETLLIB = ../lib/libgretl-1.0.la
LIBS = $(GTKSOURCEVIEW_LIBS) $(GTK_LIBS) $(GTKMAC_LIBS) $(GRETLLIB)
GUI_CFLAGS = $(GTK_CFLAGS) $(GTKSOURCEVIEW_CFLAGS) $(GTKMAC_CFLAGS)

ifeq ($(USE_NLS),yes)
  datadir = @datadir@
  localedir = $(datadir)/locale
  NLSDEF = -DLOCALEDIR=\"$(localedir)\"
endif

ifeq ($(MKLANG),) 
  MKLANG = ./mklang
endif

ifeq ($(quiet_build),yes)
  AMP = @
  CCECHO = @echo "  CC    $@"
  LDECHO = @echo "  LD    $@" 
  CCV = $(CC) $(SSE2_OPT) $(OMP_OPT) > /dev/null
else
  CCV = $(CC) $(SSE2_OPT) $(OMP_OPT)
endif

DEFS = $(NLSDEF)

# Directories
bindir	= $(prefix)/bin
gretldir = $(prefix)/share/gretl
uidir = $(prefix)/share/gretl/ui
tooldir = $(topsrc)/tools
libsrc = $(topsrc)/lib/src
clisrc = $(topsrc)/cli
docdir = $(topsrc)/doc

LANGDEPS = $(libsrc)/options.c \
           $(libsrc)/genlex.c \
           $(libsrc)/gretl_commands.c

override CFLAGS += -I.. -I$(libsrc) $(GUI_CFLAGS) \
	$(GDK_PIXBUF_CFLAGS) $(XML_CFLAGS) $(DEFS)
override LIBS += $(GDK_PIXBUF_LIBS)

#### End of system configuration section. ####

SHELL = /bin/sh
LIBTOOL = ../libtool
ifeq ($(mac_native),yes)
  PROG = gretl_quartz
else
  PROG = gretl_x11$(EXEEXT)
endif

vpath %.c $(topsrc)/gui2
vpath %.h $(topsrc)/gui2

SRCS = about.c \
	calculator.c \
	callbacks.c \
	clipboard.c \
	cmdstack.c \
	console.c \
	database.c \
	datafiles.c \
	datawiz.c \
	dialogs.c \
	dlgutils.c \
	filelists.c \
	fileselect.c \
	filters.c \
	fncall.c \
	fnsave.c \
	graphics.c \
	graph_page.c \
	gpt_control.c \
	gpt_dialog.c \
	gretl.c \
	guiprint.c \
	gui_recode.c \
	gui_utils.c \
	helpfiles.c \
	lagpref.c \
	library.c \
	menustate.c \
	model_table.c \
	objectsave.c \
	obsbutton.c \
	selector.c \
	series_view.c \
	session.c \
	settings.c \
	ssheet.c \
	tabwin.c \
	textbuf.c \
	textutil.c \
	toolbar.c \
	treeutils.c \
	update.c \
	varinfo.c \
	winstack.c

# use back-ported gtkspinner code?
ifeq ($(fake_gtkspinner),yes)
  SRCS += spinner.c
endif

OBJS = $(SRCS:.c=.o)

HACK_SRC = gtkfontselhack.c fontfilter.c
HACK_HDR = gtkfontselhack.h fontfilter.h
HACK_OBJ = gtkfontselhack.o fontfilter.o

all: $(PROG) $(GRETL_LANG)

%.o: %.c
	$(CCECHO)
	$(AMP)$(CC) -c $(CFLAGS) $<
	$(AMP)$(CC) $(CFLAGS) -MM $< > .deps/$*.d 

$(PROG): .deps $(OBJS) $(HACK_OBJ)
	$(LDECHO)
	$(AMP)$(LIBTOOL) --mode=link $(CCV) $(LDFLAGS) -o $@ $(OBJS) \
	$(HACK_OBJ) $(LIBS) $(CARBONLIB)

$(HACK_OBJ): $(HACK_SRC) $(HACK_HDR)

mklang.o: mklang.c $(LANGDEPS)
	$(AMP)$(CC) $(CFLAGS) -c -I.. -I$(libsrc) $(XML_CFLAGS) $<

mklang: mklang.o $(GRETLLIB)
	$(AMP)$(LIBTOOL) --mode=link $(CCV) $(LDFLAGS) -o $@ $< ../lib/libgretl-1.0.la $(XML_LIBS)

$(GRETL_LANG): $(MKLANG)
	$(MKLANG) > $@

.deps:
	$(AMP)mkdir $@

-include .deps/*.d

.PHONY:

install: install-exec install-ui install-data install-lang

install-strip: $(PROG) install-data
	$(LIBTOOL) --mode=install $(INSTALL_PROGRAM) -s $(PROG) $(DESTDIR)$(bindir)/$(PROG)

install-data: installdirs
	$(INSTALL_PROGRAM) ../gretl_sh $(DESTDIR)$(bindir)/gretl
	$(INSTALL_DATA) $(topsrc)/pixmaps/gretl-logo.xpm $(DESTDIR)$(gretldir)
	$(INSTALL_DATA) $(topsrc)/COPYING $(DESTDIR)$(gretldir)

install-ui: installdirs
	$(INSTALL_DATA) $(topsrc)/gui2/gretlmain.xml $(DESTDIR)$(uidir)
	$(INSTALL_DATA) $(topsrc)/gui2/gretlmodel.xml $(DESTDIR)$(uidir)

install-exec: $(PROG) installdirs 
	$(LIBTOOL) --mode=install $(INSTALL_PROGRAM) $(PROG) $(DESTDIR)$(bindir)/$(PROG)

install-lang: $(GRETL_LANG) installdirs
	$(INSTALL_DATA) $(GRETL_LANG) $(DESTDIR)$(langdir)/gretl.lang
	$(INSTALL_DATA) $(topsrc)/gui2/$(GNUPLOT_LANG) $(DESTDIR)$(langdir)/gnuplot.lang

installdirs:
	$(tooldir)/mkinstalldirs $(DESTDIR)$(bindir) 
	$(tooldir)/mkinstalldirs $(DESTDIR)$(gretldir)
	$(tooldir)/mkinstalldirs $(DESTDIR)$(langdir)
	$(tooldir)/mkinstalldirs $(DESTDIR)$(uidir)

clean:
	rm -f *.o $(PROG) mklang gretl.lang
	rm -rf .libs .deps

distclean: clean
	rm -f Makefile debug

