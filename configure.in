dnl
dnl Process this file with autoconf to produce a configure script.
dnl

AC_INIT(./lib/src/version.h)
AC_PREREQ(2.12)
AC_CONFIG_HEADER(config.h)
AC_CONFIG_AUX_DIR(./tools)

PACKAGE=gretl
VERSION=`grep const ./lib/src/version.h | sed -e 's/^.*"\(.*\)";$/\1/'`
AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE")
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

echo "configuring for $PACKAGE $VERSION"

dnl Variables controlling the gretl build
build_gui="yes"
have_readline="no"
new_readline="no"
have_zlib="no"
have_libxml="no"
have_libole2="no"
have_gtk="no"
have_gtkextra="no"
have_gnome="no"
have_gmp="no"
need_libbind="no"
png_graphics="yes"
MAKE="make"

AM_GNU_GETTEXT([external])

AC_ARG_ENABLE(gui,
[  --enable-gui		  Enable gui [default=yes]],
[if test "$enableval" = "yes"
then
  build_gui=yes
else
  build_gui=no
fi])

AC_ARG_ENABLE(png-graphs,
[  --enable-png-graphs     Enable PNG graph support [default=auto]],
[if test "$enableval" = "yes"
then
  png_graphics=yes
else
  png_graphics=no
  gnuplot_png=no
fi])

AC_ARG_WITH(gmake,
[  --with-gmake           Use GNU make explicitly [default=no]],
[ case "$withval" in
  yes)
        MAKE="gmake"
        ;;
  *)
        ;;
  esac ],
)
AC_SUBST(MAKE)

AC_ARG_WITH(gnome,
[  --with-gnome            Build with gnome support [default=auto]],
if test "x${withval}" = "xno"
then
  trygnome=no
else
  trygnome=yes
fi,
trygnome=yes)

gnome_prefix="NA"
AC_ARG_WITH(gnome_install,
[  --with-gnome-install=DIR  where to install gnome-specific files [default=auto]],
if test -n "${withval}"
then
  gnome_prefix=${withval}
fi,)

AC_ARG_WITH(libole2,
[  --with-libole2   Use installed libole2 [default=auto]],
if test "x${withval}" = "xno"
then
  tryole=no
else
  tryole=yes
fi,
tryole=yes)

AC_ARG_WITH(gmp,
[  --with-gmp   Use Gnu Multiple Precision library [default=auto]],
if test "x${withval}" = "xno"
then
  trygmp=no
else
  trygmp=yes
fi,
trygmp=yes)

gmp_prefix=""
AC_ARG_WITH(gmp-prefix,
[  --with-gmp-prefix=DIR   path to find GMP lib and header [default=/usr]],
if test -n "${withval}"
then
  gmp_prefix=${withval}
fi,)

AC_PROG_CC
dnl AC_CANONICAL_HOST
AC_DEFINE_UNQUOTED(OS_TYPE, "$host_os")
AC_PROG_INSTALL

AC_DISABLE_STATIC
AC_PROG_LIBTOOL

dnl We want these before the checks, so the checks can modify their values.
test -z "$CFLAGS" && CFLAGS= auto_cflags=1
test -z "$CC" && cc_specified=yes

dnl
dnl if the user hasn't specified CFLAGS, then
dnl   if compiler is gcc, then use -O2 and some warning flags
dnl
if test -n "$auto_cflags"; then
  if test -n "$GCC"; then
    CFLAGS="$CFLAGS -Wall"
  fi
fi

AC_PROG_LN_S

AC_CHECK_LIB(m, sin)
AC_CHECK_LIB(c, fopen)

AC_CHECK_LIB(readline, readline,have_readline="yes" ; \
  CLI_LIBS="-lreadline -ltermcap" ; AC_DEFINE(HAVE_READLINE),,-ltermcap)
AC_SUBST(have_readline)
AC_SUBST(CLI_LIBS)
if test "$have_readline" = yes; then
  RL_OBJ="complete.o"
fi
AC_SUBST(RL_OBJ)
AC_CHECK_LIB(readline, rl_completion_matches,new_readline="yes" ; \
  CLI_LIBS="-lreadline -ltermcap" ; AC_DEFINE(NEW_READLINE),,-ltermcap)
AC_SUBST(new_readline)

AC_CHECK_LIB(c, inet_addr,,need_libbind="yes",)
if test "$need_libbind" = yes; then
  AC_CHECK_LIB(bind, inet_addr,,
  AC_MSG_ERROR(Can't find a definition of inet_addr),)
fi
AC_SUBST(need_libbind)

AC_CHECK_LIB(z, gzopen,have_zlib="yes" ; \
  ZLIB="-lz" ; AC_DEFINE(HAVE_ZLIB),,)
AC_SUBST(have_zlib)

XMLCONF=''
AC_DEFUN(AC_LIB_XML,
[AC_CHECK_PROGS(XMLCONF,xml-config xml2-config,)])

AC_LIB_XML
if test x"${XMLCONF}" != x ; then
  have_libxml=yes
  XML_CFLAGS=`$XMLCONF --cflags`
  XML_LIBS=`$XMLCONF --libs`
  AC_SUBST(XML_CFLAGS)
  AC_SUBST(XML_LIBS)
fi

if test x"${png_graphics}" = xyes
then
PIXBUFCONF=''
AC_DEFUN(AC_LIB_PIXBUF,
[AC_CHECK_PROGS(PIXBUFCONF,gdk-pixbuf-config,)])

AC_LIB_PIXBUF
if test x"${PIXBUFCONF}" != x ; then
   PIXBUF_CFLAGS=`$PIXBUFCONF --cflags`
   PIXBUF_LIBS=`$PIXBUFCONF --libs`
   AC_SUBST(PIXBUF_CFLAGS)
   AC_SUBST(PIXBUF_LIBS)
else
   echo
   echo "* gretl wants the gdk-pixbuf library for PNG graphs."
   echo "* You can turn off this dependency by configuring with the "
   echo "* option --disable-png-graphics"
   exit     
fi
fi

if test x"${tryole}" != "xno"
then
  AM_PATH_LIBOLE2(0.2.4)
fi

dnl See if GMP lib is available?
if test x"${trygmp}" != xno ; then
  SAVE_LIBS=$LIBS
  if test x"${gmp_prefix}" != "x" ; then
    GMP_LIBS="-L${gmp_prefix}/lib -lgmp"
    GMP_CFLAGS="-I${gmp_prefix}/include"
    LIBS=$GMP_LIBS
  else
    GMP_LIBS="-lgmp"
    GMP_CFLAGS=""
  fi
  AC_CHECK_LIB(gmp, __gmpf_init,have_gmp="yes" ; \
    AC_DEFINE(ENABLE_GMP),GMP_LIBS=,)
  AC_SUBST(ENABLE_GMP)
  AC_SUBST(GMP_CFLAGS)
  AC_SUBST(GMP_LIBS)
  LIBS=$SAVE_LIBS
fi

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(paths.h unistd.h)
AC_C_CONST

AC_DEFUN(AC_PROG_GNUPLOT,
[AC_CHECK_PROG(GNUPLOT,gnuplot,yes)])

AC_PROG_GNUPLOT
test x"${GNUPLOT}" = xyes && AC_DEFINE(HAVE_GNUPLOT) 
if test x"${GNUPLOT}" = xyes ; then
  have_gnuplot=yes
fi

if test x"${png_graphics}" = xyes ; then
  gnuplot_png=no
  AC_MSG_CHECKING(for PNG support in gnuplot)
  echo "set term png" | `which gnuplot` 2>/dev/null && gnuplot_png=yes
  if test x"${gnuplot_png}" = xyes ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(GNUPLOT_PNG)
  else
    AC_MSG_RESULT(no)
    echo
    echo "* gretl needs PNG support in gnuplot."
    echo "* The current version of gnuplot is available from www.gnuplot.info"
    exit
  fi
fi

AC_DEFUN(AC_PROG_LATEX,
[AC_CHECK_PROG(LATEX,latex,yes)])

AC_PROG_LATEX
test x"${LATEX}" = xyes && AC_DEFINE(HAVE_LATEX)
if test x"${LATEX}" = xyes ; then
  have_latex=yes
fi

if test "$trygnome" = "yes" ; then
  AC_DEFUN(AC_PROG_GNOME,
  [AC_CHECK_PROG(GNOME,gnome-config,yes)])

  AC_PROG_GNOME
  GNOME_CFLAGS=''
  GNOME_LIBS=''
  test x"${GNOME}" = xyes && AC_DEFINE(USE_GNOME)
  if test x"${GNOME}" = xyes ; then
    have_gnome=yes
    if test "${gnome_prefix}" = "NA" ; then
      gnome_prefix="`gnome-config --prefix`"
      GNOME_CFLAGS=`gnome-config --cflags gnomeui print`
      GNOME_LIBS=`gnome-config --libs gnomeui print`
    fi
  fi
  AC_SUBST(have_gnome)
  AC_SUBST(GNOME_CFLAGS)
  AC_SUBST(GNOME_LIBS)
fi

AC_SUBST(gnome_prefix)

AM_PATH_GTK(1.2.3,have_gtk="yes",have_gtk="no")
if test "${have_gtk}" = "no" ; then
   exit
fi
CFLAGS="$CFLAGS $GTK_CFLAGS"
LIBS="$LIBS $GTK_LIBS"
AM_PATH_GTK_EXTRA(0.99.15,have_gtkextra="yes",have_gtkextra="no")
if test "${have_gtkextra}" = "no" ; then
   exit
fi

dnl Determine installation prefix
if test "${prefix}" = "NONE" ; then
   prefix="/usr/local"
fi
AC_DEFINE_UNQUOTED(GRETL, "${prefix}/share/gretl/")

dnl Create output
CFLAGS="$ac_save_CFLAGS"
LIBS="$ac_save_LIBS"
AC_OUTPUT([ 
Makefile 
gretl_sh 
gretl-config 
gui/Makefile
gui/gnome/gretl.keys 
cli/Makefile 
lib/Makefile 
plugin/Makefile
po/Makefile.in 
share/Makefile
])

if test "${have_zlib}" = "no" ; then
echo "
Please install zlib (compression library) and then reconfigure gretl.
zlib is available via http://www.info-zip.org/pub/infozip/zlib/
"

elif test "${have_libxml}" = "no" ; then
echo "
Please install libxml and then reconfigure gretl.
libxml is available from http://xmlsoft.org/
"

else
echo "
Configuration:
  
  Installation path:                    ${prefix}
  Use readline library:                 ${have_readline}
  Use gnuplot for graphs:               ${have_gnuplot}
  Use PNG for gnuplot graphs:           ${gnuplot_png}
  Use LaTeX for typesetting output:     ${have_latex}
  Gnu Multiple precision support:       ${have_gmp}
  Build with gnome support:             ${have_gnome}
  Gnome installation prefix:            ${gnome_prefix}

Now type '$MAKE' to build gretl.
"
fi

