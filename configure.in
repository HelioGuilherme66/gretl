dnl
dnl Process this file with autoconf to produce a configure script.
dnl

AC_INIT(lib/src/version.h)
AC_PREREQ(2.12)
AC_CONFIG_HEADER(config.h)
AC_CONFIG_AUX_DIR($srcdir/tools)

PACKAGE=gretl

VERSION=`grep GRETL_VERSION[^_] $srcdir/lib/src/version.h | sed -e 's/^.*"\(.*\)";$/\1/'`
LIBGRETL_CURRENT=`grep LIBGRETL_CURRENT $srcdir/lib/src/version.h | awk '{ print $NF }'`
LIBGRETL_REVISION=`grep LIBGRETL_REVISION $srcdir/lib/src/version.h | awk '{ print $NF }'`
LIBGRETL_AGE=`grep LIBGRETL_AGE $srcdir/lib/src/version.h | awk '{ print $NF }'`
LIBVERSION="$LIBGRETL_CURRENT.$LIBGRETL_AGE.$LIBGRETL_REVISION"

AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE")
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
AC_DEFINE_UNQUOTED(LIBVERSION, "$LIBVERSION")
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_SUBST(LIBVERSION)

AC_SUBST(LIBGRETL_CURRENT)
AC_SUBST(LIBGRETL_REVISION)
AC_SUBST(LIBGRETL_AGE)

echo "configuring for $PACKAGE $VERSION (library version $LIBVERSION)"

dnl
dnl Variables controlling the gretl build
dnl
build_gui="yes"
build_docs="no"
build_po="no"
have_pkgconfig="no"
have_readline="no"
new_readline="no"
have_zlib="no"
have_gtk="no"
have_gtkprint="no"
have_gtksourceview="no"
have_gnome="no"
have_gmp="no"
have_mpfr="no"
have_lapack="no"
have_fftw3="no"
seek_inet_addr="no"
png_comments="yes"
highlight="yes"
have_tramo="yes"
have_x12a="yes"
have_audio="no"
have_gnu_regex="no"
have_libxml2="no"
use_gtksourceview="no"
have_xslt="no"
MAKE="make"
XML_LIBS=

AC_CHECK_HEADERS(libintl.h,
	try_nls="yes",
	try_nls="no"
)

if test [ "$try_nls" = "yes" ]
then
   AM_GNU_GETTEXT([external])
fi

dnl
dnl Process options supplied to the configure script
dnl
AC_ARG_ENABLE(gui,
[  --enable-gui		      Enable gui [[default=yes]]],
[if test "$enableval" = "yes"
then
  build_gui=yes
else
  build_gui=no
fi])

AC_ARG_ENABLE(png-comments,
[  --enable-png-comments   Enable reading of PNG comment data [[default=auto]]],
[if test "$enableval" = "yes"
then
  png_comments=yes
else
  png_comments=no
fi])

AC_ARG_ENABLE(build-doc,
[  --enable-build-doc      Enable building of gretl docs [[CVS only]]],
[if test "$enableval" = "yes"
then
  build_docs=yes
else
  build_docs=no
fi])

AC_ARG_WITH(gmake,
[  --with-gmake         Use GNU make explicitly [[default=no]]],
[ case "$withval" in
  yes)
        MAKE="gmake"
        ;;
  *)
        ;;
  esac ],
)
AC_SUBST(MAKE)

AC_ARG_WITH(readline,
[  --with-readline      Build with libreadline support [[default=auto]]],
if test "x${withval}" = "xno"
then
  try_readline=no
else
  try_readline=yes
fi,
try_readline=yes)

AC_ARG_WITH(gnome,
[  --with-gnome         Build with gnome support [[default=auto]]],
if test "x${withval}" = "xno"
then
  try_gnome=no
else
  try_gnome=yes
fi,
try_gnome=yes)

gnome_prefix="NA"
AC_ARG_WITH(gnome_install,
[  --with-gnome-install=DIR  where to install gnome-specific files [[default=auto]]],
if test -n "${withval}"
then
  gnome_prefix=${withval}
fi,)

AC_ARG_WITH(gtksourceview,
[  --with-gtksourceview  Use installed gtksourceview [[default=auto]]],
if test "x${withval}" = "xno" || test "$try_gnome" = "no"
then
  try_installed_sourceview=no
else
  try_installed_sourceview=yes
fi,
try_installed_sourceview=yes)

AC_ARG_WITH(gmp,
[  --with-gmp            Use Gnu Multiple Precision library [[default=auto]]],
if test "x${withval}" = "xno"
then
  try_gmp=no
else
  try_gmp=yes
fi,
try_gmp=yes)

AC_ARG_WITH(mpfr,
[  --with-mpfr            Use MPFR library [[default=auto]]],
if test "x${withval}" = "xno"
then
  try_mpfr=no
else
  try_mpfr=yes
fi,
try_mpfr=yes)

AC_ARG_WITH(x-12-arima,
[  --with-x-12-arima     include X-12-ARIMA support [[default=yes]]],
if test "$withval" = "no"
then
  have_x12a="no"
else
  AC_DEFINE(HAVE_X12A)
  HAVE_X12A=1
fi,
AC_DEFINE(HAVE_X12A)
HAVE_X12A=1)
AC_SUBST(HAVE_X12A)

AC_ARG_WITH(tramo-seats,
[  --with-tramo-seats    include TRAMO/SEATS support [[default=yes]]],
if test "$withval" = "no"
then
  have_tramo="no"
else
  AC_DEFINE(HAVE_TRAMO)
  HAVE_TRAMO=1
fi,
AC_DEFINE(HAVE_TRAMO)
HAVE_TRAMO=1)
AC_SUBST(HAVE_TRAMO)

AC_ARG_WITH(audio,
[  --with-audio    include audio graph support (experimental)],
if test "$withval" = "yes"
then
  AC_DEFINE(HAVE_AUDIO)
  HAVE_AUDIO=1
  AC_SUBST(HAVE_AUDIO)
  have_audio=yes
fi,
have_audio=no)

AC_PROG_CC

AC_DEFINE_UNQUOTED(OS_TYPE, "$host_os")
AC_PROG_INSTALL

AC_DISABLE_STATIC
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

dnl We want these before the checks, so the checks can modify their values.
test -z "$CFLAGS" && CFLAGS= auto_cflags=1
test -z "$CC" && cc_specified=yes

dnl
dnl if the user hasn't specified CFLAGS, then
dnl   if compiler is gcc, then use -O2 and some warning flags
dnl
if test -n "$auto_cflags"; then
  if test -n "$GCC"; then
    CFLAGS="$CFLAGS -Wall"
  fi
fi

AC_PROG_LN_S

AC_CHECK_LIB(m, sin)
AC_CHECK_LIB(c, fopen)

dnl Checks for header files, etc.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(unistd.h dirent.h fnmatch.h byteswap.h)
AC_C_CONST
AC_C_LONG_DOUBLE 
AC_CHECK_SIZEOF(int)
AC_TYPE_SIGNAL 
AC_C_BIGENDIAN 

dnl try to build mailer plugin?
AC_CHECK_HEADERS(netdb.h sys/socket.h,
	build_mailer="yes" ; AC_DEFINE(ENABLE_MAILER),
	build_mailer="no"
)

if test "$build_mailer" = "yes" ; then
AC_CHECK_TYPE(struct sockaddr_in, 
  AC_DEFINE(HAVE_SOCKADDR_IN, 1, [Do we have sockaddr_in?]),,
  #include <sys/socket.h>
  #include <netdb.h>
)

AC_CHECK_TYPE(struct in_addr, 
  AC_DEFINE(HAVE_IN_ADDR, 1, [Do we have in_addr?]),,
  #include <sys/socket.h>
  #include <netdb.h>
)
fi

dnl
dnl Check for libreadline for use with gretlcli
dnl
if test "$try_readline" = "yes" ; then
   AM_PATH_READLINE(have_readline="yes", have_readline="no")
fi

dnl
dnl See if we need to do anything special about "inet_addr"
dnl
INETLIB=''
AC_CHECK_LIB(c, inet_addr,,seek_inet_addr="yes",)
if test "$seek_inet_addr" = yes; then
  AC_CHECK_LIB(bind, inet_addr,INETLIB="-lbind",)
  if test "$INETLIB" != "-lbind"; then
    AC_CHECK_LIB(nsl, inet_addr, INETLIB="-lnsl",
    AC_MSG_ERROR(Can't find a definition of inet_addr),)
  fi
fi
AC_SUBST(INETLIB)

dnl
dnl Check for zlib
dnl
AC_CHECK_LIB(z, gzopen,have_zlib="yes" ; \
  ZLIB="-lz" ; AC_DEFINE(HAVE_ZLIB),,)
AC_SUBST(have_zlib)

dnl
dnl See if GMP lib is available
dnl
if test x"${try_gmp}" != xno ; then
  AM_PATH_GMP(4.0.1, have_gmp="yes" ; AC_DEFINE(ENABLE_GMP))
fi

dnl
dnl See if MPFR is available
dnl
if test x"${try_mpfr}" != xno ; then
  AM_PATH_MPFR(2.2.0, have_mpfr="yes" ; AC_DEFINE(HAVE_MPFR))
fi

dnl
dnl Check for LAPACK 
dnl Apple _will_ be different
dnl
LAPACK_CFLAGS="-I${srcdir}/lib/src"
case $host_os in
  *darwin*) 
    LAPACK_LIBS="-Wl,-framework -Wl,vecLib"
    AC_DEFINE(OSX_BUILD)
  ;; 
esac
AM_PATH_LAPACK(, have_lapack="yes")

dnl And while we're at it...
case $host_os in
  *darwin*) 
    CARBONLIB="-Wl,-framework -Wl,Carbon"
    AC_SUBST(CARBONLIB)
  ;; 
esac

dnl
dnl Check for FLITE?
dnl
if test "$have_audio" = "yes" ; then
  AM_PATH_FLITE(, 
    have_flite="yes"
    AC_DEFINE(HAVE_FLITE)
  )
fi

dnl
dnl Check for gnuplot, and its PNG capacity
dnl
AC_DEFUN([AC_PROG_GNUPLOT],
[AC_CHECK_PROG(GNUPLOT,gnuplot,yes)])

AC_PROG_GNUPLOT
test x"${GNUPLOT}" = xyes && AC_DEFINE(HAVE_GNUPLOT) 
if test x"${GNUPLOT}" = xyes ; then
  have_gnuplot=yes
fi

gnuplot_png=no
if test "$build_gui" = "yes" ; then
  AC_MSG_CHECKING(for PNG support in gnuplot)
  echo "set term png" | GNUTERM=dumb `which gnuplot` 2>/dev/null && gnuplot_png=yes
  if test "$gnuplot_png" = yes ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(GNUPLOT_PNG)
  else
    AC_MSG_RESULT(no)
    echo
    echo "* gretl needs PNG support in gnuplot."
    echo "* The current version of gnuplot is available from www.gnuplot.info"
    exit
  fi
fi

dnl
dnl Check for latex executable
dnl
AC_DEFUN([AC_PROG_LATEX],
[AC_CHECK_PROG(LATEX,latex,yes)])

AC_PROG_LATEX
test x"${LATEX}" = xyes && AC_DEFINE(HAVE_LATEX)
if test x"${LATEX}" = xyes ; then
  have_latex="yes"
else
  have_latex="no"
fi

dnl
dnl Preliminary check for pkg-config
dnl
if test -z "$PKG_CONFIG"; then
   AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
fi
if test "$PKG_CONFIG" = "no" ; then
   build_gui="no"
else
   have_pkgconfig="yes"
fi

orig_CFLAGS=$CFLAGS

dnl
dnl fftw3
dnl
if test "$PKG_CONFIG" != "no" ; then
   PKG_CHECK_MODULES(FFTW, fftw3,have_fftw3="yes", have_fftw3="no")
fi

dnl
dnl glib 2.0 (needed even if not building GUI)
dnl
if test "$PKG_CONFIG" != "no" ; then
   PKG_CHECK_MODULES(GLIB, glib-2.0, have_glib2="yes", have_glib2="no")
fi

dnl
dnl Check for GTK 2.0
dnl
if test "$build_gui" = "yes" ; then
    PKG_CHECK_MODULES(GTK, gtk+-2.0 >= 2.4.0,
      CFLAGS="$CFLAGS $GTK_CFLAGS"
      LIBS="$LIBS $GTK_LIBS"
      have_gtk="2.0",
      have_gtk="no"      
    )
fi

dnl
dnl Check for GTK 2.10 or higher
dnl
if test "$have_gtk" = "2.0" ; then
    PKG_CHECK_MODULES(GTKPRINT, gtk+-2.0 >= 2.10.0,
      have_gtkprint="yes",
      have_gtkprint="no"      
    )
fi

dnl ...and try for gtksourceview flags, unless prohibited
if test "$have_gtk" = "2.0" && test "$try_installed_sourceview" = "yes" ; then
   PKG_CHECK_MODULES(GTKSOURCEVIEW, gtksourceview-1.0,
   have_gtksourceview="yes"
   use_gtksourceview="yes"
   AC_DEFINE(USE_GTKSOURCEVIEW),
   have_gtksourceview="no"
   )
fi

dnl Fallback on supplied gtksourceview? Check for libxml2 and gtk >= 2.2.0
if test "$have_gtk" = "2.0" && test "$highlight" = "yes" && \
   test "$have_gtksourceview" = "no" ; then
     PKG_CHECK_MODULES(XML, libxml-2.0 >= 2.5.0,
     have_libxml2="yes",
     have_libxml2="no")
fi

dnl Now try using supplied gtksourceview if preconditions are met
if test "$highlight" = "yes" && \
   test "$have_gtksourceview" = "no" && \
   test "$have_libxml2" = "yes" ; then
     AC_DEFINE(USE_GTKSOURCEVIEW)
     use_gtksourceview="yes"
     AC_CHECK_FUNCS([re_compile_pattern re_compile_fastmap re_search re_match],
     have_gnu_regex="yes",
     have_gnu_regex="no")
fi

if test x"${MSGFMT}" != x ; then
   build_po="yes"
else
   echo "*** msgfmt not found, can't build message catalogs"
fi

dnl record the results of the above tests
AC_SUBST(build_gui)
AC_SUBST(have_gtk)
AC_SUBST(have_gmp)
AC_SUBST(have_mpfr)
AC_SUBST(have_gtksourceview)
AC_SUBST(use_gtksourceview)
AC_SUBST(have_gnu_regex)
AC_SUBST(have_audio)
AC_SUBST(build_mailer)
AC_SUBST(build_po)
AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)
AC_SUBST(GTKSOURCEVIEW_CFLAGS)
AC_SUBST(GTKSOURCEVIEW_LIBS)

dnl
dnl Check for libpng (first with pkg-config, then fallback)
dnl
if test $build_gui = "no" ; then
   png_comments = "no"
fi

if test $png_comments = "yes" ; then
    PKG_CHECK_MODULES(PNG, libpng12,
        png_failed="no",
	png_failed="yes"
   )
fi
if test $png_comments = "yes" && test $png_failed = "yes" ; then
    PKG_CHECK_MODULES(PNG, libpng,
        png_failed="no",
	png_failed="yes"
   )
fi
if test $png_comments = "yes" && test $png_failed = "yes" ; then
   AC_CHECK_LIB(png, png_init_io,png_failed="no",png_failed="yes",-lz)
   PNG_CFLAGS=
   PNG_LIBS="-lz -lpng"
   AC_SUBST(PNG_CFLAGS)
   AC_SUBST(PNG_LIBS)
fi

if test $png_comments = "yes" ; then
  if test $png_failed = "yes" ; then
     echo "*** gretl wants but did not find libpng."
     echo "*** You can turn off this dependency by configuring with the option"
     echo "*** --disable-png-comments"
     exit
  else
    AC_DEFINE(PNG_COMMENTS)
  fi
fi

dnl
dnl Check for gdk-pixbuf support
dnl
if test ${have_gtk} = "2.0" ; then
    PKG_CHECK_MODULES(GDK_PIXBUF, gdk-pixbuf-2.0 >= 0.7.0,
        pixbuf_failed="no",
	pixbuf_failed="yes"
   )
fi
if test ${pixbuf_failed} = "yes" ; then
    echo "* gretl wants but did not find the gdk-pixbuf library for PNG graphs."
    exit
fi

dnl
dnl Check for gnome, if we haven't been told not to
dnl
if test "$build_gui" = "yes" && test "$try_gnome" = "yes" ; then
   if test "${have_gtkprint}" = "no" ; then
     PKG_CHECK_MODULES(GNOME, libgnomeui-2.0 libgnomeprint-2.2 libgnomeprintui-2.2 gconf-2.0,
       AC_DEFINE(USE_GNOME)
       have_gnome="2.0"
       if test "${gnome_prefix}" = "NA" ; then
           gnome_prefix=`pkg-config --variable=prefix libgnome-2.0`
       fi,
       echo "no"
       have_gnome="no"
     )
   else
     PKG_CHECK_MODULES(GNOME, libgnomeui-2.0 gconf-2.0,
       AC_DEFINE(USE_GNOME)
       have_gnome="2.0"
       if test "${gnome_prefix}" = "NA" ; then
           gnome_prefix=`pkg-config --variable=prefix libgnome-2.0`
       fi,
       echo "no"
       have_gnome="no"
     )   
   fi
   if test "$have_gnome" = "2.0" ; then
      PKG_CHECK_MODULES(XML, libxml-2.0 >= 2.5.0)
	 AC_PATH_PROG(GCONFTOOL, gconftool-2, no)
	 if test x"$GCONFTOOL" = xno; then
            AC_MSG_ERROR([gconftool-2 executable not found in your path])
         else
	    AM_GCONF_SOURCE_2
         fi
    fi 
    AC_SUBST(have_gnome)
    AC_SUBST(gnome_prefix)
    AC_SUBST(GNOME_CFLAGS)
    AC_SUBST(GNOME_LIBS)
fi
dnl End of gnome check

dnl If libxml is not already provided by gnome, test for it separately
if test x"${XML_LIBS}" = x ; then
  if test "$have_gtk" = "2.0" ; then
    PKG_CHECK_MODULES(XML, libxml-2.0 >= 2.5.0)
  else 
    XMLCONF=''
    AC_CHECK_PROGS(XMLCONF,xml2-config xml-config,)
    if test x"${XMLCONF}" != x ; then
      XML_CFLAGS=`$XMLCONF --cflags`
      XML_LIBS=`$XMLCONF --libs`
    fi
  fi
fi

dnl Check for libxslt (for the helpfiles)
if test "${build_docs}" = "yes" ; then
  PKG_CHECK_MODULES(XSLT, libxslt >= 1.0.15,	
    have_xslt="yes",
    have_xslt="no"
  )
fi

dnl If building docs was requested, see if we can do it
if test "${build_docs}" = "yes" ; then
   if test "$have_xslt" = "no" || test "$have_latex" = "no" ; then
      build_docs="no"
      echo "*** Can't build gretl docs: XSLT and/or LaTeX not found"
   fi
fi

dnl record the results of the above test
AC_SUBST(build_docs)

dnl record results on various libraries
AC_SUBST(XML_CFLAGS)
AC_SUBST(XML_LIBS)
AC_SUBST(XSLT_CFLAGS)
AC_SUBST(XSLT_LIBS)
AC_SUBST(GDK_PIXBUF_CFLAGS)
AC_SUBST(GDK_PIXBUF_LIBS) 

dnl Determine installation prefix
if test "${prefix}" = "NONE" ; then
   prefix="/usr/local"
fi
AC_DEFINE_UNQUOTED(GRETL_PREFIX, "${prefix}")

dnl Create output
CFLAGS="$orig_CFLAGS"
AC_OUTPUT([ 
Makefile 
gretl_sh
gretl-config
gretl.pc 
gui2/Makefile
gui2/debug
gui2/gtkextra-lite/Makefile
gui2/gtksourceview/Makefile
gui2/omf-install/Makefile
gnome/Makefile
gnome/gretl.keys 
cli/Makefile 
cli/debug
lib/Makefile 
plugin/Makefile
po/Makefile.in 
share/Makefile
share/bcih/Makefile
tests/Makefile
extra/Makefile
redhat/gretl.spec
])

if test "${build_docs}" = "yes" ; then
  AC_OUTPUT([
    doc/Makefile
    doc/commands/Makefile
    doc/tex/Makefile
    doc/tex_it/Makefile
    doc/tex_es/Makefile
  ])
fi

if test "${have_pkgconfig}" = "no" ; then
echo "
Please install pkg-config and then reconfigure gretl.
pkg-config is available from http://www.freedesktop.org/
"

elif test "${have_zlib}" = "no" ; then
echo "
Please install zlib (compression library) and then reconfigure gretl.
zlib is available via http://www.info-zip.org/pub/infozip/zlib/
"

elif test x"${XML_LIBS}" = x ; then
echo "
Please install libxml2 and then reconfigure gretl.
libxml2 is available from http://xmlsoft.org/
"

elif test "${have_lapack}" = "no" ; then
echo "
Please install lapack and then reconfigure gretl.
Lapack is available from http://www.netlib.org/lapack/
"

elif test "${have_fftw3}" = "no" ; then
echo "
Please install fftw3 and then reconfigure gretl.
fftw3 is available from http://www.fftw.org/
"

elif test "${have_glib2}" = "no" ; then
echo "
Please install glib-2.0 and then reconfigure gretl.
glib-2.0 is available from http://www.gtk.org/
"

else
echo "
Configuration:
  
  Installation path:                      ${prefix}
  Use readline library:                   ${have_readline}
  Use gnuplot for graphs:                 ${have_gnuplot}
  Use PNG for gnuplot graphs:             ${gnuplot_png}
  Use LaTeX for typesetting output:       ${have_latex}
  Gnu Multiple Precision support:         ${have_gmp}
  MPFR support:                           ${have_mpfr}
  LAPACK support:                         ${have_lapack}
  FFTW3 support:                          ${have_fftw3}
  Build with GTK version:                 ${have_gtk}
  Script syntax highlighting:             ${use_gtksourceview}
  Use installed gtksourceview:            ${have_gtksourceview}
  Use GTK printing apparatus:             ${have_gtkprint}
  Build with gnome support:               ${have_gnome}
  Build gretl documentation:              ${build_docs}
  Build message catalogs:                 ${build_po}
  Gnome installation prefix:              ${gnome_prefix}
  X-12-ARIMA support:                     ${have_x12a}
  TRAMO/SEATS support:                    ${have_tramo}
  Experimental audio support:             ${have_audio}
  

Now type '$MAKE' to build gretl.
"
fi

