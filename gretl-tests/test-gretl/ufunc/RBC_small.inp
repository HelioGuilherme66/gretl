## Basic RBC model with full depreciation

set echo off
set messages off
set blas_mnk_min 0

function void rbc (void)

    set stopwatch

    ##  1. Calibration

    aalpha = 1/3     # Elasticity of output w.r.t. capital
    bbeta  = 0.95    # Discount factor

    # Productivity values
    vProductivity = {0.9792, 0.9896, 1.0000, 1.0106, 1.0212}

    # Transition matrix
    mTransition   = {0.9727, 0.0273, 0.0000, 0.0000, 0.0000; \
                     0.0041, 0.9806, 0.0153, 0.0000, 0.0000; \
                     0.0000, 0.0082, 0.9837, 0.0082, 0.0000; \
                     0.0000, 0.0000, 0.0153, 0.9806, 0.0041; \
                     0.0000, 0.0000, 0.0000, 0.0273, 0.9727}

    # 2. Steady State

    capitalSteadyState = (aalpha*bbeta)^(1/(1-aalpha))
    outputSteadyState = capitalSteadyState^aalpha
    consumptionSteadyState = outputSteadyState-capitalSteadyState

    printf "Output = %g Capital = %g Consumption = %g\n",
      outputSteadyState, capitalSteadyState, consumptionSteadyState

    # We generate the grid of capital
    # matrix vGridCapital = seq(0.5*capitalSteadyState, 1.5*capitalSteadyState, 0.00001)'
    matrix vGridCapital = seq(0.5*capitalSteadyState, 1.5*capitalSteadyState, 0.001)'

    nGridCapital = nelem(vGridCapital)
    nGridProductivity = nelem(vProductivity)

    # 3. Required matrices and vectors

    mOutput           = zeros(nGridCapital,nGridProductivity)
    mValueFunction    = zeros(nGridCapital,nGridProductivity)
    mValueFunctionNew = zeros(nGridCapital,nGridProductivity)
    mPolicyFunction   = zeros(nGridCapital,nGridProductivity)
    expectedValueFunction = zeros(nGridCapital,nGridProductivity)

    # 4. We pre-build output for each point in the grid

    mOutput = (vGridCapital.^aalpha)*vProductivity

    # 5. Main iteration

    maxDifference = 10.0
    # tolerance = 0.0000001
    tolerance = 0.00001
    iteration = 0

    loop while maxDifference > tolerance -q
        expectedValueFunction = mValueFunction*mTransition'

        loop nProductivity = 1..nGridProductivity -q
        
            # We start from previous choice (monotonicity of policy function)
            gridCapitalNextPeriod = 1
        
            loop nCapital = 1..nGridCapital -q
        
                valueHighSoFar = -1000.0
                capitalChoice  = vGridCapital[1]
            
                loop nCapitalNextPeriod = gridCapitalNextPeriod..nGridCapital -q

                    consumption = mOutput[nCapital,nProductivity]-vGridCapital[nCapitalNextPeriod]
                    valueProvisional = (1-bbeta)*log(consumption)+bbeta*expectedValueFunction[nCapitalNextPeriod,nProductivity]
               
                    if valueProvisional>valueHighSoFar
                	valueHighSoFar = valueProvisional
                	capitalChoice = vGridCapital[nCapitalNextPeriod]
                	gridCapitalNextPeriod = nCapitalNextPeriod
                    else
                	break # We break when we have achieved the max
                    endif
                                 
                endloop
            
                mValueFunctionNew[nCapital,nProductivity] = valueHighSoFar
                mPolicyFunction[nCapital,nProductivity] = capitalChoice
          
            endloop
        
        endloop

        maxDifference  = maxr(maxc(abs(mValueFunctionNew-mValueFunction)))
        mValueFunction    = mValueFunctionNew
        mValueFunctionNew = zeros(nGridCapital,nGridProductivity)

        iteration = iteration+1
        if iteration % 10==0 || iteration==1
            printf " Iteration = %d Sup Diff = %g\n", iteration, maxDifference
        endif
           
    endloop

    printf " Iteration = %d Sup Diff = %g\n\n", iteration, maxDifference
    printf " My check = %g\n", mPolicyFunction[100,3]
    
    printf "elapsed: %g secs\n", $stopwatch

end function

rbc()

