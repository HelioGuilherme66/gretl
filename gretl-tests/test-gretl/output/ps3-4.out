gretl version 2016b-git
Copyright Ramu Ramanathan, Allin Cottrell and Riccardo "Jack" Lucchetti
This is free software with ABSOLUTELY NO WARRANTY
Current session: 2016-04-07 14:09
? run ps3-4.inp
 /opt/esl/share/gretl/scripts/ps3-4.inp
# PS3.4 for Example 3.8 on conf. intervals
? open data3-1

Read datafile /opt/esl/share/gretl/data/data3-1.gdt
periodicity: 1, maxobs: 14
observations range: 1 to 14

Listing 3 variables:
  0) const    1) price    2) sqft   

? ols 1 0 2

Model 1: OLS, using observations 1-14
Dependent variable: price

             coefficient   std. error   t-ratio   p-value 
  --------------------------------------------------------
  const       52.3509      37.2855       1.404    0.1857  
  sqft         0.138750     0.0187329    7.407    8.20e-06 ***

Mean dependent var   317.4929   S.D. dependent var   88.49816
Sum squared resid    18273.57   S.E. of regression   39.02304
R-squared            0.820522   Adjusted R-squared   0.805565
F(1, 12)             54.86051   P-value(F)           8.20e-06
Log-likelihood      -70.08421   Akaike criterion     144.1684
Schwarz criterion    145.4465   Hannan-Quinn         144.0501

# generate predicted price
? genr phat = price - $uhat
Generated series phat (ID 3)
# retrieve the number of obs.
? genr n = $nobs
Generated scalar n = 14
# retrieve degrees of freedom
? genr df = $df
Generated scalar df = 12
# retrieve sigma squared
? genr sgmasq=$ess/df
Generated scalar sgmasq = 1522.8
# get mean of sqft
? genr xbar=mean(sqft)
Generated scalar xbar = 1910.93
# get s.d. of sqft
? genr sdx = sd(sqft)
Generated scalar sdx = 577.757
# reset sample range
? smpl 1 1
Full data range: 1 - 14 (n = 14)
Current sample: 1 - 1 (n = 1)

# calculate sxx
? genr sxx = 13*sdx*sdx
Generated scalar sxx = 4.33944e+06
# other variables for confidence interval calculation
? genr x0 = 2000
Generated scalar x0 = 2000
? genr temp1=((x0-xbar)^2)/sxx
Generated scalar temp1 = 0.00182828
? genr temp2=(temp1+(1/n))
Generated scalar temp2 = 0.0732569
# calculate using equations 3.28 and 3.29
? genr sysq1=sgmasq*temp2
Generated scalar sysq1 = 111.555
? genr sysq2=sgmasq*(1+temp2)
Generated scalar sysq2 = 1634.35
# take square root for standard errors
? genr sy1=sqrt(sysq1)
Generated scalar sy1 = 10.562
? genr sy2=sqrt(sysq2)
Generated scalar sy2 = 40.4271
# predict mean y for x0
? genr ymean0=52.351+(0.13875*x0)
Generated scalar ymean0 = 329.851
# compute bounds for confidence interval using equation 3.28
? genr ymean1=ymean0-(2.179*sy1)
Generated scalar ymean1 = 306.836
? genr ymean2=ymean0+(2.179*sy1)
Generated scalar ymean2 = 352.866
# compute bounds for confidence interval using equation 3.29
? genr y1=ymean0-(2.179*sy2)
Generated scalar y1 = 241.76
? genr y2=ymean0+(2.179*sy2)
Generated scalar y2 = 417.942
# compute large sample confidence interval, that is, plus/minus 2 sigma
? genr sgmahat = sqrt(sgmasq)
Generated scalar sgmahat = 39.023
? genr y3 = ymean0 - (2*sgmahat)
Generated scalar y3 = 251.805
? genr y4 = ymean0 + (2*sgmahat)
Generated scalar y4 = 407.897
? print -o n df sgmasq xbar sdx sxx sysq1 sysq2 sy1 sy2 ymean0 ymean1 \
  ymean2 y1 y2 y3 y4

              n =  14.000000

             df =  12.000000

         sgmasq =  1522.7973

           xbar =  1910.9286

            sdx =  577.75713

            sxx =  4339442.9

          sysq1 =  111.55534

          sysq2 =  1634.3527

            sy1 =  10.561976

            sy2 =  40.427128

         ymean0 =  329.85100

         ymean1 =  306.83645

         ymean2 =  352.86555

             y1 =  241.76029

             y2 =  417.94171

             y3 =  251.80493

             y4 =  407.89707
Done
